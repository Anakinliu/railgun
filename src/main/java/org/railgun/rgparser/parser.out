Created by Dragon Sword Parser version 0.0.1 (gzxuwei@corp.entease.com)

Grammar

Rule 0     S' -> file_input
Rule 1     file_input -> ENDMARKER
Rule 2     file_input -> file_content ENDMARKER
Rule 3     file_content -> file_content NEWLINE
Rule 4     file_content -> file_content stmt
Rule 5     file_content -> NEWLINE
Rule 6     file_content -> stmt
Rule 7     decorator -> @ dotted_name NEWLINE
Rule 8     decorator -> @ dotted_name ( ) NEWLINE
Rule 9     decorator -> @ dotted_name ( arglist ) NEWLINE
Rule 10    decorators -> decorator
Rule 11    decorators -> decorators decorator
Rule 12    decorated -> decorators classdef
Rule 13    decorated -> decorators funcdef
Rule 14    classdef -> TAG_CLASS NAME : suite
Rule 15    classdef -> TAG_CLASS NAME ( testlist ) : suite
Rule 16    classdef -> TAG_CLASS NAME ( ) : suite
Rule 17    exprlist -> expr
Rule 18    exprlist -> exprlist , expr
Rule 19    expr -> xor_expr
Rule 20    expr -> expr | xor_expr
Rule 21    xor_expr -> and_expr
Rule 22    xor_expr -> xor_expr ^ and_expr
Rule 23    and_expr -> shift_expr
Rule 24    and_expr -> and_expr & shift_expr
Rule 25    shift_expr -> arith_expr
Rule 26    shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr
Rule 27    shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr
Rule 28    arith_expr -> term
Rule 29    arith_expr -> arith_expr + term
Rule 30    arith_expr -> arith_expr - term
Rule 31    term -> term * factor
Rule 32    term -> term / factor
Rule 33    term -> term % factor
Rule 34    term -> term OP_EXACT_DIVISION factor
Rule 35    term -> factor
Rule 36    factor -> + factor
Rule 37    factor -> - factor
Rule 38    factor -> ~ factor
Rule 39    factor -> power
Rule 40    power -> atom
Rule 41    power -> atom trailers
Rule 42    power -> atom OP_POWER factor
Rule 43    power -> atom trailers OP_POWER factor
Rule 44    trailers -> trailers trailer
Rule 45    trailers -> trailer
Rule 46    trailer -> ( )
Rule 47    trailer -> ( arglist )
Rule 48    trailer -> [ subscriptlist ]
Rule 49    trailer -> . NAME
Rule 50    arglist_piece -> argument
Rule 51    arglist_piece -> arglist_piece , argument
Rule 52    arglist -> arglist_piece
Rule 53    arglist -> arglist_piece ,
Rule 54    argument -> test
Rule 55    argument -> test comp_for
Rule 56    argument -> test = test
Rule 57    subscriptlist -> subscriptlist , subscript
Rule 58    subscriptlist -> subscriptlist ,
Rule 59    subscriptlist -> subscript
Rule 60    subscript -> . . .
Rule 61    subscript -> test
Rule 62    subscript -> :
Rule 63    subscript -> test :
Rule 64    subscript -> : test
Rule 65    subscript -> test : test
Rule 66    subscript -> : sliceop
Rule 67    subscript -> test : sliceop
Rule 68    subscript -> : test sliceop
Rule 69    subscript -> test : test sliceop
Rule 70    sliceop -> :
Rule 71    sliceop -> : test
Rule 72    atom -> ( )
Rule 73    atom -> ( yield_expr )
Rule 74    atom -> ( testlist_comp )
Rule 75    atom -> [ ]
Rule 76    atom -> [ listmaker ]
Rule 77    atom -> { }
Rule 78    atom -> { dictormaker }
Rule 79    atom -> { setmaker }
Rule 80    atom -> ` testlist1 `
Rule 81    atom -> NAME
Rule 82    atom -> NUMBER
Rule 83    atom -> strings
Rule 84    strings -> strings STRING
Rule 85    strings -> STRING
Rule 86    testlist1 -> test
Rule 87    testlist1 -> testlist1 , test
Rule 88    listmaker -> testlist
Rule 89    listmaker -> test list_for
Rule 90    dictormaker_piece -> test : test
Rule 91    dictormaker_piece -> dictormaker_piece , test : test
Rule 92    dictormaker -> dictormaker_piece
Rule 93    dictormaker -> dictormaker_piece ,
Rule 94    dictormaker -> test : test comp_for
Rule 95    setmaker_piece -> test
Rule 96    setmaker_piece -> setmaker_piece , test
Rule 97    setmaker -> setmaker_piece
Rule 98    setmaker -> setmaker_piece ,
Rule 99    setmaker -> test comp_for
Rule 100   testlist_comp -> testlist
Rule 101   testlist_comp -> test comp_for
Rule 102   comp_iter -> comp_for
Rule 103   comp_iter -> comp_if
Rule 104   comp_for -> TAG_FOR exprlist TAG_IN or_test
Rule 105   comp_for -> TAG_FOR exprlist TAG_IN or_test comp_iter
Rule 106   comp_if -> TAG_IF old_test
Rule 107   comp_if -> TAG_IF old_test comp_iter
Rule 108   list_iter -> list_for
Rule 109   list_iter -> list_if
Rule 110   list_for -> TAG_FOR exprlist TAG_IN testlist_safe
Rule 111   list_for -> TAG_FOR exprlist TAG_IN testlist_safe list_iter
Rule 112   list_if -> TAG_IF old_test
Rule 113   list_if -> TAG_IF old_test list_iter
Rule 114   testlist -> testlist_anns
Rule 115   testlist -> testlist_anns ,
Rule 116   testlist_anns -> testlist_anns , test
Rule 117   testlist_anns -> test
Rule 118   test -> or_test
Rule 119   test -> or_test TAG_IF or_test TAG_ELSE test
Rule 120   test -> lambdef
Rule 121   or_test -> and_test
Rule 122   or_test -> or_test TAG_OR and_test
Rule 123   and_test -> not_test
Rule 124   and_test -> and_test TAG_AND not_test
Rule 125   not_test -> TAG_NOT not_test
Rule 126   not_test -> comparison
Rule 127   comparison -> expr
Rule 128   comparison -> comparison comp_op expr
Rule 129   comp_op -> >
Rule 130   comp_op -> <
Rule 131   comp_op -> OP_EQ
Rule 132   comp_op -> OP_GE
Rule 133   comp_op -> OP_LE
Rule 134   comp_op -> OP_NE
Rule 135   comp_op -> OP_NNE
Rule 136   comp_op -> TAG_IN
Rule 137   comp_op -> TAG_NOT TAG_IN
Rule 138   comp_op -> TAG_IS
Rule 139   comp_op -> TAG_IS TAG_NOT
Rule 140   lambdef -> TAG_LAMBDA : test
Rule 141   lambdef -> TAG_LAMBDA varargslist : test
Rule 142   varargslist -> varargs_one , varargs_two
Rule 143   varargslist -> varargs_two
Rule 144   varargslist -> varargs_one
Rule 145   varargslist -> varargs_one ,
Rule 146   varargs_one -> varargs_one , fpdef
Rule 147   varargs_one -> varargs_one , fpdef = test
Rule 148   varargs_one -> fpdef
Rule 149   varargs_one -> fpdef = test
Rule 150   varargs_two -> * NAME
Rule 151   varargs_two -> OP_POWER NAME
Rule 152   varargs_two -> * NAME , OP_POWER NAME
Rule 153   fpdef -> NAME
Rule 154   fpdef -> ( fplist )
Rule 155   fplist_top -> fpdef
Rule 156   fplist_top -> fplist_top , fpdef
Rule 157   fplist -> fplist_top
Rule 158   fplist -> fplist_top ,
Rule 159   trailerx -> arglist
Rule 160   funcdef -> TAG_DEF NAME parameters suite
Rule 161   parameters -> ( )
Rule 162   parameters -> ( varargslist )
Rule 163   suite -> simple_stmt
Rule 164   suite -> INDENT stmts DEDENT
Rule 165   testlist_safe_piece -> old_test
Rule 166   testlist_safe_piece -> testlist_safe_piece , old_test
Rule 167   testlist_safe -> testlist_safe_piece
Rule 168   testlist_safe -> testlist_safe_piece ,
Rule 169   old_test -> or_test
Rule 170   old_test -> old_lambdef
Rule 171   old_lambdef -> TAG_LAMBDA : old_test
Rule 172   old_lambdef -> TAG_LAMBDA varargslist : old_test
Rule 173   stmts -> stmt
Rule 174   stmts -> stmts stmt
Rule 175   stmt -> simple_stmt
Rule 176   stmt -> compound_stmt
Rule 177   compound_stmt -> if_stmt
Rule 178   compound_stmt -> while_stmt
Rule 179   compound_stmt -> for_stmt
Rule 180   compound_stmt -> try_stmt
Rule 181   compound_stmt -> funcdef
Rule 182   compound_stmt -> classdef
Rule 183   compound_stmt -> decorated
Rule 184   if_stmt -> TAG_IF test suite
Rule 185   if_stmt -> TAG_IF test suite TAG_ELSE suite
Rule 186   if_stmt -> TAG_IF test suite elif_list
Rule 187   if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite
Rule 188   while_stmt -> TAG_WHILE test suite
Rule 189   while_stmt -> TAG_WHILE test suite TAG_ELSE suite
Rule 190   for_stmt -> TAG_FOR exprlist TAG_IN testlist suite
Rule 191   for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite
Rule 192   try_stmt -> TAG_TRY : suite TAG_FINALLY : suite
Rule 193   try_stmt -> TAG_TRY : suite except_clauses
Rule 194   try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite
Rule 195   try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite
Rule 196   try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite
Rule 197   except_clauses -> except_clauses except_clause : suite
Rule 198   except_clauses -> except_clause : suite
Rule 199   except_clause -> TAG_EXCEPT
Rule 200   except_clause -> TAG_EXCEPT test
Rule 201   except_clause -> TAG_EXCEPT test TAG_AS test
Rule 202   except_clause -> TAG_EXCEPT test , test
Rule 203   elif_list -> TAG_ELIF test : suite
Rule 204   elif_list -> elif_list TAG_ELIF test : suite
Rule 205   simple_stmt -> simple_stmt ; small_stmt NEWLINE
Rule 206   simple_stmt -> simple_stmt ; small_stmt ; NEWLINE
Rule 207   simple_stmt -> small_stmt NEWLINE
Rule 208   simple_stmt -> small_stmt ; NEWLINE
Rule 209   small_stmt -> expr_stmt
Rule 210   small_stmt -> del_stmt
Rule 211   small_stmt -> pass_stmt
Rule 212   small_stmt -> flow_stmt
Rule 213   small_stmt -> import_stmt
Rule 214   small_stmt -> global_stmt
Rule 215   small_stmt -> exec_stmt
Rule 216   small_stmt -> assert_stmt
Rule 217   small_stmt -> draw_stmt
Rule 218   expr_stmt -> testlist augassign yield_expr
Rule 219   expr_stmt -> testlist augassign testlist
Rule 220   expr_stmt -> testlist expr_stmt_bottom
Rule 221   expr_stmt -> testlist
Rule 222   augassign -> ADD_ASN
Rule 223   augassign -> SUB_ASN
Rule 224   augassign -> MUL_ASN
Rule 225   augassign -> DIV_ASN
Rule 226   augassign -> MOD_ASN
Rule 227   augassign -> AND_ASN
Rule 228   augassign -> OR_ASN
Rule 229   augassign -> XOR_ASN
Rule 230   augassign -> LSHIFT_ASN
Rule 231   augassign -> RSHIFT_ASN
Rule 232   augassign -> POW_ASN
Rule 233   augassign -> FDIV_ASN
Rule 234   expr_stmt_bottom -> = yield_expr
Rule 235   expr_stmt_bottom -> = testlist
Rule 236   expr_stmt_bottom -> expr_stmt_bottom = yield_expr
Rule 237   expr_stmt_bottom -> expr_stmt_bottom = testlist
Rule 238   draw_stmt -> TAG_DRAW
Rule 239   draw_stmt -> TAG_DRAW testlist
Rule 240   del_stmt -> TAG_DEL exprlist
Rule 241   pass_stmt -> TAG_PASS
Rule 242   flow_stmt -> break_stmt
Rule 243   flow_stmt -> continue_stmt
Rule 244   flow_stmt -> return_stmt
Rule 245   flow_stmt -> raise_stmt
Rule 246   flow_stmt -> yield_stmt
Rule 247   break_stmt -> TAG_BREAK
Rule 248   continue_stmt -> TAG_CONTINUE
Rule 249   return_stmt -> TAG_RETURN
Rule 250   return_stmt -> TAG_RETURN testlist
Rule 251   raise_stmt -> TAG_RAISE
Rule 252   raise_stmt -> TAG_RAISE test
Rule 253   raise_stmt -> TAG_RAISE test , test
Rule 254   raise_stmt -> TAG_RAISE test , test , test
Rule 255   import_stmt -> import_name
Rule 256   import_stmt -> import_from
Rule 257   import_name -> TAG_IMPORT dotted_as_names
Rule 258   import_from -> TAG_FROM dotted_name TAG_IMPORT *
Rule 259   import_from -> TAG_FROM dotted_name TAG_IMPORT import_as_names
Rule 260   import_as_name -> NAME
Rule 261   import_as_name -> NAME TAG_AS NAME
Rule 262   dotted_as_name -> dotted_name
Rule 263   dotted_as_name -> dotted_name TAG_AS NAME
Rule 264   import_as_names -> import_as_names_ann
Rule 265   import_as_names -> import_as_names_ann ,
Rule 266   import_as_names_ann -> import_as_name
Rule 267   import_as_names_ann -> import_as_names_ann , import_as_name
Rule 268   dotted_as_names -> dotted_as_names , dotted_as_name
Rule 269   dotted_as_names -> dotted_as_name
Rule 270   dotted_name -> NAME
Rule 271   dotted_name -> dotted_name . NAME
Rule 272   global_stmt -> TAG_GLOBAL namelist
Rule 273   namelist -> NAME
Rule 274   namelist -> namelist , NAME
Rule 275   yield_stmt -> yield_expr
Rule 276   exec_stmt -> TAG_EXEC expr
Rule 277   exec_stmt -> TAG_EXEC expr TAG_IN test
Rule 278   exec_stmt -> TAG_EXEC expr TAG_IN test , test
Rule 279   assert_stmt -> TAG_ASSERT test
Rule 280   assert_stmt -> TAG_ASSERT test , test
Rule 281   yield_expr -> TAG_YIELD
Rule 282   yield_expr -> TAG_YIELD testlist

Terminals, with rules where they appear

%                    : 33
&                    : 24
(                    : 8 9 15 16 46 47 72 73 74 154 161 162
)                    : 8 9 15 16 46 47 72 73 74 154 161 162
*                    : 31 150 152 258
+                    : 29 36
,                    : 18 51 53 57 58 87 91 93 96 98 115 116 142 145 146 147 152 156 158 166 168 202 253 254 254 265 267 268 274 278 280
-                    : 30 37
.                    : 49 60 60 60 271
/                    : 32
:                    : 14 15 16 62 63 64 65 66 67 68 69 70 71 90 91 94 140 141 171 172 192 192 193 194 194 195 195 196 196 196 197 198 203 204
;                    : 205 206 206 208
<                    : 130
=                    : 56 147 149 234 235 236 237
>                    : 129
@                    : 7 8 9
ADD_ASN              : 222
AND_ASN              : 227
DEDENT               : 164
DIV_ASN              : 225
ENDMARKER            : 1 2
FDIV_ASN             : 233
INDENT               : 164
LSHIFT_ASN           : 230
MOD_ASN              : 226
MUL_ASN              : 224
NAME                 : 14 15 16 49 81 150 151 152 152 153 160 260 261 261 263 270 271 273 274
NEWLINE              : 3 5 7 8 9 205 206 207 208
NUMBER               : 82
OP_EQ                : 131
OP_EXACT_DIVISION    : 34
OP_GE                : 132
OP_LE                : 133
OP_LEFT_SHIFT        : 26
OP_NE                : 134
OP_NNE               : 135
OP_POWER             : 42 43 151 152
OP_RIGHT_SHIFT       : 27
OR_ASN               : 228
POW_ASN              : 232
RSHIFT_ASN           : 231
STRING               : 84 85
SUB_ASN              : 223
TAG_AND              : 124
TAG_AS               : 201 261 263
TAG_ASSERT           : 279 280
TAG_BREAK            : 247
TAG_CLASS            : 14 15 16
TAG_CONTINUE         : 248
TAG_DEF              : 160
TAG_DEL              : 240
TAG_DRAW             : 238 239
TAG_ELIF             : 203 204
TAG_ELSE             : 119 185 187 189 191 194 196
TAG_EXCEPT           : 199 200 201 202
TAG_EXEC             : 276 277 278
TAG_FINALLY          : 192 195 196
TAG_FOR              : 104 105 110 111 190 191
TAG_FROM             : 258 259
TAG_GLOBAL           : 272
TAG_IF               : 106 107 112 113 119 184 185 186 187
TAG_IMPORT           : 257 258 259
TAG_IN               : 104 105 110 111 136 137 190 191 277 278
TAG_IS               : 138 139
TAG_LAMBDA           : 140 141 171 172
TAG_NOT              : 125 137 139
TAG_OR               : 122
TAG_PASS             : 241
TAG_RAISE            : 251 252 253 254
TAG_RETURN           : 249 250
TAG_TRY              : 192 193 194 195 196
TAG_WHILE            : 188 189
TAG_YIELD            : 281 282
XOR_ASN              : 229
[                    : 48 75 76
]                    : 48 75 76
^                    : 22
`                    : 80 80
error                : 
{                    : 77 78 79
|                    : 20
}                    : 77 78 79
~                    : 38

Nonterminals, with rules where they appear

and_expr             : 21 22 24
and_test             : 121 122 124
arglist              : 9 47 159
arglist_piece        : 51 52 53
argument             : 50 51
arith_expr           : 25 26 27 29 30
assert_stmt          : 216
atom                 : 40 41 42 43
augassign            : 218 219
break_stmt           : 242
classdef             : 12 182
comp_for             : 55 94 99 101 102
comp_if              : 103
comp_iter            : 105 107
comp_op              : 128
comparison           : 126 128
compound_stmt        : 176
continue_stmt        : 243
decorated            : 183
decorator            : 10 11
decorators           : 11 12 13
del_stmt             : 210
dictormaker          : 78
dictormaker_piece    : 91 92 93
dotted_as_name       : 268 269
dotted_as_names      : 257 268
dotted_name          : 7 8 9 258 259 262 263 271
draw_stmt            : 217
elif_list            : 186 187 204
except_clause        : 197 198
except_clauses       : 193 194 195 196 197
exec_stmt            : 215
expr                 : 17 18 20 127 128 276 277 278
expr_stmt            : 209
expr_stmt_bottom     : 220 236 237
exprlist             : 18 104 105 110 111 190 191 240
factor               : 31 32 33 34 35 36 37 38 42 43
file_content         : 2 3 4
file_input           : 0
flow_stmt            : 212
for_stmt             : 179
fpdef                : 146 147 148 149 155 156
fplist               : 154
fplist_top           : 156 157 158
funcdef              : 13 181
global_stmt          : 214
if_stmt              : 177
import_as_name       : 266 267
import_as_names      : 259
import_as_names_ann  : 264 265 267
import_from          : 256
import_name          : 255
import_stmt          : 213
lambdef              : 120
list_for             : 89 108
list_if              : 109
list_iter            : 111 113
listmaker            : 76
namelist             : 272 274
not_test             : 123 124 125
old_lambdef          : 170
old_test             : 106 107 112 113 165 166 171 172
or_test              : 104 105 118 119 119 122 169
parameters           : 160
pass_stmt            : 211
power                : 39
raise_stmt           : 245
return_stmt          : 244
setmaker             : 79
setmaker_piece       : 96 97 98
shift_expr           : 23 24 26 27
simple_stmt          : 163 175 205 206
sliceop              : 66 67 68 69
small_stmt           : 205 206 207 208
stmt                 : 4 6 173 174
stmts                : 164 174
strings              : 83 84
subscript            : 57 59
subscriptlist        : 48 57 58
suite                : 14 15 16 160 184 185 185 186 187 187 188 189 189 190 191 191 192 192 193 194 194 195 195 196 196 196 197 198 203 204
term                 : 28 29 30 31 32 33 34
test                 : 54 55 56 56 61 63 64 65 65 67 68 69 69 71 86 87 89 90 90 91 91 94 94 95 96 99 101 116 117 119 140 141 147 149 184 185 186 187 188 189 200 201 201 202 202 203 204 252 253 253 254 254 254 277 278 278 279 280 280
testlist             : 15 88 100 190 191 218 219 219 220 221 235 237 239 250 282
testlist1            : 80 87
testlist_anns        : 114 115 116
testlist_comp        : 74
testlist_safe        : 110 111
testlist_safe_piece  : 166 167 168
trailer              : 44 45
trailers             : 41 43 44
trailerx             : 
try_stmt             : 180
varargs_one          : 142 144 145 146 147
varargs_two          : 142 143
varargslist          : 141 162 172
while_stmt           : 178
xor_expr             : 19 20 22
yield_expr           : 73 218 234 236 275
yield_stmt           : 246

Parsing method: LALR

state 0

    (0) S' -> . file_input
    (1) file_input -> . ENDMARKER
    (2) file_input -> . file_content ENDMARKER
    (3) file_content -> . file_content NEWLINE
    (4) file_content -> . file_content stmt
    (5) file_content -> . NEWLINE
    (6) file_content -> . stmt
    (175) stmt -> . simple_stmt
    (176) stmt -> . compound_stmt
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (177) compound_stmt -> . if_stmt
    (178) compound_stmt -> . while_stmt
    (179) compound_stmt -> . for_stmt
    (180) compound_stmt -> . try_stmt
    (181) compound_stmt -> . funcdef
    (182) compound_stmt -> . classdef
    (183) compound_stmt -> . decorated
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (184) if_stmt -> . TAG_IF test suite
    (185) if_stmt -> . TAG_IF test suite TAG_ELSE suite
    (186) if_stmt -> . TAG_IF test suite elif_list
    (187) if_stmt -> . TAG_IF test suite elif_list TAG_ELSE suite
    (188) while_stmt -> . TAG_WHILE test suite
    (189) while_stmt -> . TAG_WHILE test suite TAG_ELSE suite
    (190) for_stmt -> . TAG_FOR exprlist TAG_IN testlist suite
    (191) for_stmt -> . TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite
    (192) try_stmt -> . TAG_TRY : suite TAG_FINALLY : suite
    (193) try_stmt -> . TAG_TRY : suite except_clauses
    (194) try_stmt -> . TAG_TRY : suite except_clauses TAG_ELSE : suite
    (195) try_stmt -> . TAG_TRY : suite except_clauses TAG_FINALLY : suite
    (196) try_stmt -> . TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite
    (160) funcdef -> . TAG_DEF NAME parameters suite
    (14) classdef -> . TAG_CLASS NAME : suite
    (15) classdef -> . TAG_CLASS NAME ( testlist ) : suite
    (16) classdef -> . TAG_CLASS NAME ( ) : suite
    (12) decorated -> . decorators classdef
    (13) decorated -> . decorators funcdef
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (10) decorators -> . decorator
    (11) decorators -> . decorators decorator
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (7) decorator -> . @ dotted_name NEWLINE
    (8) decorator -> . @ dotted_name ( ) NEWLINE
    (9) decorator -> . @ dotted_name ( arglist ) NEWLINE
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    ENDMARKER       shift and go to state 1
    NEWLINE         shift and go to state 10
    TAG_IF          shift and go to state 28
    TAG_WHILE       shift and go to state 37
    TAG_FOR         shift and go to state 15
    TAG_TRY         shift and go to state 30
    TAG_DEF         shift and go to state 62
    TAG_CLASS       shift and go to state 58
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    @               shift and go to state 16
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    atom                           shift and go to state 56
    try_stmt                       shift and go to state 6
    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    import_name                    shift and go to state 76
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    compound_stmt                  shift and go to state 39
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 17
    testlist                       shift and go to state 18
    classdef                       shift and go to state 19
    stmt                           shift and go to state 42
    assert_stmt                    shift and go to state 20
    for_stmt                       shift and go to state 21
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    funcdef                        shift and go to state 5
    decorated                      shift and go to state 79
    import_stmt                    shift and go to state 44
    decorator                      shift and go to state 24
    pass_stmt                      shift and go to state 46
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    decorators                     shift and go to state 38
    if_stmt                        shift and go to state 27
    xor_expr                       shift and go to state 52
    file_content                   shift and go to state 80
    file_input                     shift and go to state 60
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    while_stmt                     shift and go to state 73
    expr                           shift and go to state 31
    arith_expr                     shift and go to state 47
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 1

    (1) file_input -> ENDMARKER .

    $end            reduce using rule 1 (file_input -> ENDMARKER .)


state 2

    (207) simple_stmt -> small_stmt . NEWLINE
    (208) simple_stmt -> small_stmt . ; NEWLINE

    NEWLINE         shift and go to state 86
    ;               shift and go to state 85


state 3

    (23) and_expr -> shift_expr .
    (26) shift_expr -> shift_expr . OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> shift_expr . OP_RIGHT_SHIFT arith_expr

    &               reduce using rule 23 (and_expr -> shift_expr .)
    ^               reduce using rule 23 (and_expr -> shift_expr .)
    |               reduce using rule 23 (and_expr -> shift_expr .)
    >               reduce using rule 23 (and_expr -> shift_expr .)
    <               reduce using rule 23 (and_expr -> shift_expr .)
    OP_EQ           reduce using rule 23 (and_expr -> shift_expr .)
    OP_GE           reduce using rule 23 (and_expr -> shift_expr .)
    OP_LE           reduce using rule 23 (and_expr -> shift_expr .)
    OP_NE           reduce using rule 23 (and_expr -> shift_expr .)
    OP_NNE          reduce using rule 23 (and_expr -> shift_expr .)
    TAG_IN          reduce using rule 23 (and_expr -> shift_expr .)
    TAG_NOT         reduce using rule 23 (and_expr -> shift_expr .)
    TAG_IS          reduce using rule 23 (and_expr -> shift_expr .)
    TAG_AND         reduce using rule 23 (and_expr -> shift_expr .)
    TAG_OR          reduce using rule 23 (and_expr -> shift_expr .)
    TAG_FOR         reduce using rule 23 (and_expr -> shift_expr .)
    TAG_IF          reduce using rule 23 (and_expr -> shift_expr .)
    ]               reduce using rule 23 (and_expr -> shift_expr .)
    INDENT          reduce using rule 23 (and_expr -> shift_expr .)
    TAG_DEL         reduce using rule 23 (and_expr -> shift_expr .)
    TAG_PASS        reduce using rule 23 (and_expr -> shift_expr .)
    TAG_GLOBAL      reduce using rule 23 (and_expr -> shift_expr .)
    TAG_EXEC        reduce using rule 23 (and_expr -> shift_expr .)
    TAG_ASSERT      reduce using rule 23 (and_expr -> shift_expr .)
    TAG_DRAW        reduce using rule 23 (and_expr -> shift_expr .)
    TAG_BREAK       reduce using rule 23 (and_expr -> shift_expr .)
    TAG_CONTINUE    reduce using rule 23 (and_expr -> shift_expr .)
    TAG_RETURN      reduce using rule 23 (and_expr -> shift_expr .)
    TAG_RAISE       reduce using rule 23 (and_expr -> shift_expr .)
    TAG_IMPORT      reduce using rule 23 (and_expr -> shift_expr .)
    TAG_FROM        reduce using rule 23 (and_expr -> shift_expr .)
    TAG_YIELD       reduce using rule 23 (and_expr -> shift_expr .)
    TAG_LAMBDA      reduce using rule 23 (and_expr -> shift_expr .)
    +               reduce using rule 23 (and_expr -> shift_expr .)
    -               reduce using rule 23 (and_expr -> shift_expr .)
    ~               reduce using rule 23 (and_expr -> shift_expr .)
    (               reduce using rule 23 (and_expr -> shift_expr .)
    [               reduce using rule 23 (and_expr -> shift_expr .)
    {               reduce using rule 23 (and_expr -> shift_expr .)
    `               reduce using rule 23 (and_expr -> shift_expr .)
    NAME            reduce using rule 23 (and_expr -> shift_expr .)
    NUMBER          reduce using rule 23 (and_expr -> shift_expr .)
    STRING          reduce using rule 23 (and_expr -> shift_expr .)
    ,               reduce using rule 23 (and_expr -> shift_expr .)
    ADD_ASN         reduce using rule 23 (and_expr -> shift_expr .)
    SUB_ASN         reduce using rule 23 (and_expr -> shift_expr .)
    MUL_ASN         reduce using rule 23 (and_expr -> shift_expr .)
    DIV_ASN         reduce using rule 23 (and_expr -> shift_expr .)
    MOD_ASN         reduce using rule 23 (and_expr -> shift_expr .)
    AND_ASN         reduce using rule 23 (and_expr -> shift_expr .)
    OR_ASN          reduce using rule 23 (and_expr -> shift_expr .)
    XOR_ASN         reduce using rule 23 (and_expr -> shift_expr .)
    LSHIFT_ASN      reduce using rule 23 (and_expr -> shift_expr .)
    RSHIFT_ASN      reduce using rule 23 (and_expr -> shift_expr .)
    POW_ASN         reduce using rule 23 (and_expr -> shift_expr .)
    FDIV_ASN        reduce using rule 23 (and_expr -> shift_expr .)
    =               reduce using rule 23 (and_expr -> shift_expr .)
    NEWLINE         reduce using rule 23 (and_expr -> shift_expr .)
    ;               reduce using rule 23 (and_expr -> shift_expr .)
    }               reduce using rule 23 (and_expr -> shift_expr .)
    :               reduce using rule 23 (and_expr -> shift_expr .)
    )               reduce using rule 23 (and_expr -> shift_expr .)
    TAG_AS          reduce using rule 23 (and_expr -> shift_expr .)
    TAG_ELSE        reduce using rule 23 (and_expr -> shift_expr .)
    OP_LEFT_SHIFT   shift and go to state 88
    OP_RIGHT_SHIFT  shift and go to state 87


state 4

    (256) import_stmt -> import_from .

    NEWLINE         reduce using rule 256 (import_stmt -> import_from .)
    ;               reduce using rule 256 (import_stmt -> import_from .)


state 5

    (181) compound_stmt -> funcdef .

    ENDMARKER       reduce using rule 181 (compound_stmt -> funcdef .)
    NEWLINE         reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_IF          reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_WHILE       reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_FOR         reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_TRY         reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_DEF         reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_CLASS       reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_DEL         reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_PASS        reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_GLOBAL      reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_EXEC        reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_ASSERT      reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_DRAW        reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_BREAK       reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_CONTINUE    reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_RETURN      reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_RAISE       reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_IMPORT      reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_FROM        reduce using rule 181 (compound_stmt -> funcdef .)
    @               reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_YIELD       reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_LAMBDA      reduce using rule 181 (compound_stmt -> funcdef .)
    TAG_NOT         reduce using rule 181 (compound_stmt -> funcdef .)
    +               reduce using rule 181 (compound_stmt -> funcdef .)
    -               reduce using rule 181 (compound_stmt -> funcdef .)
    ~               reduce using rule 181 (compound_stmt -> funcdef .)
    (               reduce using rule 181 (compound_stmt -> funcdef .)
    [               reduce using rule 181 (compound_stmt -> funcdef .)
    {               reduce using rule 181 (compound_stmt -> funcdef .)
    `               reduce using rule 181 (compound_stmt -> funcdef .)
    NAME            reduce using rule 181 (compound_stmt -> funcdef .)
    NUMBER          reduce using rule 181 (compound_stmt -> funcdef .)
    STRING          reduce using rule 181 (compound_stmt -> funcdef .)
    DEDENT          reduce using rule 181 (compound_stmt -> funcdef .)


state 6

    (180) compound_stmt -> try_stmt .

    ENDMARKER       reduce using rule 180 (compound_stmt -> try_stmt .)
    NEWLINE         reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_IF          reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_WHILE       reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_FOR         reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_TRY         reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_DEF         reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_CLASS       reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_DEL         reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_PASS        reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_GLOBAL      reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_EXEC        reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_ASSERT      reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_DRAW        reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_BREAK       reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_CONTINUE    reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_RETURN      reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_RAISE       reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_IMPORT      reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_FROM        reduce using rule 180 (compound_stmt -> try_stmt .)
    @               reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_YIELD       reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_LAMBDA      reduce using rule 180 (compound_stmt -> try_stmt .)
    TAG_NOT         reduce using rule 180 (compound_stmt -> try_stmt .)
    +               reduce using rule 180 (compound_stmt -> try_stmt .)
    -               reduce using rule 180 (compound_stmt -> try_stmt .)
    ~               reduce using rule 180 (compound_stmt -> try_stmt .)
    (               reduce using rule 180 (compound_stmt -> try_stmt .)
    [               reduce using rule 180 (compound_stmt -> try_stmt .)
    {               reduce using rule 180 (compound_stmt -> try_stmt .)
    `               reduce using rule 180 (compound_stmt -> try_stmt .)
    NAME            reduce using rule 180 (compound_stmt -> try_stmt .)
    NUMBER          reduce using rule 180 (compound_stmt -> try_stmt .)
    STRING          reduce using rule 180 (compound_stmt -> try_stmt .)
    DEDENT          reduce using rule 180 (compound_stmt -> try_stmt .)


state 7

    (125) not_test -> TAG_NOT . not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    comparison                     shift and go to state 45
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    term                           shift and go to state 26
    strings                        shift and go to state 82
    not_test                       shift and go to state 89
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 52
    and_expr                       shift and go to state 63

state 8

    (276) exec_stmt -> TAG_EXEC . expr
    (277) exec_stmt -> TAG_EXEC . expr TAG_IN test
    (278) exec_stmt -> TAG_EXEC . expr TAG_IN test , test
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 90
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 52
    strings                        shift and go to state 82
    and_expr                       shift and go to state 63

state 9

    (72) atom -> ( . )
    (73) atom -> ( . yield_expr )
    (74) atom -> ( . testlist_comp )
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (100) testlist_comp -> . testlist
    (101) testlist_comp -> . test comp_for
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    )               shift and go to state 92
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    testlist_comp                  shift and go to state 91
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 93
    and_expr                       shift and go to state 63
    yield_expr                     shift and go to state 94
    power                          shift and go to state 40
    testlist                       shift and go to state 95
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 10

    (5) file_content -> NEWLINE .

    ENDMARKER       reduce using rule 5 (file_content -> NEWLINE .)
    NEWLINE         reduce using rule 5 (file_content -> NEWLINE .)
    TAG_IF          reduce using rule 5 (file_content -> NEWLINE .)
    TAG_WHILE       reduce using rule 5 (file_content -> NEWLINE .)
    TAG_FOR         reduce using rule 5 (file_content -> NEWLINE .)
    TAG_TRY         reduce using rule 5 (file_content -> NEWLINE .)
    TAG_DEF         reduce using rule 5 (file_content -> NEWLINE .)
    TAG_CLASS       reduce using rule 5 (file_content -> NEWLINE .)
    TAG_DEL         reduce using rule 5 (file_content -> NEWLINE .)
    TAG_PASS        reduce using rule 5 (file_content -> NEWLINE .)
    TAG_GLOBAL      reduce using rule 5 (file_content -> NEWLINE .)
    TAG_EXEC        reduce using rule 5 (file_content -> NEWLINE .)
    TAG_ASSERT      reduce using rule 5 (file_content -> NEWLINE .)
    TAG_DRAW        reduce using rule 5 (file_content -> NEWLINE .)
    TAG_BREAK       reduce using rule 5 (file_content -> NEWLINE .)
    TAG_CONTINUE    reduce using rule 5 (file_content -> NEWLINE .)
    TAG_RETURN      reduce using rule 5 (file_content -> NEWLINE .)
    TAG_RAISE       reduce using rule 5 (file_content -> NEWLINE .)
    TAG_IMPORT      reduce using rule 5 (file_content -> NEWLINE .)
    TAG_FROM        reduce using rule 5 (file_content -> NEWLINE .)
    @               reduce using rule 5 (file_content -> NEWLINE .)
    TAG_YIELD       reduce using rule 5 (file_content -> NEWLINE .)
    TAG_LAMBDA      reduce using rule 5 (file_content -> NEWLINE .)
    TAG_NOT         reduce using rule 5 (file_content -> NEWLINE .)
    +               reduce using rule 5 (file_content -> NEWLINE .)
    -               reduce using rule 5 (file_content -> NEWLINE .)
    ~               reduce using rule 5 (file_content -> NEWLINE .)
    (               reduce using rule 5 (file_content -> NEWLINE .)
    [               reduce using rule 5 (file_content -> NEWLINE .)
    {               reduce using rule 5 (file_content -> NEWLINE .)
    `               reduce using rule 5 (file_content -> NEWLINE .)
    NAME            reduce using rule 5 (file_content -> NEWLINE .)
    NUMBER          reduce using rule 5 (file_content -> NEWLINE .)
    STRING          reduce using rule 5 (file_content -> NEWLINE .)


state 11

    (140) lambdef -> TAG_LAMBDA . : test
    (141) lambdef -> TAG_LAMBDA . varargslist : test
    (142) varargslist -> . varargs_one , varargs_two
    (143) varargslist -> . varargs_two
    (144) varargslist -> . varargs_one
    (145) varargslist -> . varargs_one ,
    (146) varargs_one -> . varargs_one , fpdef
    (147) varargs_one -> . varargs_one , fpdef = test
    (148) varargs_one -> . fpdef
    (149) varargs_one -> . fpdef = test
    (150) varargs_two -> . * NAME
    (151) varargs_two -> . OP_POWER NAME
    (152) varargs_two -> . * NAME , OP_POWER NAME
    (153) fpdef -> . NAME
    (154) fpdef -> . ( fplist )

    :               shift and go to state 104
    *               shift and go to state 100
    OP_POWER        shift and go to state 96
    NAME            shift and go to state 97
    (               shift and go to state 98

    fpdef                          shift and go to state 99
    varargs_two                    shift and go to state 101
    varargslist                    shift and go to state 102
    varargs_one                    shift and go to state 103

state 12

    (238) draw_stmt -> TAG_DRAW .
    (239) draw_stmt -> TAG_DRAW . testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    NEWLINE         reduce using rule 238 (draw_stmt -> TAG_DRAW .)
    ;               reduce using rule 238 (draw_stmt -> TAG_DRAW .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 74
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    testlist                       shift and go to state 105
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 13

    (35) term -> factor .

    *               reduce using rule 35 (term -> factor .)
    /               reduce using rule 35 (term -> factor .)
    %               reduce using rule 35 (term -> factor .)
    OP_EXACT_DIVISION reduce using rule 35 (term -> factor .)
    +               reduce using rule 35 (term -> factor .)
    -               reduce using rule 35 (term -> factor .)
    OP_LEFT_SHIFT   reduce using rule 35 (term -> factor .)
    OP_RIGHT_SHIFT  reduce using rule 35 (term -> factor .)
    &               reduce using rule 35 (term -> factor .)
    ^               reduce using rule 35 (term -> factor .)
    |               reduce using rule 35 (term -> factor .)
    >               reduce using rule 35 (term -> factor .)
    <               reduce using rule 35 (term -> factor .)
    OP_EQ           reduce using rule 35 (term -> factor .)
    OP_GE           reduce using rule 35 (term -> factor .)
    OP_LE           reduce using rule 35 (term -> factor .)
    OP_NE           reduce using rule 35 (term -> factor .)
    OP_NNE          reduce using rule 35 (term -> factor .)
    TAG_IN          reduce using rule 35 (term -> factor .)
    TAG_NOT         reduce using rule 35 (term -> factor .)
    TAG_IS          reduce using rule 35 (term -> factor .)
    TAG_AND         reduce using rule 35 (term -> factor .)
    TAG_IF          reduce using rule 35 (term -> factor .)
    TAG_OR          reduce using rule 35 (term -> factor .)
    ]               reduce using rule 35 (term -> factor .)
    ,               reduce using rule 35 (term -> factor .)
    )               reduce using rule 35 (term -> factor .)
    ADD_ASN         reduce using rule 35 (term -> factor .)
    SUB_ASN         reduce using rule 35 (term -> factor .)
    MUL_ASN         reduce using rule 35 (term -> factor .)
    DIV_ASN         reduce using rule 35 (term -> factor .)
    MOD_ASN         reduce using rule 35 (term -> factor .)
    AND_ASN         reduce using rule 35 (term -> factor .)
    OR_ASN          reduce using rule 35 (term -> factor .)
    XOR_ASN         reduce using rule 35 (term -> factor .)
    LSHIFT_ASN      reduce using rule 35 (term -> factor .)
    RSHIFT_ASN      reduce using rule 35 (term -> factor .)
    POW_ASN         reduce using rule 35 (term -> factor .)
    FDIV_ASN        reduce using rule 35 (term -> factor .)
    =               reduce using rule 35 (term -> factor .)
    NEWLINE         reduce using rule 35 (term -> factor .)
    ;               reduce using rule 35 (term -> factor .)
    TAG_FOR         reduce using rule 35 (term -> factor .)
    `               reduce using rule 35 (term -> factor .)
    INDENT          reduce using rule 35 (term -> factor .)
    TAG_DEL         reduce using rule 35 (term -> factor .)
    TAG_PASS        reduce using rule 35 (term -> factor .)
    TAG_GLOBAL      reduce using rule 35 (term -> factor .)
    TAG_EXEC        reduce using rule 35 (term -> factor .)
    TAG_ASSERT      reduce using rule 35 (term -> factor .)
    TAG_DRAW        reduce using rule 35 (term -> factor .)
    TAG_BREAK       reduce using rule 35 (term -> factor .)
    TAG_CONTINUE    reduce using rule 35 (term -> factor .)
    TAG_RETURN      reduce using rule 35 (term -> factor .)
    TAG_RAISE       reduce using rule 35 (term -> factor .)
    TAG_IMPORT      reduce using rule 35 (term -> factor .)
    TAG_FROM        reduce using rule 35 (term -> factor .)
    TAG_YIELD       reduce using rule 35 (term -> factor .)
    TAG_LAMBDA      reduce using rule 35 (term -> factor .)
    ~               reduce using rule 35 (term -> factor .)
    (               reduce using rule 35 (term -> factor .)
    [               reduce using rule 35 (term -> factor .)
    {               reduce using rule 35 (term -> factor .)
    NAME            reduce using rule 35 (term -> factor .)
    NUMBER          reduce using rule 35 (term -> factor .)
    STRING          reduce using rule 35 (term -> factor .)
    :               reduce using rule 35 (term -> factor .)
    }               reduce using rule 35 (term -> factor .)
    TAG_AS          reduce using rule 35 (term -> factor .)
    TAG_ELSE        reduce using rule 35 (term -> factor .)


state 14

    (251) raise_stmt -> TAG_RAISE .
    (252) raise_stmt -> TAG_RAISE . test
    (253) raise_stmt -> TAG_RAISE . test , test
    (254) raise_stmt -> TAG_RAISE . test , test , test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    NEWLINE         reduce using rule 251 (raise_stmt -> TAG_RAISE .)
    ;               reduce using rule 251 (raise_stmt -> TAG_RAISE .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 106
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 15

    (190) for_stmt -> TAG_FOR . exprlist TAG_IN testlist suite
    (191) for_stmt -> TAG_FOR . exprlist TAG_IN testlist suite TAG_ELSE suite
    (17) exprlist -> . expr
    (18) exprlist -> . exprlist , expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 108
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 52
    exprlist                       shift and go to state 107
    and_expr                       shift and go to state 63

state 16

    (7) decorator -> @ . dotted_name NEWLINE
    (8) decorator -> @ . dotted_name ( ) NEWLINE
    (9) decorator -> @ . dotted_name ( arglist ) NEWLINE
    (270) dotted_name -> . NAME
    (271) dotted_name -> . dotted_name . NAME

    NAME            shift and go to state 109

    dotted_name                    shift and go to state 110

state 17

    (175) stmt -> simple_stmt .
    (205) simple_stmt -> simple_stmt . ; small_stmt NEWLINE
    (206) simple_stmt -> simple_stmt . ; small_stmt ; NEWLINE

    ENDMARKER       reduce using rule 175 (stmt -> simple_stmt .)
    NEWLINE         reduce using rule 175 (stmt -> simple_stmt .)
    TAG_IF          reduce using rule 175 (stmt -> simple_stmt .)
    TAG_WHILE       reduce using rule 175 (stmt -> simple_stmt .)
    TAG_FOR         reduce using rule 175 (stmt -> simple_stmt .)
    TAG_TRY         reduce using rule 175 (stmt -> simple_stmt .)
    TAG_DEF         reduce using rule 175 (stmt -> simple_stmt .)
    TAG_CLASS       reduce using rule 175 (stmt -> simple_stmt .)
    TAG_DEL         reduce using rule 175 (stmt -> simple_stmt .)
    TAG_PASS        reduce using rule 175 (stmt -> simple_stmt .)
    TAG_GLOBAL      reduce using rule 175 (stmt -> simple_stmt .)
    TAG_EXEC        reduce using rule 175 (stmt -> simple_stmt .)
    TAG_ASSERT      reduce using rule 175 (stmt -> simple_stmt .)
    TAG_DRAW        reduce using rule 175 (stmt -> simple_stmt .)
    TAG_BREAK       reduce using rule 175 (stmt -> simple_stmt .)
    TAG_CONTINUE    reduce using rule 175 (stmt -> simple_stmt .)
    TAG_RETURN      reduce using rule 175 (stmt -> simple_stmt .)
    TAG_RAISE       reduce using rule 175 (stmt -> simple_stmt .)
    TAG_IMPORT      reduce using rule 175 (stmt -> simple_stmt .)
    TAG_FROM        reduce using rule 175 (stmt -> simple_stmt .)
    @               reduce using rule 175 (stmt -> simple_stmt .)
    TAG_YIELD       reduce using rule 175 (stmt -> simple_stmt .)
    TAG_LAMBDA      reduce using rule 175 (stmt -> simple_stmt .)
    TAG_NOT         reduce using rule 175 (stmt -> simple_stmt .)
    +               reduce using rule 175 (stmt -> simple_stmt .)
    -               reduce using rule 175 (stmt -> simple_stmt .)
    ~               reduce using rule 175 (stmt -> simple_stmt .)
    (               reduce using rule 175 (stmt -> simple_stmt .)
    [               reduce using rule 175 (stmt -> simple_stmt .)
    {               reduce using rule 175 (stmt -> simple_stmt .)
    `               reduce using rule 175 (stmt -> simple_stmt .)
    NAME            reduce using rule 175 (stmt -> simple_stmt .)
    NUMBER          reduce using rule 175 (stmt -> simple_stmt .)
    STRING          reduce using rule 175 (stmt -> simple_stmt .)
    DEDENT          reduce using rule 175 (stmt -> simple_stmt .)
    ;               shift and go to state 111


state 18

    (218) expr_stmt -> testlist . augassign yield_expr
    (219) expr_stmt -> testlist . augassign testlist
    (220) expr_stmt -> testlist . expr_stmt_bottom
    (221) expr_stmt -> testlist .
    (222) augassign -> . ADD_ASN
    (223) augassign -> . SUB_ASN
    (224) augassign -> . MUL_ASN
    (225) augassign -> . DIV_ASN
    (226) augassign -> . MOD_ASN
    (227) augassign -> . AND_ASN
    (228) augassign -> . OR_ASN
    (229) augassign -> . XOR_ASN
    (230) augassign -> . LSHIFT_ASN
    (231) augassign -> . RSHIFT_ASN
    (232) augassign -> . POW_ASN
    (233) augassign -> . FDIV_ASN
    (234) expr_stmt_bottom -> . = yield_expr
    (235) expr_stmt_bottom -> . = testlist
    (236) expr_stmt_bottom -> . expr_stmt_bottom = yield_expr
    (237) expr_stmt_bottom -> . expr_stmt_bottom = testlist

    NEWLINE         reduce using rule 221 (expr_stmt -> testlist .)
    ;               reduce using rule 221 (expr_stmt -> testlist .)
    ADD_ASN         shift and go to state 125
    SUB_ASN         shift and go to state 116
    MUL_ASN         shift and go to state 114
    DIV_ASN         shift and go to state 126
    MOD_ASN         shift and go to state 119
    AND_ASN         shift and go to state 115
    OR_ASN          shift and go to state 123
    XOR_ASN         shift and go to state 113
    LSHIFT_ASN      shift and go to state 112
    RSHIFT_ASN      shift and go to state 120
    POW_ASN         shift and go to state 121
    FDIV_ASN        shift and go to state 124
    =               shift and go to state 122

    expr_stmt_bottom               shift and go to state 118
    augassign                      shift and go to state 117

state 19

    (182) compound_stmt -> classdef .

    ENDMARKER       reduce using rule 182 (compound_stmt -> classdef .)
    NEWLINE         reduce using rule 182 (compound_stmt -> classdef .)
    TAG_IF          reduce using rule 182 (compound_stmt -> classdef .)
    TAG_WHILE       reduce using rule 182 (compound_stmt -> classdef .)
    TAG_FOR         reduce using rule 182 (compound_stmt -> classdef .)
    TAG_TRY         reduce using rule 182 (compound_stmt -> classdef .)
    TAG_DEF         reduce using rule 182 (compound_stmt -> classdef .)
    TAG_CLASS       reduce using rule 182 (compound_stmt -> classdef .)
    TAG_DEL         reduce using rule 182 (compound_stmt -> classdef .)
    TAG_PASS        reduce using rule 182 (compound_stmt -> classdef .)
    TAG_GLOBAL      reduce using rule 182 (compound_stmt -> classdef .)
    TAG_EXEC        reduce using rule 182 (compound_stmt -> classdef .)
    TAG_ASSERT      reduce using rule 182 (compound_stmt -> classdef .)
    TAG_DRAW        reduce using rule 182 (compound_stmt -> classdef .)
    TAG_BREAK       reduce using rule 182 (compound_stmt -> classdef .)
    TAG_CONTINUE    reduce using rule 182 (compound_stmt -> classdef .)
    TAG_RETURN      reduce using rule 182 (compound_stmt -> classdef .)
    TAG_RAISE       reduce using rule 182 (compound_stmt -> classdef .)
    TAG_IMPORT      reduce using rule 182 (compound_stmt -> classdef .)
    TAG_FROM        reduce using rule 182 (compound_stmt -> classdef .)
    @               reduce using rule 182 (compound_stmt -> classdef .)
    TAG_YIELD       reduce using rule 182 (compound_stmt -> classdef .)
    TAG_LAMBDA      reduce using rule 182 (compound_stmt -> classdef .)
    TAG_NOT         reduce using rule 182 (compound_stmt -> classdef .)
    +               reduce using rule 182 (compound_stmt -> classdef .)
    -               reduce using rule 182 (compound_stmt -> classdef .)
    ~               reduce using rule 182 (compound_stmt -> classdef .)
    (               reduce using rule 182 (compound_stmt -> classdef .)
    [               reduce using rule 182 (compound_stmt -> classdef .)
    {               reduce using rule 182 (compound_stmt -> classdef .)
    `               reduce using rule 182 (compound_stmt -> classdef .)
    NAME            reduce using rule 182 (compound_stmt -> classdef .)
    NUMBER          reduce using rule 182 (compound_stmt -> classdef .)
    STRING          reduce using rule 182 (compound_stmt -> classdef .)
    DEDENT          reduce using rule 182 (compound_stmt -> classdef .)


state 20

    (216) small_stmt -> assert_stmt .

    NEWLINE         reduce using rule 216 (small_stmt -> assert_stmt .)
    ;               reduce using rule 216 (small_stmt -> assert_stmt .)


state 21

    (179) compound_stmt -> for_stmt .

    ENDMARKER       reduce using rule 179 (compound_stmt -> for_stmt .)
    NEWLINE         reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_IF          reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_WHILE       reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_FOR         reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_TRY         reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_DEF         reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_CLASS       reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_DEL         reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_PASS        reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_GLOBAL      reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_EXEC        reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_ASSERT      reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_DRAW        reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_BREAK       reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_CONTINUE    reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_RETURN      reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_RAISE       reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_IMPORT      reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_FROM        reduce using rule 179 (compound_stmt -> for_stmt .)
    @               reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_YIELD       reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_LAMBDA      reduce using rule 179 (compound_stmt -> for_stmt .)
    TAG_NOT         reduce using rule 179 (compound_stmt -> for_stmt .)
    +               reduce using rule 179 (compound_stmt -> for_stmt .)
    -               reduce using rule 179 (compound_stmt -> for_stmt .)
    ~               reduce using rule 179 (compound_stmt -> for_stmt .)
    (               reduce using rule 179 (compound_stmt -> for_stmt .)
    [               reduce using rule 179 (compound_stmt -> for_stmt .)
    {               reduce using rule 179 (compound_stmt -> for_stmt .)
    `               reduce using rule 179 (compound_stmt -> for_stmt .)
    NAME            reduce using rule 179 (compound_stmt -> for_stmt .)
    NUMBER          reduce using rule 179 (compound_stmt -> for_stmt .)
    STRING          reduce using rule 179 (compound_stmt -> for_stmt .)
    DEDENT          reduce using rule 179 (compound_stmt -> for_stmt .)


state 22

    (120) test -> lambdef .

    ,               reduce using rule 120 (test -> lambdef .)
    INDENT          reduce using rule 120 (test -> lambdef .)
    TAG_DEL         reduce using rule 120 (test -> lambdef .)
    TAG_PASS        reduce using rule 120 (test -> lambdef .)
    TAG_GLOBAL      reduce using rule 120 (test -> lambdef .)
    TAG_EXEC        reduce using rule 120 (test -> lambdef .)
    TAG_ASSERT      reduce using rule 120 (test -> lambdef .)
    TAG_DRAW        reduce using rule 120 (test -> lambdef .)
    TAG_BREAK       reduce using rule 120 (test -> lambdef .)
    TAG_CONTINUE    reduce using rule 120 (test -> lambdef .)
    TAG_RETURN      reduce using rule 120 (test -> lambdef .)
    TAG_RAISE       reduce using rule 120 (test -> lambdef .)
    TAG_IMPORT      reduce using rule 120 (test -> lambdef .)
    TAG_FROM        reduce using rule 120 (test -> lambdef .)
    TAG_YIELD       reduce using rule 120 (test -> lambdef .)
    TAG_LAMBDA      reduce using rule 120 (test -> lambdef .)
    TAG_NOT         reduce using rule 120 (test -> lambdef .)
    +               reduce using rule 120 (test -> lambdef .)
    -               reduce using rule 120 (test -> lambdef .)
    ~               reduce using rule 120 (test -> lambdef .)
    (               reduce using rule 120 (test -> lambdef .)
    [               reduce using rule 120 (test -> lambdef .)
    {               reduce using rule 120 (test -> lambdef .)
    `               reduce using rule 120 (test -> lambdef .)
    NAME            reduce using rule 120 (test -> lambdef .)
    NUMBER          reduce using rule 120 (test -> lambdef .)
    STRING          reduce using rule 120 (test -> lambdef .)
    ADD_ASN         reduce using rule 120 (test -> lambdef .)
    SUB_ASN         reduce using rule 120 (test -> lambdef .)
    MUL_ASN         reduce using rule 120 (test -> lambdef .)
    DIV_ASN         reduce using rule 120 (test -> lambdef .)
    MOD_ASN         reduce using rule 120 (test -> lambdef .)
    AND_ASN         reduce using rule 120 (test -> lambdef .)
    OR_ASN          reduce using rule 120 (test -> lambdef .)
    XOR_ASN         reduce using rule 120 (test -> lambdef .)
    LSHIFT_ASN      reduce using rule 120 (test -> lambdef .)
    RSHIFT_ASN      reduce using rule 120 (test -> lambdef .)
    POW_ASN         reduce using rule 120 (test -> lambdef .)
    FDIV_ASN        reduce using rule 120 (test -> lambdef .)
    =               reduce using rule 120 (test -> lambdef .)
    NEWLINE         reduce using rule 120 (test -> lambdef .)
    ;               reduce using rule 120 (test -> lambdef .)
    :               reduce using rule 120 (test -> lambdef .)
    ]               reduce using rule 120 (test -> lambdef .)
    )               reduce using rule 120 (test -> lambdef .)
    TAG_FOR         reduce using rule 120 (test -> lambdef .)
    }               reduce using rule 120 (test -> lambdef .)
    TAG_AS          reduce using rule 120 (test -> lambdef .)


state 23

    (209) small_stmt -> expr_stmt .

    NEWLINE         reduce using rule 209 (small_stmt -> expr_stmt .)
    ;               reduce using rule 209 (small_stmt -> expr_stmt .)


state 24

    (10) decorators -> decorator .

    TAG_CLASS       reduce using rule 10 (decorators -> decorator .)
    TAG_DEF         reduce using rule 10 (decorators -> decorator .)
    @               reduce using rule 10 (decorators -> decorator .)


state 25

    (80) atom -> ` . testlist1 `
    (86) testlist1 -> . test
    (87) testlist1 -> . testlist1 , test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 127
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    testlist1                      shift and go to state 128
    strings                        shift and go to state 82

state 26

    (28) arith_expr -> term .
    (31) term -> term . * factor
    (32) term -> term . / factor
    (33) term -> term . % factor
    (34) term -> term . OP_EXACT_DIVISION factor

    +               reduce using rule 28 (arith_expr -> term .)
    -               reduce using rule 28 (arith_expr -> term .)
    OP_LEFT_SHIFT   reduce using rule 28 (arith_expr -> term .)
    OP_RIGHT_SHIFT  reduce using rule 28 (arith_expr -> term .)
    &               reduce using rule 28 (arith_expr -> term .)
    ^               reduce using rule 28 (arith_expr -> term .)
    |               reduce using rule 28 (arith_expr -> term .)
    >               reduce using rule 28 (arith_expr -> term .)
    <               reduce using rule 28 (arith_expr -> term .)
    OP_EQ           reduce using rule 28 (arith_expr -> term .)
    OP_GE           reduce using rule 28 (arith_expr -> term .)
    OP_LE           reduce using rule 28 (arith_expr -> term .)
    OP_NE           reduce using rule 28 (arith_expr -> term .)
    OP_NNE          reduce using rule 28 (arith_expr -> term .)
    TAG_IN          reduce using rule 28 (arith_expr -> term .)
    TAG_NOT         reduce using rule 28 (arith_expr -> term .)
    TAG_IS          reduce using rule 28 (arith_expr -> term .)
    TAG_AND         reduce using rule 28 (arith_expr -> term .)
    TAG_IF          reduce using rule 28 (arith_expr -> term .)
    TAG_OR          reduce using rule 28 (arith_expr -> term .)
    ,               reduce using rule 28 (arith_expr -> term .)
    ADD_ASN         reduce using rule 28 (arith_expr -> term .)
    SUB_ASN         reduce using rule 28 (arith_expr -> term .)
    MUL_ASN         reduce using rule 28 (arith_expr -> term .)
    DIV_ASN         reduce using rule 28 (arith_expr -> term .)
    MOD_ASN         reduce using rule 28 (arith_expr -> term .)
    AND_ASN         reduce using rule 28 (arith_expr -> term .)
    OR_ASN          reduce using rule 28 (arith_expr -> term .)
    XOR_ASN         reduce using rule 28 (arith_expr -> term .)
    LSHIFT_ASN      reduce using rule 28 (arith_expr -> term .)
    RSHIFT_ASN      reduce using rule 28 (arith_expr -> term .)
    POW_ASN         reduce using rule 28 (arith_expr -> term .)
    FDIV_ASN        reduce using rule 28 (arith_expr -> term .)
    =               reduce using rule 28 (arith_expr -> term .)
    NEWLINE         reduce using rule 28 (arith_expr -> term .)
    ;               reduce using rule 28 (arith_expr -> term .)
    TAG_FOR         reduce using rule 28 (arith_expr -> term .)
    ]               reduce using rule 28 (arith_expr -> term .)
    )               reduce using rule 28 (arith_expr -> term .)
    INDENT          reduce using rule 28 (arith_expr -> term .)
    TAG_DEL         reduce using rule 28 (arith_expr -> term .)
    TAG_PASS        reduce using rule 28 (arith_expr -> term .)
    TAG_GLOBAL      reduce using rule 28 (arith_expr -> term .)
    TAG_EXEC        reduce using rule 28 (arith_expr -> term .)
    TAG_ASSERT      reduce using rule 28 (arith_expr -> term .)
    TAG_DRAW        reduce using rule 28 (arith_expr -> term .)
    TAG_BREAK       reduce using rule 28 (arith_expr -> term .)
    TAG_CONTINUE    reduce using rule 28 (arith_expr -> term .)
    TAG_RETURN      reduce using rule 28 (arith_expr -> term .)
    TAG_RAISE       reduce using rule 28 (arith_expr -> term .)
    TAG_IMPORT      reduce using rule 28 (arith_expr -> term .)
    TAG_FROM        reduce using rule 28 (arith_expr -> term .)
    TAG_YIELD       reduce using rule 28 (arith_expr -> term .)
    TAG_LAMBDA      reduce using rule 28 (arith_expr -> term .)
    ~               reduce using rule 28 (arith_expr -> term .)
    (               reduce using rule 28 (arith_expr -> term .)
    [               reduce using rule 28 (arith_expr -> term .)
    {               reduce using rule 28 (arith_expr -> term .)
    `               reduce using rule 28 (arith_expr -> term .)
    NAME            reduce using rule 28 (arith_expr -> term .)
    NUMBER          reduce using rule 28 (arith_expr -> term .)
    STRING          reduce using rule 28 (arith_expr -> term .)
    }               reduce using rule 28 (arith_expr -> term .)
    :               reduce using rule 28 (arith_expr -> term .)
    TAG_AS          reduce using rule 28 (arith_expr -> term .)
    TAG_ELSE        reduce using rule 28 (arith_expr -> term .)
    *               shift and go to state 130
    /               shift and go to state 131
    %               shift and go to state 129
    OP_EXACT_DIVISION shift and go to state 132


state 27

    (177) compound_stmt -> if_stmt .

    ENDMARKER       reduce using rule 177 (compound_stmt -> if_stmt .)
    NEWLINE         reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_IF          reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_WHILE       reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_FOR         reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_TRY         reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_DEF         reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_CLASS       reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_DEL         reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_PASS        reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_GLOBAL      reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_EXEC        reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_ASSERT      reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_DRAW        reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_BREAK       reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_CONTINUE    reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_RETURN      reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_RAISE       reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_IMPORT      reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_FROM        reduce using rule 177 (compound_stmt -> if_stmt .)
    @               reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_YIELD       reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_LAMBDA      reduce using rule 177 (compound_stmt -> if_stmt .)
    TAG_NOT         reduce using rule 177 (compound_stmt -> if_stmt .)
    +               reduce using rule 177 (compound_stmt -> if_stmt .)
    -               reduce using rule 177 (compound_stmt -> if_stmt .)
    ~               reduce using rule 177 (compound_stmt -> if_stmt .)
    (               reduce using rule 177 (compound_stmt -> if_stmt .)
    [               reduce using rule 177 (compound_stmt -> if_stmt .)
    {               reduce using rule 177 (compound_stmt -> if_stmt .)
    `               reduce using rule 177 (compound_stmt -> if_stmt .)
    NAME            reduce using rule 177 (compound_stmt -> if_stmt .)
    NUMBER          reduce using rule 177 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 177 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 177 (compound_stmt -> if_stmt .)


state 28

    (184) if_stmt -> TAG_IF . test suite
    (185) if_stmt -> TAG_IF . test suite TAG_ELSE suite
    (186) if_stmt -> TAG_IF . test suite elif_list
    (187) if_stmt -> TAG_IF . test suite elif_list TAG_ELSE suite
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 133
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 29

    (118) test -> or_test .
    (119) test -> or_test . TAG_IF or_test TAG_ELSE test
    (122) or_test -> or_test . TAG_OR and_test

    ,               reduce using rule 118 (test -> or_test .)
    INDENT          reduce using rule 118 (test -> or_test .)
    TAG_DEL         reduce using rule 118 (test -> or_test .)
    TAG_PASS        reduce using rule 118 (test -> or_test .)
    TAG_GLOBAL      reduce using rule 118 (test -> or_test .)
    TAG_EXEC        reduce using rule 118 (test -> or_test .)
    TAG_ASSERT      reduce using rule 118 (test -> or_test .)
    TAG_DRAW        reduce using rule 118 (test -> or_test .)
    TAG_BREAK       reduce using rule 118 (test -> or_test .)
    TAG_CONTINUE    reduce using rule 118 (test -> or_test .)
    TAG_RETURN      reduce using rule 118 (test -> or_test .)
    TAG_RAISE       reduce using rule 118 (test -> or_test .)
    TAG_IMPORT      reduce using rule 118 (test -> or_test .)
    TAG_FROM        reduce using rule 118 (test -> or_test .)
    TAG_YIELD       reduce using rule 118 (test -> or_test .)
    TAG_LAMBDA      reduce using rule 118 (test -> or_test .)
    TAG_NOT         reduce using rule 118 (test -> or_test .)
    +               reduce using rule 118 (test -> or_test .)
    -               reduce using rule 118 (test -> or_test .)
    ~               reduce using rule 118 (test -> or_test .)
    (               reduce using rule 118 (test -> or_test .)
    [               reduce using rule 118 (test -> or_test .)
    {               reduce using rule 118 (test -> or_test .)
    `               reduce using rule 118 (test -> or_test .)
    NAME            reduce using rule 118 (test -> or_test .)
    NUMBER          reduce using rule 118 (test -> or_test .)
    STRING          reduce using rule 118 (test -> or_test .)
    ADD_ASN         reduce using rule 118 (test -> or_test .)
    SUB_ASN         reduce using rule 118 (test -> or_test .)
    MUL_ASN         reduce using rule 118 (test -> or_test .)
    DIV_ASN         reduce using rule 118 (test -> or_test .)
    MOD_ASN         reduce using rule 118 (test -> or_test .)
    AND_ASN         reduce using rule 118 (test -> or_test .)
    OR_ASN          reduce using rule 118 (test -> or_test .)
    XOR_ASN         reduce using rule 118 (test -> or_test .)
    LSHIFT_ASN      reduce using rule 118 (test -> or_test .)
    RSHIFT_ASN      reduce using rule 118 (test -> or_test .)
    POW_ASN         reduce using rule 118 (test -> or_test .)
    FDIV_ASN        reduce using rule 118 (test -> or_test .)
    =               reduce using rule 118 (test -> or_test .)
    NEWLINE         reduce using rule 118 (test -> or_test .)
    ;               reduce using rule 118 (test -> or_test .)
    :               reduce using rule 118 (test -> or_test .)
    ]               reduce using rule 118 (test -> or_test .)
    )               reduce using rule 118 (test -> or_test .)
    TAG_FOR         reduce using rule 118 (test -> or_test .)
    }               reduce using rule 118 (test -> or_test .)
    TAG_AS          reduce using rule 118 (test -> or_test .)
    TAG_IF          shift and go to state 134
    TAG_OR          shift and go to state 135


state 30

    (192) try_stmt -> TAG_TRY . : suite TAG_FINALLY : suite
    (193) try_stmt -> TAG_TRY . : suite except_clauses
    (194) try_stmt -> TAG_TRY . : suite except_clauses TAG_ELSE : suite
    (195) try_stmt -> TAG_TRY . : suite except_clauses TAG_FINALLY : suite
    (196) try_stmt -> TAG_TRY . : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite

    :               shift and go to state 136


state 31

    (127) comparison -> expr .
    (20) expr -> expr . | xor_expr

    >               reduce using rule 127 (comparison -> expr .)
    <               reduce using rule 127 (comparison -> expr .)
    OP_EQ           reduce using rule 127 (comparison -> expr .)
    OP_GE           reduce using rule 127 (comparison -> expr .)
    OP_LE           reduce using rule 127 (comparison -> expr .)
    OP_NE           reduce using rule 127 (comparison -> expr .)
    OP_NNE          reduce using rule 127 (comparison -> expr .)
    TAG_IN          reduce using rule 127 (comparison -> expr .)
    TAG_NOT         reduce using rule 127 (comparison -> expr .)
    TAG_IS          reduce using rule 127 (comparison -> expr .)
    TAG_AND         reduce using rule 127 (comparison -> expr .)
    TAG_IF          reduce using rule 127 (comparison -> expr .)
    TAG_OR          reduce using rule 127 (comparison -> expr .)
    ,               reduce using rule 127 (comparison -> expr .)
    =               reduce using rule 127 (comparison -> expr .)
    NEWLINE         reduce using rule 127 (comparison -> expr .)
    ;               reduce using rule 127 (comparison -> expr .)
    TAG_FOR         reduce using rule 127 (comparison -> expr .)
    )               reduce using rule 127 (comparison -> expr .)
    }               reduce using rule 127 (comparison -> expr .)
    :               reduce using rule 127 (comparison -> expr .)
    ADD_ASN         reduce using rule 127 (comparison -> expr .)
    SUB_ASN         reduce using rule 127 (comparison -> expr .)
    MUL_ASN         reduce using rule 127 (comparison -> expr .)
    DIV_ASN         reduce using rule 127 (comparison -> expr .)
    MOD_ASN         reduce using rule 127 (comparison -> expr .)
    AND_ASN         reduce using rule 127 (comparison -> expr .)
    OR_ASN          reduce using rule 127 (comparison -> expr .)
    XOR_ASN         reduce using rule 127 (comparison -> expr .)
    LSHIFT_ASN      reduce using rule 127 (comparison -> expr .)
    RSHIFT_ASN      reduce using rule 127 (comparison -> expr .)
    POW_ASN         reduce using rule 127 (comparison -> expr .)
    FDIV_ASN        reduce using rule 127 (comparison -> expr .)
    `               reduce using rule 127 (comparison -> expr .)
    INDENT          reduce using rule 127 (comparison -> expr .)
    TAG_DEL         reduce using rule 127 (comparison -> expr .)
    TAG_PASS        reduce using rule 127 (comparison -> expr .)
    TAG_GLOBAL      reduce using rule 127 (comparison -> expr .)
    TAG_EXEC        reduce using rule 127 (comparison -> expr .)
    TAG_ASSERT      reduce using rule 127 (comparison -> expr .)
    TAG_DRAW        reduce using rule 127 (comparison -> expr .)
    TAG_BREAK       reduce using rule 127 (comparison -> expr .)
    TAG_CONTINUE    reduce using rule 127 (comparison -> expr .)
    TAG_RETURN      reduce using rule 127 (comparison -> expr .)
    TAG_RAISE       reduce using rule 127 (comparison -> expr .)
    TAG_IMPORT      reduce using rule 127 (comparison -> expr .)
    TAG_FROM        reduce using rule 127 (comparison -> expr .)
    TAG_YIELD       reduce using rule 127 (comparison -> expr .)
    TAG_LAMBDA      reduce using rule 127 (comparison -> expr .)
    +               reduce using rule 127 (comparison -> expr .)
    -               reduce using rule 127 (comparison -> expr .)
    ~               reduce using rule 127 (comparison -> expr .)
    (               reduce using rule 127 (comparison -> expr .)
    [               reduce using rule 127 (comparison -> expr .)
    {               reduce using rule 127 (comparison -> expr .)
    NAME            reduce using rule 127 (comparison -> expr .)
    NUMBER          reduce using rule 127 (comparison -> expr .)
    STRING          reduce using rule 127 (comparison -> expr .)
    ]               reduce using rule 127 (comparison -> expr .)
    TAG_AS          reduce using rule 127 (comparison -> expr .)
    TAG_ELSE        reduce using rule 127 (comparison -> expr .)
    |               shift and go to state 137


state 32

    (241) pass_stmt -> TAG_PASS .

    NEWLINE         reduce using rule 241 (pass_stmt -> TAG_PASS .)
    ;               reduce using rule 241 (pass_stmt -> TAG_PASS .)


state 33

    (85) strings -> STRING .

    STRING          reduce using rule 85 (strings -> STRING .)
    OP_POWER        reduce using rule 85 (strings -> STRING .)
    (               reduce using rule 85 (strings -> STRING .)
    [               reduce using rule 85 (strings -> STRING .)
    .               reduce using rule 85 (strings -> STRING .)
    *               reduce using rule 85 (strings -> STRING .)
    /               reduce using rule 85 (strings -> STRING .)
    %               reduce using rule 85 (strings -> STRING .)
    OP_EXACT_DIVISION reduce using rule 85 (strings -> STRING .)
    +               reduce using rule 85 (strings -> STRING .)
    -               reduce using rule 85 (strings -> STRING .)
    OP_LEFT_SHIFT   reduce using rule 85 (strings -> STRING .)
    OP_RIGHT_SHIFT  reduce using rule 85 (strings -> STRING .)
    &               reduce using rule 85 (strings -> STRING .)
    ^               reduce using rule 85 (strings -> STRING .)
    |               reduce using rule 85 (strings -> STRING .)
    >               reduce using rule 85 (strings -> STRING .)
    <               reduce using rule 85 (strings -> STRING .)
    OP_EQ           reduce using rule 85 (strings -> STRING .)
    OP_GE           reduce using rule 85 (strings -> STRING .)
    OP_LE           reduce using rule 85 (strings -> STRING .)
    OP_NE           reduce using rule 85 (strings -> STRING .)
    OP_NNE          reduce using rule 85 (strings -> STRING .)
    TAG_IN          reduce using rule 85 (strings -> STRING .)
    TAG_NOT         reduce using rule 85 (strings -> STRING .)
    TAG_IS          reduce using rule 85 (strings -> STRING .)
    TAG_AND         reduce using rule 85 (strings -> STRING .)
    TAG_IF          reduce using rule 85 (strings -> STRING .)
    TAG_OR          reduce using rule 85 (strings -> STRING .)
    ,               reduce using rule 85 (strings -> STRING .)
    ADD_ASN         reduce using rule 85 (strings -> STRING .)
    SUB_ASN         reduce using rule 85 (strings -> STRING .)
    MUL_ASN         reduce using rule 85 (strings -> STRING .)
    DIV_ASN         reduce using rule 85 (strings -> STRING .)
    MOD_ASN         reduce using rule 85 (strings -> STRING .)
    AND_ASN         reduce using rule 85 (strings -> STRING .)
    OR_ASN          reduce using rule 85 (strings -> STRING .)
    XOR_ASN         reduce using rule 85 (strings -> STRING .)
    LSHIFT_ASN      reduce using rule 85 (strings -> STRING .)
    RSHIFT_ASN      reduce using rule 85 (strings -> STRING .)
    POW_ASN         reduce using rule 85 (strings -> STRING .)
    FDIV_ASN        reduce using rule 85 (strings -> STRING .)
    =               reduce using rule 85 (strings -> STRING .)
    NEWLINE         reduce using rule 85 (strings -> STRING .)
    ;               reduce using rule 85 (strings -> STRING .)
    INDENT          reduce using rule 85 (strings -> STRING .)
    TAG_DEL         reduce using rule 85 (strings -> STRING .)
    TAG_PASS        reduce using rule 85 (strings -> STRING .)
    TAG_GLOBAL      reduce using rule 85 (strings -> STRING .)
    TAG_EXEC        reduce using rule 85 (strings -> STRING .)
    TAG_ASSERT      reduce using rule 85 (strings -> STRING .)
    TAG_DRAW        reduce using rule 85 (strings -> STRING .)
    TAG_BREAK       reduce using rule 85 (strings -> STRING .)
    TAG_CONTINUE    reduce using rule 85 (strings -> STRING .)
    TAG_RETURN      reduce using rule 85 (strings -> STRING .)
    TAG_RAISE       reduce using rule 85 (strings -> STRING .)
    TAG_IMPORT      reduce using rule 85 (strings -> STRING .)
    TAG_FROM        reduce using rule 85 (strings -> STRING .)
    TAG_YIELD       reduce using rule 85 (strings -> STRING .)
    TAG_LAMBDA      reduce using rule 85 (strings -> STRING .)
    ~               reduce using rule 85 (strings -> STRING .)
    {               reduce using rule 85 (strings -> STRING .)
    `               reduce using rule 85 (strings -> STRING .)
    NAME            reduce using rule 85 (strings -> STRING .)
    NUMBER          reduce using rule 85 (strings -> STRING .)
    TAG_FOR         reduce using rule 85 (strings -> STRING .)
    ]               reduce using rule 85 (strings -> STRING .)
    }               reduce using rule 85 (strings -> STRING .)
    :               reduce using rule 85 (strings -> STRING .)
    )               reduce using rule 85 (strings -> STRING .)
    TAG_AS          reduce using rule 85 (strings -> STRING .)
    TAG_ELSE        reduce using rule 85 (strings -> STRING .)


state 34

    (212) small_stmt -> flow_stmt .

    NEWLINE         reduce using rule 212 (small_stmt -> flow_stmt .)
    ;               reduce using rule 212 (small_stmt -> flow_stmt .)


state 35

    (114) testlist -> testlist_anns .
    (115) testlist -> testlist_anns . ,
    (116) testlist_anns -> testlist_anns . , test

    NEWLINE         reduce using rule 114 (testlist -> testlist_anns .)
    ;               reduce using rule 114 (testlist -> testlist_anns .)
    ADD_ASN         reduce using rule 114 (testlist -> testlist_anns .)
    SUB_ASN         reduce using rule 114 (testlist -> testlist_anns .)
    MUL_ASN         reduce using rule 114 (testlist -> testlist_anns .)
    DIV_ASN         reduce using rule 114 (testlist -> testlist_anns .)
    MOD_ASN         reduce using rule 114 (testlist -> testlist_anns .)
    AND_ASN         reduce using rule 114 (testlist -> testlist_anns .)
    OR_ASN          reduce using rule 114 (testlist -> testlist_anns .)
    XOR_ASN         reduce using rule 114 (testlist -> testlist_anns .)
    LSHIFT_ASN      reduce using rule 114 (testlist -> testlist_anns .)
    RSHIFT_ASN      reduce using rule 114 (testlist -> testlist_anns .)
    POW_ASN         reduce using rule 114 (testlist -> testlist_anns .)
    FDIV_ASN        reduce using rule 114 (testlist -> testlist_anns .)
    =               reduce using rule 114 (testlist -> testlist_anns .)
    )               reduce using rule 114 (testlist -> testlist_anns .)
    ]               reduce using rule 114 (testlist -> testlist_anns .)
    INDENT          reduce using rule 114 (testlist -> testlist_anns .)
    TAG_DEL         reduce using rule 114 (testlist -> testlist_anns .)
    TAG_PASS        reduce using rule 114 (testlist -> testlist_anns .)
    TAG_GLOBAL      reduce using rule 114 (testlist -> testlist_anns .)
    TAG_EXEC        reduce using rule 114 (testlist -> testlist_anns .)
    TAG_ASSERT      reduce using rule 114 (testlist -> testlist_anns .)
    TAG_DRAW        reduce using rule 114 (testlist -> testlist_anns .)
    TAG_BREAK       reduce using rule 114 (testlist -> testlist_anns .)
    TAG_CONTINUE    reduce using rule 114 (testlist -> testlist_anns .)
    TAG_RETURN      reduce using rule 114 (testlist -> testlist_anns .)
    TAG_RAISE       reduce using rule 114 (testlist -> testlist_anns .)
    TAG_IMPORT      reduce using rule 114 (testlist -> testlist_anns .)
    TAG_FROM        reduce using rule 114 (testlist -> testlist_anns .)
    TAG_YIELD       reduce using rule 114 (testlist -> testlist_anns .)
    TAG_LAMBDA      reduce using rule 114 (testlist -> testlist_anns .)
    TAG_NOT         reduce using rule 114 (testlist -> testlist_anns .)
    +               reduce using rule 114 (testlist -> testlist_anns .)
    -               reduce using rule 114 (testlist -> testlist_anns .)
    ~               reduce using rule 114 (testlist -> testlist_anns .)
    (               reduce using rule 114 (testlist -> testlist_anns .)
    [               reduce using rule 114 (testlist -> testlist_anns .)
    {               reduce using rule 114 (testlist -> testlist_anns .)
    `               reduce using rule 114 (testlist -> testlist_anns .)
    NAME            reduce using rule 114 (testlist -> testlist_anns .)
    NUMBER          reduce using rule 114 (testlist -> testlist_anns .)
    STRING          reduce using rule 114 (testlist -> testlist_anns .)
    ,               shift and go to state 138


state 36

    (215) small_stmt -> exec_stmt .

    NEWLINE         reduce using rule 215 (small_stmt -> exec_stmt .)
    ;               reduce using rule 215 (small_stmt -> exec_stmt .)


state 37

    (188) while_stmt -> TAG_WHILE . test suite
    (189) while_stmt -> TAG_WHILE . test suite TAG_ELSE suite
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 139
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 38

    (12) decorated -> decorators . classdef
    (13) decorated -> decorators . funcdef
    (11) decorators -> decorators . decorator
    (14) classdef -> . TAG_CLASS NAME : suite
    (15) classdef -> . TAG_CLASS NAME ( testlist ) : suite
    (16) classdef -> . TAG_CLASS NAME ( ) : suite
    (160) funcdef -> . TAG_DEF NAME parameters suite
    (7) decorator -> . @ dotted_name NEWLINE
    (8) decorator -> . @ dotted_name ( ) NEWLINE
    (9) decorator -> . @ dotted_name ( arglist ) NEWLINE

    TAG_CLASS       shift and go to state 58
    TAG_DEF         shift and go to state 62
    @               shift and go to state 16

    classdef                       shift and go to state 140
    funcdef                        shift and go to state 141
    decorator                      shift and go to state 142

state 39

    (176) stmt -> compound_stmt .

    ENDMARKER       reduce using rule 176 (stmt -> compound_stmt .)
    NEWLINE         reduce using rule 176 (stmt -> compound_stmt .)
    TAG_IF          reduce using rule 176 (stmt -> compound_stmt .)
    TAG_WHILE       reduce using rule 176 (stmt -> compound_stmt .)
    TAG_FOR         reduce using rule 176 (stmt -> compound_stmt .)
    TAG_TRY         reduce using rule 176 (stmt -> compound_stmt .)
    TAG_DEF         reduce using rule 176 (stmt -> compound_stmt .)
    TAG_CLASS       reduce using rule 176 (stmt -> compound_stmt .)
    TAG_DEL         reduce using rule 176 (stmt -> compound_stmt .)
    TAG_PASS        reduce using rule 176 (stmt -> compound_stmt .)
    TAG_GLOBAL      reduce using rule 176 (stmt -> compound_stmt .)
    TAG_EXEC        reduce using rule 176 (stmt -> compound_stmt .)
    TAG_ASSERT      reduce using rule 176 (stmt -> compound_stmt .)
    TAG_DRAW        reduce using rule 176 (stmt -> compound_stmt .)
    TAG_BREAK       reduce using rule 176 (stmt -> compound_stmt .)
    TAG_CONTINUE    reduce using rule 176 (stmt -> compound_stmt .)
    TAG_RETURN      reduce using rule 176 (stmt -> compound_stmt .)
    TAG_RAISE       reduce using rule 176 (stmt -> compound_stmt .)
    TAG_IMPORT      reduce using rule 176 (stmt -> compound_stmt .)
    TAG_FROM        reduce using rule 176 (stmt -> compound_stmt .)
    @               reduce using rule 176 (stmt -> compound_stmt .)
    TAG_YIELD       reduce using rule 176 (stmt -> compound_stmt .)
    TAG_LAMBDA      reduce using rule 176 (stmt -> compound_stmt .)
    TAG_NOT         reduce using rule 176 (stmt -> compound_stmt .)
    +               reduce using rule 176 (stmt -> compound_stmt .)
    -               reduce using rule 176 (stmt -> compound_stmt .)
    ~               reduce using rule 176 (stmt -> compound_stmt .)
    (               reduce using rule 176 (stmt -> compound_stmt .)
    [               reduce using rule 176 (stmt -> compound_stmt .)
    {               reduce using rule 176 (stmt -> compound_stmt .)
    `               reduce using rule 176 (stmt -> compound_stmt .)
    NAME            reduce using rule 176 (stmt -> compound_stmt .)
    NUMBER          reduce using rule 176 (stmt -> compound_stmt .)
    STRING          reduce using rule 176 (stmt -> compound_stmt .)
    DEDENT          reduce using rule 176 (stmt -> compound_stmt .)


state 40

    (39) factor -> power .

    *               reduce using rule 39 (factor -> power .)
    /               reduce using rule 39 (factor -> power .)
    %               reduce using rule 39 (factor -> power .)
    OP_EXACT_DIVISION reduce using rule 39 (factor -> power .)
    +               reduce using rule 39 (factor -> power .)
    -               reduce using rule 39 (factor -> power .)
    OP_LEFT_SHIFT   reduce using rule 39 (factor -> power .)
    OP_RIGHT_SHIFT  reduce using rule 39 (factor -> power .)
    &               reduce using rule 39 (factor -> power .)
    ^               reduce using rule 39 (factor -> power .)
    |               reduce using rule 39 (factor -> power .)
    >               reduce using rule 39 (factor -> power .)
    <               reduce using rule 39 (factor -> power .)
    OP_EQ           reduce using rule 39 (factor -> power .)
    OP_GE           reduce using rule 39 (factor -> power .)
    OP_LE           reduce using rule 39 (factor -> power .)
    OP_NE           reduce using rule 39 (factor -> power .)
    OP_NNE          reduce using rule 39 (factor -> power .)
    TAG_IN          reduce using rule 39 (factor -> power .)
    TAG_NOT         reduce using rule 39 (factor -> power .)
    TAG_IS          reduce using rule 39 (factor -> power .)
    TAG_AND         reduce using rule 39 (factor -> power .)
    TAG_IF          reduce using rule 39 (factor -> power .)
    TAG_OR          reduce using rule 39 (factor -> power .)
    ,               reduce using rule 39 (factor -> power .)
    ADD_ASN         reduce using rule 39 (factor -> power .)
    SUB_ASN         reduce using rule 39 (factor -> power .)
    MUL_ASN         reduce using rule 39 (factor -> power .)
    DIV_ASN         reduce using rule 39 (factor -> power .)
    MOD_ASN         reduce using rule 39 (factor -> power .)
    AND_ASN         reduce using rule 39 (factor -> power .)
    OR_ASN          reduce using rule 39 (factor -> power .)
    XOR_ASN         reduce using rule 39 (factor -> power .)
    LSHIFT_ASN      reduce using rule 39 (factor -> power .)
    RSHIFT_ASN      reduce using rule 39 (factor -> power .)
    POW_ASN         reduce using rule 39 (factor -> power .)
    FDIV_ASN        reduce using rule 39 (factor -> power .)
    =               reduce using rule 39 (factor -> power .)
    NEWLINE         reduce using rule 39 (factor -> power .)
    ;               reduce using rule 39 (factor -> power .)
    TAG_FOR         reduce using rule 39 (factor -> power .)
    )               reduce using rule 39 (factor -> power .)
    `               reduce using rule 39 (factor -> power .)
    INDENT          reduce using rule 39 (factor -> power .)
    TAG_DEL         reduce using rule 39 (factor -> power .)
    TAG_PASS        reduce using rule 39 (factor -> power .)
    TAG_GLOBAL      reduce using rule 39 (factor -> power .)
    TAG_EXEC        reduce using rule 39 (factor -> power .)
    TAG_ASSERT      reduce using rule 39 (factor -> power .)
    TAG_DRAW        reduce using rule 39 (factor -> power .)
    TAG_BREAK       reduce using rule 39 (factor -> power .)
    TAG_CONTINUE    reduce using rule 39 (factor -> power .)
    TAG_RETURN      reduce using rule 39 (factor -> power .)
    TAG_RAISE       reduce using rule 39 (factor -> power .)
    TAG_IMPORT      reduce using rule 39 (factor -> power .)
    TAG_FROM        reduce using rule 39 (factor -> power .)
    TAG_YIELD       reduce using rule 39 (factor -> power .)
    TAG_LAMBDA      reduce using rule 39 (factor -> power .)
    ~               reduce using rule 39 (factor -> power .)
    (               reduce using rule 39 (factor -> power .)
    [               reduce using rule 39 (factor -> power .)
    {               reduce using rule 39 (factor -> power .)
    NAME            reduce using rule 39 (factor -> power .)
    NUMBER          reduce using rule 39 (factor -> power .)
    STRING          reduce using rule 39 (factor -> power .)
    ]               reduce using rule 39 (factor -> power .)
    :               reduce using rule 39 (factor -> power .)
    }               reduce using rule 39 (factor -> power .)
    TAG_AS          reduce using rule 39 (factor -> power .)
    TAG_ELSE        reduce using rule 39 (factor -> power .)


state 41

    (279) assert_stmt -> TAG_ASSERT . test
    (280) assert_stmt -> TAG_ASSERT . test , test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 143
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 42

    (6) file_content -> stmt .

    ENDMARKER       reduce using rule 6 (file_content -> stmt .)
    NEWLINE         reduce using rule 6 (file_content -> stmt .)
    TAG_IF          reduce using rule 6 (file_content -> stmt .)
    TAG_WHILE       reduce using rule 6 (file_content -> stmt .)
    TAG_FOR         reduce using rule 6 (file_content -> stmt .)
    TAG_TRY         reduce using rule 6 (file_content -> stmt .)
    TAG_DEF         reduce using rule 6 (file_content -> stmt .)
    TAG_CLASS       reduce using rule 6 (file_content -> stmt .)
    TAG_DEL         reduce using rule 6 (file_content -> stmt .)
    TAG_PASS        reduce using rule 6 (file_content -> stmt .)
    TAG_GLOBAL      reduce using rule 6 (file_content -> stmt .)
    TAG_EXEC        reduce using rule 6 (file_content -> stmt .)
    TAG_ASSERT      reduce using rule 6 (file_content -> stmt .)
    TAG_DRAW        reduce using rule 6 (file_content -> stmt .)
    TAG_BREAK       reduce using rule 6 (file_content -> stmt .)
    TAG_CONTINUE    reduce using rule 6 (file_content -> stmt .)
    TAG_RETURN      reduce using rule 6 (file_content -> stmt .)
    TAG_RAISE       reduce using rule 6 (file_content -> stmt .)
    TAG_IMPORT      reduce using rule 6 (file_content -> stmt .)
    TAG_FROM        reduce using rule 6 (file_content -> stmt .)
    @               reduce using rule 6 (file_content -> stmt .)
    TAG_YIELD       reduce using rule 6 (file_content -> stmt .)
    TAG_LAMBDA      reduce using rule 6 (file_content -> stmt .)
    TAG_NOT         reduce using rule 6 (file_content -> stmt .)
    +               reduce using rule 6 (file_content -> stmt .)
    -               reduce using rule 6 (file_content -> stmt .)
    ~               reduce using rule 6 (file_content -> stmt .)
    (               reduce using rule 6 (file_content -> stmt .)
    [               reduce using rule 6 (file_content -> stmt .)
    {               reduce using rule 6 (file_content -> stmt .)
    `               reduce using rule 6 (file_content -> stmt .)
    NAME            reduce using rule 6 (file_content -> stmt .)
    NUMBER          reduce using rule 6 (file_content -> stmt .)
    STRING          reduce using rule 6 (file_content -> stmt .)


state 43

    (75) atom -> [ . ]
    (76) atom -> [ . listmaker ]
    (88) listmaker -> . testlist
    (89) listmaker -> . test list_for
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    ]               shift and go to state 147
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    listmaker                      shift and go to state 144
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    testlist                       shift and go to state 145
    and_test                       shift and go to state 78
    test                           shift and go to state 146
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 44

    (213) small_stmt -> import_stmt .

    NEWLINE         reduce using rule 213 (small_stmt -> import_stmt .)
    ;               reduce using rule 213 (small_stmt -> import_stmt .)


state 45

    (126) not_test -> comparison .
    (128) comparison -> comparison . comp_op expr
    (129) comp_op -> . >
    (130) comp_op -> . <
    (131) comp_op -> . OP_EQ
    (132) comp_op -> . OP_GE
    (133) comp_op -> . OP_LE
    (134) comp_op -> . OP_NE
    (135) comp_op -> . OP_NNE
    (136) comp_op -> . TAG_IN
    (137) comp_op -> . TAG_NOT TAG_IN
    (138) comp_op -> . TAG_IS
    (139) comp_op -> . TAG_IS TAG_NOT

  ! shift/reduce conflict for TAG_NOT resolved as shift
    TAG_AND         reduce using rule 126 (not_test -> comparison .)
    TAG_OR          reduce using rule 126 (not_test -> comparison .)
    TAG_FOR         reduce using rule 126 (not_test -> comparison .)
    TAG_IF          reduce using rule 126 (not_test -> comparison .)
    ]               reduce using rule 126 (not_test -> comparison .)
    ,               reduce using rule 126 (not_test -> comparison .)
    =               reduce using rule 126 (not_test -> comparison .)
    NEWLINE         reduce using rule 126 (not_test -> comparison .)
    ;               reduce using rule 126 (not_test -> comparison .)
    ADD_ASN         reduce using rule 126 (not_test -> comparison .)
    SUB_ASN         reduce using rule 126 (not_test -> comparison .)
    MUL_ASN         reduce using rule 126 (not_test -> comparison .)
    DIV_ASN         reduce using rule 126 (not_test -> comparison .)
    MOD_ASN         reduce using rule 126 (not_test -> comparison .)
    AND_ASN         reduce using rule 126 (not_test -> comparison .)
    OR_ASN          reduce using rule 126 (not_test -> comparison .)
    XOR_ASN         reduce using rule 126 (not_test -> comparison .)
    LSHIFT_ASN      reduce using rule 126 (not_test -> comparison .)
    RSHIFT_ASN      reduce using rule 126 (not_test -> comparison .)
    POW_ASN         reduce using rule 126 (not_test -> comparison .)
    FDIV_ASN        reduce using rule 126 (not_test -> comparison .)
    )               reduce using rule 126 (not_test -> comparison .)
    `               reduce using rule 126 (not_test -> comparison .)
    INDENT          reduce using rule 126 (not_test -> comparison .)
    TAG_DEL         reduce using rule 126 (not_test -> comparison .)
    TAG_PASS        reduce using rule 126 (not_test -> comparison .)
    TAG_GLOBAL      reduce using rule 126 (not_test -> comparison .)
    TAG_EXEC        reduce using rule 126 (not_test -> comparison .)
    TAG_ASSERT      reduce using rule 126 (not_test -> comparison .)
    TAG_DRAW        reduce using rule 126 (not_test -> comparison .)
    TAG_BREAK       reduce using rule 126 (not_test -> comparison .)
    TAG_CONTINUE    reduce using rule 126 (not_test -> comparison .)
    TAG_RETURN      reduce using rule 126 (not_test -> comparison .)
    TAG_RAISE       reduce using rule 126 (not_test -> comparison .)
    TAG_IMPORT      reduce using rule 126 (not_test -> comparison .)
    TAG_FROM        reduce using rule 126 (not_test -> comparison .)
    TAG_YIELD       reduce using rule 126 (not_test -> comparison .)
    TAG_LAMBDA      reduce using rule 126 (not_test -> comparison .)
    +               reduce using rule 126 (not_test -> comparison .)
    -               reduce using rule 126 (not_test -> comparison .)
    ~               reduce using rule 126 (not_test -> comparison .)
    (               reduce using rule 126 (not_test -> comparison .)
    [               reduce using rule 126 (not_test -> comparison .)
    {               reduce using rule 126 (not_test -> comparison .)
    NAME            reduce using rule 126 (not_test -> comparison .)
    NUMBER          reduce using rule 126 (not_test -> comparison .)
    STRING          reduce using rule 126 (not_test -> comparison .)
    :               reduce using rule 126 (not_test -> comparison .)
    }               reduce using rule 126 (not_test -> comparison .)
    TAG_AS          reduce using rule 126 (not_test -> comparison .)
    TAG_ELSE        reduce using rule 126 (not_test -> comparison .)
    >               shift and go to state 158
    <               shift and go to state 157
    OP_EQ           shift and go to state 149
    OP_GE           shift and go to state 154
    OP_LE           shift and go to state 156
    OP_NE           shift and go to state 153
    OP_NNE          shift and go to state 152
    TAG_IN          shift and go to state 150
    TAG_NOT         shift and go to state 151
    TAG_IS          shift and go to state 155

  ! TAG_NOT         [ reduce using rule 126 (not_test -> comparison .) ]

    comp_op                        shift and go to state 148

state 46

    (211) small_stmt -> pass_stmt .

    NEWLINE         reduce using rule 211 (small_stmt -> pass_stmt .)
    ;               reduce using rule 211 (small_stmt -> pass_stmt .)


state 47

    (25) shift_expr -> arith_expr .
    (29) arith_expr -> arith_expr . + term
    (30) arith_expr -> arith_expr . - term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    OP_LEFT_SHIFT   reduce using rule 25 (shift_expr -> arith_expr .)
    OP_RIGHT_SHIFT  reduce using rule 25 (shift_expr -> arith_expr .)
    &               reduce using rule 25 (shift_expr -> arith_expr .)
    ^               reduce using rule 25 (shift_expr -> arith_expr .)
    |               reduce using rule 25 (shift_expr -> arith_expr .)
    >               reduce using rule 25 (shift_expr -> arith_expr .)
    <               reduce using rule 25 (shift_expr -> arith_expr .)
    OP_EQ           reduce using rule 25 (shift_expr -> arith_expr .)
    OP_GE           reduce using rule 25 (shift_expr -> arith_expr .)
    OP_LE           reduce using rule 25 (shift_expr -> arith_expr .)
    OP_NE           reduce using rule 25 (shift_expr -> arith_expr .)
    OP_NNE          reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_IN          reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_NOT         reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_IS          reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_AND         reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_IF          reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_OR          reduce using rule 25 (shift_expr -> arith_expr .)
    ,               reduce using rule 25 (shift_expr -> arith_expr .)
    ADD_ASN         reduce using rule 25 (shift_expr -> arith_expr .)
    SUB_ASN         reduce using rule 25 (shift_expr -> arith_expr .)
    MUL_ASN         reduce using rule 25 (shift_expr -> arith_expr .)
    DIV_ASN         reduce using rule 25 (shift_expr -> arith_expr .)
    MOD_ASN         reduce using rule 25 (shift_expr -> arith_expr .)
    AND_ASN         reduce using rule 25 (shift_expr -> arith_expr .)
    OR_ASN          reduce using rule 25 (shift_expr -> arith_expr .)
    XOR_ASN         reduce using rule 25 (shift_expr -> arith_expr .)
    LSHIFT_ASN      reduce using rule 25 (shift_expr -> arith_expr .)
    RSHIFT_ASN      reduce using rule 25 (shift_expr -> arith_expr .)
    POW_ASN         reduce using rule 25 (shift_expr -> arith_expr .)
    FDIV_ASN        reduce using rule 25 (shift_expr -> arith_expr .)
    =               reduce using rule 25 (shift_expr -> arith_expr .)
    NEWLINE         reduce using rule 25 (shift_expr -> arith_expr .)
    ;               reduce using rule 25 (shift_expr -> arith_expr .)
    :               reduce using rule 25 (shift_expr -> arith_expr .)
    )               reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_FOR         reduce using rule 25 (shift_expr -> arith_expr .)
    `               reduce using rule 25 (shift_expr -> arith_expr .)
    INDENT          reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_DEL         reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_PASS        reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_GLOBAL      reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_EXEC        reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_ASSERT      reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_DRAW        reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_BREAK       reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_CONTINUE    reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_RETURN      reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_RAISE       reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_IMPORT      reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_FROM        reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_YIELD       reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_LAMBDA      reduce using rule 25 (shift_expr -> arith_expr .)
    ~               reduce using rule 25 (shift_expr -> arith_expr .)
    (               reduce using rule 25 (shift_expr -> arith_expr .)
    [               reduce using rule 25 (shift_expr -> arith_expr .)
    {               reduce using rule 25 (shift_expr -> arith_expr .)
    NAME            reduce using rule 25 (shift_expr -> arith_expr .)
    NUMBER          reduce using rule 25 (shift_expr -> arith_expr .)
    STRING          reduce using rule 25 (shift_expr -> arith_expr .)
    ]               reduce using rule 25 (shift_expr -> arith_expr .)
    }               reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_AS          reduce using rule 25 (shift_expr -> arith_expr .)
    TAG_ELSE        reduce using rule 25 (shift_expr -> arith_expr .)
    +               shift and go to state 159
    -               shift and go to state 160

  ! +               [ reduce using rule 25 (shift_expr -> arith_expr .) ]
  ! -               [ reduce using rule 25 (shift_expr -> arith_expr .) ]


state 48

    (257) import_name -> TAG_IMPORT . dotted_as_names
    (268) dotted_as_names -> . dotted_as_names , dotted_as_name
    (269) dotted_as_names -> . dotted_as_name
    (262) dotted_as_name -> . dotted_name
    (263) dotted_as_name -> . dotted_name TAG_AS NAME
    (270) dotted_name -> . NAME
    (271) dotted_name -> . dotted_name . NAME

    NAME            shift and go to state 109

    dotted_as_names                shift and go to state 161
    dotted_name                    shift and go to state 162
    dotted_as_name                 shift and go to state 163

state 49

    (77) atom -> { . }
    (78) atom -> { . dictormaker }
    (79) atom -> { . setmaker }
    (92) dictormaker -> . dictormaker_piece
    (93) dictormaker -> . dictormaker_piece ,
    (94) dictormaker -> . test : test comp_for
    (97) setmaker -> . setmaker_piece
    (98) setmaker -> . setmaker_piece ,
    (99) setmaker -> . test comp_for
    (90) dictormaker_piece -> . test : test
    (91) dictormaker_piece -> . dictormaker_piece , test : test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (95) setmaker_piece -> . test
    (96) setmaker_piece -> . setmaker_piece , test
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    }               shift and go to state 169
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    dictormaker                    shift and go to state 164
    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 165
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    dictormaker_piece              shift and go to state 166
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    setmaker_piece                 shift and go to state 167
    or_test                        shift and go to state 29
    setmaker                       shift and go to state 168
    expr                           shift and go to state 31
    strings                        shift and go to state 82

state 50

    (244) flow_stmt -> return_stmt .

    NEWLINE         reduce using rule 244 (flow_stmt -> return_stmt .)
    ;               reduce using rule 244 (flow_stmt -> return_stmt .)


state 51

    (249) return_stmt -> TAG_RETURN .
    (250) return_stmt -> TAG_RETURN . testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    NEWLINE         reduce using rule 249 (return_stmt -> TAG_RETURN .)
    ;               reduce using rule 249 (return_stmt -> TAG_RETURN .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 74
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    testlist                       shift and go to state 170
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 52

    (19) expr -> xor_expr .
    (22) xor_expr -> xor_expr . ^ and_expr

    |               reduce using rule 19 (expr -> xor_expr .)
    >               reduce using rule 19 (expr -> xor_expr .)
    <               reduce using rule 19 (expr -> xor_expr .)
    OP_EQ           reduce using rule 19 (expr -> xor_expr .)
    OP_GE           reduce using rule 19 (expr -> xor_expr .)
    OP_LE           reduce using rule 19 (expr -> xor_expr .)
    OP_NE           reduce using rule 19 (expr -> xor_expr .)
    OP_NNE          reduce using rule 19 (expr -> xor_expr .)
    TAG_IN          reduce using rule 19 (expr -> xor_expr .)
    TAG_NOT         reduce using rule 19 (expr -> xor_expr .)
    TAG_IS          reduce using rule 19 (expr -> xor_expr .)
    TAG_AND         reduce using rule 19 (expr -> xor_expr .)
    TAG_IF          reduce using rule 19 (expr -> xor_expr .)
    TAG_OR          reduce using rule 19 (expr -> xor_expr .)
    =               reduce using rule 19 (expr -> xor_expr .)
    TAG_FOR         reduce using rule 19 (expr -> xor_expr .)
    ,               reduce using rule 19 (expr -> xor_expr .)
    )               reduce using rule 19 (expr -> xor_expr .)
    ADD_ASN         reduce using rule 19 (expr -> xor_expr .)
    SUB_ASN         reduce using rule 19 (expr -> xor_expr .)
    MUL_ASN         reduce using rule 19 (expr -> xor_expr .)
    DIV_ASN         reduce using rule 19 (expr -> xor_expr .)
    MOD_ASN         reduce using rule 19 (expr -> xor_expr .)
    AND_ASN         reduce using rule 19 (expr -> xor_expr .)
    OR_ASN          reduce using rule 19 (expr -> xor_expr .)
    XOR_ASN         reduce using rule 19 (expr -> xor_expr .)
    LSHIFT_ASN      reduce using rule 19 (expr -> xor_expr .)
    RSHIFT_ASN      reduce using rule 19 (expr -> xor_expr .)
    POW_ASN         reduce using rule 19 (expr -> xor_expr .)
    FDIV_ASN        reduce using rule 19 (expr -> xor_expr .)
    NEWLINE         reduce using rule 19 (expr -> xor_expr .)
    ;               reduce using rule 19 (expr -> xor_expr .)
    TAG_AS          reduce using rule 19 (expr -> xor_expr .)
    :               reduce using rule 19 (expr -> xor_expr .)
    ]               reduce using rule 19 (expr -> xor_expr .)
    }               reduce using rule 19 (expr -> xor_expr .)
    INDENT          reduce using rule 19 (expr -> xor_expr .)
    TAG_DEL         reduce using rule 19 (expr -> xor_expr .)
    TAG_PASS        reduce using rule 19 (expr -> xor_expr .)
    TAG_GLOBAL      reduce using rule 19 (expr -> xor_expr .)
    TAG_EXEC        reduce using rule 19 (expr -> xor_expr .)
    TAG_ASSERT      reduce using rule 19 (expr -> xor_expr .)
    TAG_DRAW        reduce using rule 19 (expr -> xor_expr .)
    TAG_BREAK       reduce using rule 19 (expr -> xor_expr .)
    TAG_CONTINUE    reduce using rule 19 (expr -> xor_expr .)
    TAG_RETURN      reduce using rule 19 (expr -> xor_expr .)
    TAG_RAISE       reduce using rule 19 (expr -> xor_expr .)
    TAG_IMPORT      reduce using rule 19 (expr -> xor_expr .)
    TAG_FROM        reduce using rule 19 (expr -> xor_expr .)
    TAG_YIELD       reduce using rule 19 (expr -> xor_expr .)
    TAG_LAMBDA      reduce using rule 19 (expr -> xor_expr .)
    +               reduce using rule 19 (expr -> xor_expr .)
    -               reduce using rule 19 (expr -> xor_expr .)
    ~               reduce using rule 19 (expr -> xor_expr .)
    (               reduce using rule 19 (expr -> xor_expr .)
    [               reduce using rule 19 (expr -> xor_expr .)
    {               reduce using rule 19 (expr -> xor_expr .)
    `               reduce using rule 19 (expr -> xor_expr .)
    NAME            reduce using rule 19 (expr -> xor_expr .)
    NUMBER          reduce using rule 19 (expr -> xor_expr .)
    STRING          reduce using rule 19 (expr -> xor_expr .)
    TAG_ELSE        reduce using rule 19 (expr -> xor_expr .)
    ^               shift and go to state 171


state 53

    (258) import_from -> TAG_FROM . dotted_name TAG_IMPORT *
    (259) import_from -> TAG_FROM . dotted_name TAG_IMPORT import_as_names
    (270) dotted_name -> . NAME
    (271) dotted_name -> . dotted_name . NAME

    NAME            shift and go to state 109

    dotted_name                    shift and go to state 172

state 54

    (243) flow_stmt -> continue_stmt .

    NEWLINE         reduce using rule 243 (flow_stmt -> continue_stmt .)
    ;               reduce using rule 243 (flow_stmt -> continue_stmt .)


state 55

    (272) global_stmt -> TAG_GLOBAL . namelist
    (273) namelist -> . NAME
    (274) namelist -> . namelist , NAME

    NAME            shift and go to state 174

    namelist                       shift and go to state 173

state 56

    (40) power -> atom .
    (41) power -> atom . trailers
    (42) power -> atom . OP_POWER factor
    (43) power -> atom . trailers OP_POWER factor
    (44) trailers -> . trailers trailer
    (45) trailers -> . trailer
    (46) trailer -> . ( )
    (47) trailer -> . ( arglist )
    (48) trailer -> . [ subscriptlist ]
    (49) trailer -> . . NAME

  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for [ resolved as shift
    *               reduce using rule 40 (power -> atom .)
    /               reduce using rule 40 (power -> atom .)
    %               reduce using rule 40 (power -> atom .)
    OP_EXACT_DIVISION reduce using rule 40 (power -> atom .)
    +               reduce using rule 40 (power -> atom .)
    -               reduce using rule 40 (power -> atom .)
    OP_LEFT_SHIFT   reduce using rule 40 (power -> atom .)
    OP_RIGHT_SHIFT  reduce using rule 40 (power -> atom .)
    &               reduce using rule 40 (power -> atom .)
    ^               reduce using rule 40 (power -> atom .)
    |               reduce using rule 40 (power -> atom .)
    >               reduce using rule 40 (power -> atom .)
    <               reduce using rule 40 (power -> atom .)
    OP_EQ           reduce using rule 40 (power -> atom .)
    OP_GE           reduce using rule 40 (power -> atom .)
    OP_LE           reduce using rule 40 (power -> atom .)
    OP_NE           reduce using rule 40 (power -> atom .)
    OP_NNE          reduce using rule 40 (power -> atom .)
    TAG_IN          reduce using rule 40 (power -> atom .)
    TAG_NOT         reduce using rule 40 (power -> atom .)
    TAG_IS          reduce using rule 40 (power -> atom .)
    TAG_AND         reduce using rule 40 (power -> atom .)
    TAG_IF          reduce using rule 40 (power -> atom .)
    TAG_OR          reduce using rule 40 (power -> atom .)
    :               reduce using rule 40 (power -> atom .)
    ]               reduce using rule 40 (power -> atom .)
    ,               reduce using rule 40 (power -> atom .)
    ADD_ASN         reduce using rule 40 (power -> atom .)
    SUB_ASN         reduce using rule 40 (power -> atom .)
    MUL_ASN         reduce using rule 40 (power -> atom .)
    DIV_ASN         reduce using rule 40 (power -> atom .)
    MOD_ASN         reduce using rule 40 (power -> atom .)
    AND_ASN         reduce using rule 40 (power -> atom .)
    OR_ASN          reduce using rule 40 (power -> atom .)
    XOR_ASN         reduce using rule 40 (power -> atom .)
    LSHIFT_ASN      reduce using rule 40 (power -> atom .)
    RSHIFT_ASN      reduce using rule 40 (power -> atom .)
    POW_ASN         reduce using rule 40 (power -> atom .)
    FDIV_ASN        reduce using rule 40 (power -> atom .)
    =               reduce using rule 40 (power -> atom .)
    NEWLINE         reduce using rule 40 (power -> atom .)
    ;               reduce using rule 40 (power -> atom .)
    INDENT          reduce using rule 40 (power -> atom .)
    TAG_DEL         reduce using rule 40 (power -> atom .)
    TAG_PASS        reduce using rule 40 (power -> atom .)
    TAG_GLOBAL      reduce using rule 40 (power -> atom .)
    TAG_EXEC        reduce using rule 40 (power -> atom .)
    TAG_ASSERT      reduce using rule 40 (power -> atom .)
    TAG_DRAW        reduce using rule 40 (power -> atom .)
    TAG_BREAK       reduce using rule 40 (power -> atom .)
    TAG_CONTINUE    reduce using rule 40 (power -> atom .)
    TAG_RETURN      reduce using rule 40 (power -> atom .)
    TAG_RAISE       reduce using rule 40 (power -> atom .)
    TAG_IMPORT      reduce using rule 40 (power -> atom .)
    TAG_FROM        reduce using rule 40 (power -> atom .)
    TAG_YIELD       reduce using rule 40 (power -> atom .)
    TAG_LAMBDA      reduce using rule 40 (power -> atom .)
    ~               reduce using rule 40 (power -> atom .)
    {               reduce using rule 40 (power -> atom .)
    `               reduce using rule 40 (power -> atom .)
    NAME            reduce using rule 40 (power -> atom .)
    NUMBER          reduce using rule 40 (power -> atom .)
    STRING          reduce using rule 40 (power -> atom .)
    TAG_FOR         reduce using rule 40 (power -> atom .)
    )               reduce using rule 40 (power -> atom .)
    }               reduce using rule 40 (power -> atom .)
    TAG_AS          reduce using rule 40 (power -> atom .)
    TAG_ELSE        reduce using rule 40 (power -> atom .)
    OP_POWER        shift and go to state 175
    (               shift and go to state 176
    [               shift and go to state 179
    .               shift and go to state 177

  ! (               [ reduce using rule 40 (power -> atom .) ]
  ! [               [ reduce using rule 40 (power -> atom .) ]

    trailers                       shift and go to state 178
    trailer                        shift and go to state 180

state 57

    (245) flow_stmt -> raise_stmt .

    NEWLINE         reduce using rule 245 (flow_stmt -> raise_stmt .)
    ;               reduce using rule 245 (flow_stmt -> raise_stmt .)


state 58

    (14) classdef -> TAG_CLASS . NAME : suite
    (15) classdef -> TAG_CLASS . NAME ( testlist ) : suite
    (16) classdef -> TAG_CLASS . NAME ( ) : suite

    NAME            shift and go to state 181


state 59

    (81) atom -> NAME .

    OP_POWER        reduce using rule 81 (atom -> NAME .)
    (               reduce using rule 81 (atom -> NAME .)
    [               reduce using rule 81 (atom -> NAME .)
    .               reduce using rule 81 (atom -> NAME .)
    *               reduce using rule 81 (atom -> NAME .)
    /               reduce using rule 81 (atom -> NAME .)
    %               reduce using rule 81 (atom -> NAME .)
    OP_EXACT_DIVISION reduce using rule 81 (atom -> NAME .)
    +               reduce using rule 81 (atom -> NAME .)
    -               reduce using rule 81 (atom -> NAME .)
    OP_LEFT_SHIFT   reduce using rule 81 (atom -> NAME .)
    OP_RIGHT_SHIFT  reduce using rule 81 (atom -> NAME .)
    &               reduce using rule 81 (atom -> NAME .)
    ^               reduce using rule 81 (atom -> NAME .)
    |               reduce using rule 81 (atom -> NAME .)
    >               reduce using rule 81 (atom -> NAME .)
    <               reduce using rule 81 (atom -> NAME .)
    OP_EQ           reduce using rule 81 (atom -> NAME .)
    OP_GE           reduce using rule 81 (atom -> NAME .)
    OP_LE           reduce using rule 81 (atom -> NAME .)
    OP_NE           reduce using rule 81 (atom -> NAME .)
    OP_NNE          reduce using rule 81 (atom -> NAME .)
    TAG_IN          reduce using rule 81 (atom -> NAME .)
    TAG_NOT         reduce using rule 81 (atom -> NAME .)
    TAG_IS          reduce using rule 81 (atom -> NAME .)
    TAG_AND         reduce using rule 81 (atom -> NAME .)
    TAG_IF          reduce using rule 81 (atom -> NAME .)
    TAG_OR          reduce using rule 81 (atom -> NAME .)
    ,               reduce using rule 81 (atom -> NAME .)
    NEWLINE         reduce using rule 81 (atom -> NAME .)
    ;               reduce using rule 81 (atom -> NAME .)
    ADD_ASN         reduce using rule 81 (atom -> NAME .)
    SUB_ASN         reduce using rule 81 (atom -> NAME .)
    MUL_ASN         reduce using rule 81 (atom -> NAME .)
    DIV_ASN         reduce using rule 81 (atom -> NAME .)
    MOD_ASN         reduce using rule 81 (atom -> NAME .)
    AND_ASN         reduce using rule 81 (atom -> NAME .)
    OR_ASN          reduce using rule 81 (atom -> NAME .)
    XOR_ASN         reduce using rule 81 (atom -> NAME .)
    LSHIFT_ASN      reduce using rule 81 (atom -> NAME .)
    RSHIFT_ASN      reduce using rule 81 (atom -> NAME .)
    POW_ASN         reduce using rule 81 (atom -> NAME .)
    FDIV_ASN        reduce using rule 81 (atom -> NAME .)
    =               reduce using rule 81 (atom -> NAME .)
    TAG_FOR         reduce using rule 81 (atom -> NAME .)
    )               reduce using rule 81 (atom -> NAME .)
    `               reduce using rule 81 (atom -> NAME .)
    INDENT          reduce using rule 81 (atom -> NAME .)
    TAG_DEL         reduce using rule 81 (atom -> NAME .)
    TAG_PASS        reduce using rule 81 (atom -> NAME .)
    TAG_GLOBAL      reduce using rule 81 (atom -> NAME .)
    TAG_EXEC        reduce using rule 81 (atom -> NAME .)
    TAG_ASSERT      reduce using rule 81 (atom -> NAME .)
    TAG_DRAW        reduce using rule 81 (atom -> NAME .)
    TAG_BREAK       reduce using rule 81 (atom -> NAME .)
    TAG_CONTINUE    reduce using rule 81 (atom -> NAME .)
    TAG_RETURN      reduce using rule 81 (atom -> NAME .)
    TAG_RAISE       reduce using rule 81 (atom -> NAME .)
    TAG_IMPORT      reduce using rule 81 (atom -> NAME .)
    TAG_FROM        reduce using rule 81 (atom -> NAME .)
    TAG_YIELD       reduce using rule 81 (atom -> NAME .)
    TAG_LAMBDA      reduce using rule 81 (atom -> NAME .)
    ~               reduce using rule 81 (atom -> NAME .)
    {               reduce using rule 81 (atom -> NAME .)
    NAME            reduce using rule 81 (atom -> NAME .)
    NUMBER          reduce using rule 81 (atom -> NAME .)
    STRING          reduce using rule 81 (atom -> NAME .)
    ]               reduce using rule 81 (atom -> NAME .)
    :               reduce using rule 81 (atom -> NAME .)
    }               reduce using rule 81 (atom -> NAME .)
    TAG_AS          reduce using rule 81 (atom -> NAME .)
    TAG_ELSE        reduce using rule 81 (atom -> NAME .)


state 60

    (0) S' -> file_input .



state 61

    (240) del_stmt -> TAG_DEL . exprlist
    (17) exprlist -> . expr
    (18) exprlist -> . exprlist , expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 108
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    strings                        shift and go to state 82
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 52
    exprlist                       shift and go to state 182
    and_expr                       shift and go to state 63

state 62

    (160) funcdef -> TAG_DEF . NAME parameters suite

    NAME            shift and go to state 183


state 63

    (21) xor_expr -> and_expr .
    (24) and_expr -> and_expr . & shift_expr

    ^               reduce using rule 21 (xor_expr -> and_expr .)
    |               reduce using rule 21 (xor_expr -> and_expr .)
    >               reduce using rule 21 (xor_expr -> and_expr .)
    <               reduce using rule 21 (xor_expr -> and_expr .)
    OP_EQ           reduce using rule 21 (xor_expr -> and_expr .)
    OP_GE           reduce using rule 21 (xor_expr -> and_expr .)
    OP_LE           reduce using rule 21 (xor_expr -> and_expr .)
    OP_NE           reduce using rule 21 (xor_expr -> and_expr .)
    OP_NNE          reduce using rule 21 (xor_expr -> and_expr .)
    TAG_IN          reduce using rule 21 (xor_expr -> and_expr .)
    TAG_NOT         reduce using rule 21 (xor_expr -> and_expr .)
    TAG_IS          reduce using rule 21 (xor_expr -> and_expr .)
    TAG_AND         reduce using rule 21 (xor_expr -> and_expr .)
    TAG_IF          reduce using rule 21 (xor_expr -> and_expr .)
    TAG_OR          reduce using rule 21 (xor_expr -> and_expr .)
    ,               reduce using rule 21 (xor_expr -> and_expr .)
    ADD_ASN         reduce using rule 21 (xor_expr -> and_expr .)
    SUB_ASN         reduce using rule 21 (xor_expr -> and_expr .)
    MUL_ASN         reduce using rule 21 (xor_expr -> and_expr .)
    DIV_ASN         reduce using rule 21 (xor_expr -> and_expr .)
    MOD_ASN         reduce using rule 21 (xor_expr -> and_expr .)
    AND_ASN         reduce using rule 21 (xor_expr -> and_expr .)
    OR_ASN          reduce using rule 21 (xor_expr -> and_expr .)
    XOR_ASN         reduce using rule 21 (xor_expr -> and_expr .)
    LSHIFT_ASN      reduce using rule 21 (xor_expr -> and_expr .)
    RSHIFT_ASN      reduce using rule 21 (xor_expr -> and_expr .)
    POW_ASN         reduce using rule 21 (xor_expr -> and_expr .)
    FDIV_ASN        reduce using rule 21 (xor_expr -> and_expr .)
    =               reduce using rule 21 (xor_expr -> and_expr .)
    NEWLINE         reduce using rule 21 (xor_expr -> and_expr .)
    ;               reduce using rule 21 (xor_expr -> and_expr .)
    ]               reduce using rule 21 (xor_expr -> and_expr .)
    TAG_FOR         reduce using rule 21 (xor_expr -> and_expr .)
    )               reduce using rule 21 (xor_expr -> and_expr .)
    }               reduce using rule 21 (xor_expr -> and_expr .)
    `               reduce using rule 21 (xor_expr -> and_expr .)
    :               reduce using rule 21 (xor_expr -> and_expr .)
    INDENT          reduce using rule 21 (xor_expr -> and_expr .)
    TAG_DEL         reduce using rule 21 (xor_expr -> and_expr .)
    TAG_PASS        reduce using rule 21 (xor_expr -> and_expr .)
    TAG_GLOBAL      reduce using rule 21 (xor_expr -> and_expr .)
    TAG_EXEC        reduce using rule 21 (xor_expr -> and_expr .)
    TAG_ASSERT      reduce using rule 21 (xor_expr -> and_expr .)
    TAG_DRAW        reduce using rule 21 (xor_expr -> and_expr .)
    TAG_BREAK       reduce using rule 21 (xor_expr -> and_expr .)
    TAG_CONTINUE    reduce using rule 21 (xor_expr -> and_expr .)
    TAG_RETURN      reduce using rule 21 (xor_expr -> and_expr .)
    TAG_RAISE       reduce using rule 21 (xor_expr -> and_expr .)
    TAG_IMPORT      reduce using rule 21 (xor_expr -> and_expr .)
    TAG_FROM        reduce using rule 21 (xor_expr -> and_expr .)
    TAG_YIELD       reduce using rule 21 (xor_expr -> and_expr .)
    TAG_LAMBDA      reduce using rule 21 (xor_expr -> and_expr .)
    +               reduce using rule 21 (xor_expr -> and_expr .)
    -               reduce using rule 21 (xor_expr -> and_expr .)
    ~               reduce using rule 21 (xor_expr -> and_expr .)
    (               reduce using rule 21 (xor_expr -> and_expr .)
    [               reduce using rule 21 (xor_expr -> and_expr .)
    {               reduce using rule 21 (xor_expr -> and_expr .)
    NAME            reduce using rule 21 (xor_expr -> and_expr .)
    NUMBER          reduce using rule 21 (xor_expr -> and_expr .)
    STRING          reduce using rule 21 (xor_expr -> and_expr .)
    TAG_AS          reduce using rule 21 (xor_expr -> and_expr .)
    TAG_ELSE        reduce using rule 21 (xor_expr -> and_expr .)
    &               shift and go to state 184


state 64

    (246) flow_stmt -> yield_stmt .

    NEWLINE         reduce using rule 246 (flow_stmt -> yield_stmt .)
    ;               reduce using rule 246 (flow_stmt -> yield_stmt .)


state 65

    (38) factor -> ~ . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    atom                           shift and go to state 56
    factor                         shift and go to state 185
    strings                        shift and go to state 82

state 66

    (248) continue_stmt -> TAG_CONTINUE .

    NEWLINE         reduce using rule 248 (continue_stmt -> TAG_CONTINUE .)
    ;               reduce using rule 248 (continue_stmt -> TAG_CONTINUE .)


state 67

    (82) atom -> NUMBER .

    OP_POWER        reduce using rule 82 (atom -> NUMBER .)
    (               reduce using rule 82 (atom -> NUMBER .)
    [               reduce using rule 82 (atom -> NUMBER .)
    .               reduce using rule 82 (atom -> NUMBER .)
    *               reduce using rule 82 (atom -> NUMBER .)
    /               reduce using rule 82 (atom -> NUMBER .)
    %               reduce using rule 82 (atom -> NUMBER .)
    OP_EXACT_DIVISION reduce using rule 82 (atom -> NUMBER .)
    +               reduce using rule 82 (atom -> NUMBER .)
    -               reduce using rule 82 (atom -> NUMBER .)
    OP_LEFT_SHIFT   reduce using rule 82 (atom -> NUMBER .)
    OP_RIGHT_SHIFT  reduce using rule 82 (atom -> NUMBER .)
    &               reduce using rule 82 (atom -> NUMBER .)
    ^               reduce using rule 82 (atom -> NUMBER .)
    |               reduce using rule 82 (atom -> NUMBER .)
    >               reduce using rule 82 (atom -> NUMBER .)
    <               reduce using rule 82 (atom -> NUMBER .)
    OP_EQ           reduce using rule 82 (atom -> NUMBER .)
    OP_GE           reduce using rule 82 (atom -> NUMBER .)
    OP_LE           reduce using rule 82 (atom -> NUMBER .)
    OP_NE           reduce using rule 82 (atom -> NUMBER .)
    OP_NNE          reduce using rule 82 (atom -> NUMBER .)
    TAG_IN          reduce using rule 82 (atom -> NUMBER .)
    TAG_NOT         reduce using rule 82 (atom -> NUMBER .)
    TAG_IS          reduce using rule 82 (atom -> NUMBER .)
    TAG_AND         reduce using rule 82 (atom -> NUMBER .)
    TAG_IF          reduce using rule 82 (atom -> NUMBER .)
    TAG_OR          reduce using rule 82 (atom -> NUMBER .)
    ,               reduce using rule 82 (atom -> NUMBER .)
    NEWLINE         reduce using rule 82 (atom -> NUMBER .)
    ;               reduce using rule 82 (atom -> NUMBER .)
    ADD_ASN         reduce using rule 82 (atom -> NUMBER .)
    SUB_ASN         reduce using rule 82 (atom -> NUMBER .)
    MUL_ASN         reduce using rule 82 (atom -> NUMBER .)
    DIV_ASN         reduce using rule 82 (atom -> NUMBER .)
    MOD_ASN         reduce using rule 82 (atom -> NUMBER .)
    AND_ASN         reduce using rule 82 (atom -> NUMBER .)
    OR_ASN          reduce using rule 82 (atom -> NUMBER .)
    XOR_ASN         reduce using rule 82 (atom -> NUMBER .)
    LSHIFT_ASN      reduce using rule 82 (atom -> NUMBER .)
    RSHIFT_ASN      reduce using rule 82 (atom -> NUMBER .)
    POW_ASN         reduce using rule 82 (atom -> NUMBER .)
    FDIV_ASN        reduce using rule 82 (atom -> NUMBER .)
    =               reduce using rule 82 (atom -> NUMBER .)
    TAG_FOR         reduce using rule 82 (atom -> NUMBER .)
    )               reduce using rule 82 (atom -> NUMBER .)
    `               reduce using rule 82 (atom -> NUMBER .)
    INDENT          reduce using rule 82 (atom -> NUMBER .)
    TAG_DEL         reduce using rule 82 (atom -> NUMBER .)
    TAG_PASS        reduce using rule 82 (atom -> NUMBER .)
    TAG_GLOBAL      reduce using rule 82 (atom -> NUMBER .)
    TAG_EXEC        reduce using rule 82 (atom -> NUMBER .)
    TAG_ASSERT      reduce using rule 82 (atom -> NUMBER .)
    TAG_DRAW        reduce using rule 82 (atom -> NUMBER .)
    TAG_BREAK       reduce using rule 82 (atom -> NUMBER .)
    TAG_CONTINUE    reduce using rule 82 (atom -> NUMBER .)
    TAG_RETURN      reduce using rule 82 (atom -> NUMBER .)
    TAG_RAISE       reduce using rule 82 (atom -> NUMBER .)
    TAG_IMPORT      reduce using rule 82 (atom -> NUMBER .)
    TAG_FROM        reduce using rule 82 (atom -> NUMBER .)
    TAG_YIELD       reduce using rule 82 (atom -> NUMBER .)
    TAG_LAMBDA      reduce using rule 82 (atom -> NUMBER .)
    ~               reduce using rule 82 (atom -> NUMBER .)
    {               reduce using rule 82 (atom -> NUMBER .)
    NAME            reduce using rule 82 (atom -> NUMBER .)
    NUMBER          reduce using rule 82 (atom -> NUMBER .)
    STRING          reduce using rule 82 (atom -> NUMBER .)
    ]               reduce using rule 82 (atom -> NUMBER .)
    :               reduce using rule 82 (atom -> NUMBER .)
    }               reduce using rule 82 (atom -> NUMBER .)
    TAG_AS          reduce using rule 82 (atom -> NUMBER .)
    TAG_ELSE        reduce using rule 82 (atom -> NUMBER .)


state 68

    (123) and_test -> not_test .

    TAG_AND         reduce using rule 123 (and_test -> not_test .)
    TAG_IF          reduce using rule 123 (and_test -> not_test .)
    TAG_OR          reduce using rule 123 (and_test -> not_test .)
    NEWLINE         reduce using rule 123 (and_test -> not_test .)
    ;               reduce using rule 123 (and_test -> not_test .)
    `               reduce using rule 123 (and_test -> not_test .)
    ,               reduce using rule 123 (and_test -> not_test .)
    :               reduce using rule 123 (and_test -> not_test .)
    ADD_ASN         reduce using rule 123 (and_test -> not_test .)
    SUB_ASN         reduce using rule 123 (and_test -> not_test .)
    MUL_ASN         reduce using rule 123 (and_test -> not_test .)
    DIV_ASN         reduce using rule 123 (and_test -> not_test .)
    MOD_ASN         reduce using rule 123 (and_test -> not_test .)
    AND_ASN         reduce using rule 123 (and_test -> not_test .)
    OR_ASN          reduce using rule 123 (and_test -> not_test .)
    XOR_ASN         reduce using rule 123 (and_test -> not_test .)
    LSHIFT_ASN      reduce using rule 123 (and_test -> not_test .)
    RSHIFT_ASN      reduce using rule 123 (and_test -> not_test .)
    POW_ASN         reduce using rule 123 (and_test -> not_test .)
    FDIV_ASN        reduce using rule 123 (and_test -> not_test .)
    =               reduce using rule 123 (and_test -> not_test .)
    TAG_FOR         reduce using rule 123 (and_test -> not_test .)
    ]               reduce using rule 123 (and_test -> not_test .)
    )               reduce using rule 123 (and_test -> not_test .)
    INDENT          reduce using rule 123 (and_test -> not_test .)
    TAG_DEL         reduce using rule 123 (and_test -> not_test .)
    TAG_PASS        reduce using rule 123 (and_test -> not_test .)
    TAG_GLOBAL      reduce using rule 123 (and_test -> not_test .)
    TAG_EXEC        reduce using rule 123 (and_test -> not_test .)
    TAG_ASSERT      reduce using rule 123 (and_test -> not_test .)
    TAG_DRAW        reduce using rule 123 (and_test -> not_test .)
    TAG_BREAK       reduce using rule 123 (and_test -> not_test .)
    TAG_CONTINUE    reduce using rule 123 (and_test -> not_test .)
    TAG_RETURN      reduce using rule 123 (and_test -> not_test .)
    TAG_RAISE       reduce using rule 123 (and_test -> not_test .)
    TAG_IMPORT      reduce using rule 123 (and_test -> not_test .)
    TAG_FROM        reduce using rule 123 (and_test -> not_test .)
    TAG_YIELD       reduce using rule 123 (and_test -> not_test .)
    TAG_LAMBDA      reduce using rule 123 (and_test -> not_test .)
    TAG_NOT         reduce using rule 123 (and_test -> not_test .)
    +               reduce using rule 123 (and_test -> not_test .)
    -               reduce using rule 123 (and_test -> not_test .)
    ~               reduce using rule 123 (and_test -> not_test .)
    (               reduce using rule 123 (and_test -> not_test .)
    [               reduce using rule 123 (and_test -> not_test .)
    {               reduce using rule 123 (and_test -> not_test .)
    NAME            reduce using rule 123 (and_test -> not_test .)
    NUMBER          reduce using rule 123 (and_test -> not_test .)
    STRING          reduce using rule 123 (and_test -> not_test .)
    }               reduce using rule 123 (and_test -> not_test .)
    TAG_AS          reduce using rule 123 (and_test -> not_test .)
    TAG_ELSE        reduce using rule 123 (and_test -> not_test .)


state 69

    (247) break_stmt -> TAG_BREAK .

    NEWLINE         reduce using rule 247 (break_stmt -> TAG_BREAK .)
    ;               reduce using rule 247 (break_stmt -> TAG_BREAK .)


state 70

    (242) flow_stmt -> break_stmt .

    NEWLINE         reduce using rule 242 (flow_stmt -> break_stmt .)
    ;               reduce using rule 242 (flow_stmt -> break_stmt .)


state 71

    (217) small_stmt -> draw_stmt .

    NEWLINE         reduce using rule 217 (small_stmt -> draw_stmt .)
    ;               reduce using rule 217 (small_stmt -> draw_stmt .)


state 72

    (37) factor -> - . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    atom                           shift and go to state 56
    factor                         shift and go to state 186
    strings                        shift and go to state 82

state 73

    (178) compound_stmt -> while_stmt .

    ENDMARKER       reduce using rule 178 (compound_stmt -> while_stmt .)
    NEWLINE         reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_IF          reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_WHILE       reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_FOR         reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_TRY         reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_DEF         reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_CLASS       reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_DEL         reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_PASS        reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_GLOBAL      reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_EXEC        reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_ASSERT      reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_DRAW        reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_BREAK       reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_CONTINUE    reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_RETURN      reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_RAISE       reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_IMPORT      reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_FROM        reduce using rule 178 (compound_stmt -> while_stmt .)
    @               reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_YIELD       reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_LAMBDA      reduce using rule 178 (compound_stmt -> while_stmt .)
    TAG_NOT         reduce using rule 178 (compound_stmt -> while_stmt .)
    +               reduce using rule 178 (compound_stmt -> while_stmt .)
    -               reduce using rule 178 (compound_stmt -> while_stmt .)
    ~               reduce using rule 178 (compound_stmt -> while_stmt .)
    (               reduce using rule 178 (compound_stmt -> while_stmt .)
    [               reduce using rule 178 (compound_stmt -> while_stmt .)
    {               reduce using rule 178 (compound_stmt -> while_stmt .)
    `               reduce using rule 178 (compound_stmt -> while_stmt .)
    NAME            reduce using rule 178 (compound_stmt -> while_stmt .)
    NUMBER          reduce using rule 178 (compound_stmt -> while_stmt .)
    STRING          reduce using rule 178 (compound_stmt -> while_stmt .)
    DEDENT          reduce using rule 178 (compound_stmt -> while_stmt .)


state 74

    (117) testlist_anns -> test .

    ,               reduce using rule 117 (testlist_anns -> test .)
    ADD_ASN         reduce using rule 117 (testlist_anns -> test .)
    SUB_ASN         reduce using rule 117 (testlist_anns -> test .)
    MUL_ASN         reduce using rule 117 (testlist_anns -> test .)
    DIV_ASN         reduce using rule 117 (testlist_anns -> test .)
    MOD_ASN         reduce using rule 117 (testlist_anns -> test .)
    AND_ASN         reduce using rule 117 (testlist_anns -> test .)
    OR_ASN          reduce using rule 117 (testlist_anns -> test .)
    XOR_ASN         reduce using rule 117 (testlist_anns -> test .)
    LSHIFT_ASN      reduce using rule 117 (testlist_anns -> test .)
    RSHIFT_ASN      reduce using rule 117 (testlist_anns -> test .)
    POW_ASN         reduce using rule 117 (testlist_anns -> test .)
    FDIV_ASN        reduce using rule 117 (testlist_anns -> test .)
    =               reduce using rule 117 (testlist_anns -> test .)
    NEWLINE         reduce using rule 117 (testlist_anns -> test .)
    ;               reduce using rule 117 (testlist_anns -> test .)
    )               reduce using rule 117 (testlist_anns -> test .)
    INDENT          reduce using rule 117 (testlist_anns -> test .)
    TAG_DEL         reduce using rule 117 (testlist_anns -> test .)
    TAG_PASS        reduce using rule 117 (testlist_anns -> test .)
    TAG_GLOBAL      reduce using rule 117 (testlist_anns -> test .)
    TAG_EXEC        reduce using rule 117 (testlist_anns -> test .)
    TAG_ASSERT      reduce using rule 117 (testlist_anns -> test .)
    TAG_DRAW        reduce using rule 117 (testlist_anns -> test .)
    TAG_BREAK       reduce using rule 117 (testlist_anns -> test .)
    TAG_CONTINUE    reduce using rule 117 (testlist_anns -> test .)
    TAG_RETURN      reduce using rule 117 (testlist_anns -> test .)
    TAG_RAISE       reduce using rule 117 (testlist_anns -> test .)
    TAG_IMPORT      reduce using rule 117 (testlist_anns -> test .)
    TAG_FROM        reduce using rule 117 (testlist_anns -> test .)
    TAG_YIELD       reduce using rule 117 (testlist_anns -> test .)
    TAG_LAMBDA      reduce using rule 117 (testlist_anns -> test .)
    TAG_NOT         reduce using rule 117 (testlist_anns -> test .)
    +               reduce using rule 117 (testlist_anns -> test .)
    -               reduce using rule 117 (testlist_anns -> test .)
    ~               reduce using rule 117 (testlist_anns -> test .)
    (               reduce using rule 117 (testlist_anns -> test .)
    [               reduce using rule 117 (testlist_anns -> test .)
    {               reduce using rule 117 (testlist_anns -> test .)
    `               reduce using rule 117 (testlist_anns -> test .)
    NAME            reduce using rule 117 (testlist_anns -> test .)
    NUMBER          reduce using rule 117 (testlist_anns -> test .)
    STRING          reduce using rule 117 (testlist_anns -> test .)


state 75

    (214) small_stmt -> global_stmt .

    NEWLINE         reduce using rule 214 (small_stmt -> global_stmt .)
    ;               reduce using rule 214 (small_stmt -> global_stmt .)


state 76

    (255) import_stmt -> import_name .

    NEWLINE         reduce using rule 255 (import_stmt -> import_name .)
    ;               reduce using rule 255 (import_stmt -> import_name .)


state 77

    (275) yield_stmt -> yield_expr .

    NEWLINE         reduce using rule 275 (yield_stmt -> yield_expr .)
    ;               reduce using rule 275 (yield_stmt -> yield_expr .)


state 78

    (121) or_test -> and_test .
    (124) and_test -> and_test . TAG_AND not_test

    TAG_IF          reduce using rule 121 (or_test -> and_test .)
    TAG_OR          reduce using rule 121 (or_test -> and_test .)
    ,               reduce using rule 121 (or_test -> and_test .)
    NEWLINE         reduce using rule 121 (or_test -> and_test .)
    ;               reduce using rule 121 (or_test -> and_test .)
    ADD_ASN         reduce using rule 121 (or_test -> and_test .)
    SUB_ASN         reduce using rule 121 (or_test -> and_test .)
    MUL_ASN         reduce using rule 121 (or_test -> and_test .)
    DIV_ASN         reduce using rule 121 (or_test -> and_test .)
    MOD_ASN         reduce using rule 121 (or_test -> and_test .)
    AND_ASN         reduce using rule 121 (or_test -> and_test .)
    OR_ASN          reduce using rule 121 (or_test -> and_test .)
    XOR_ASN         reduce using rule 121 (or_test -> and_test .)
    LSHIFT_ASN      reduce using rule 121 (or_test -> and_test .)
    RSHIFT_ASN      reduce using rule 121 (or_test -> and_test .)
    POW_ASN         reduce using rule 121 (or_test -> and_test .)
    FDIV_ASN        reduce using rule 121 (or_test -> and_test .)
    =               reduce using rule 121 (or_test -> and_test .)
    INDENT          reduce using rule 121 (or_test -> and_test .)
    TAG_DEL         reduce using rule 121 (or_test -> and_test .)
    TAG_PASS        reduce using rule 121 (or_test -> and_test .)
    TAG_GLOBAL      reduce using rule 121 (or_test -> and_test .)
    TAG_EXEC        reduce using rule 121 (or_test -> and_test .)
    TAG_ASSERT      reduce using rule 121 (or_test -> and_test .)
    TAG_DRAW        reduce using rule 121 (or_test -> and_test .)
    TAG_BREAK       reduce using rule 121 (or_test -> and_test .)
    TAG_CONTINUE    reduce using rule 121 (or_test -> and_test .)
    TAG_RETURN      reduce using rule 121 (or_test -> and_test .)
    TAG_RAISE       reduce using rule 121 (or_test -> and_test .)
    TAG_IMPORT      reduce using rule 121 (or_test -> and_test .)
    TAG_FROM        reduce using rule 121 (or_test -> and_test .)
    TAG_YIELD       reduce using rule 121 (or_test -> and_test .)
    TAG_LAMBDA      reduce using rule 121 (or_test -> and_test .)
    TAG_NOT         reduce using rule 121 (or_test -> and_test .)
    +               reduce using rule 121 (or_test -> and_test .)
    -               reduce using rule 121 (or_test -> and_test .)
    ~               reduce using rule 121 (or_test -> and_test .)
    (               reduce using rule 121 (or_test -> and_test .)
    [               reduce using rule 121 (or_test -> and_test .)
    {               reduce using rule 121 (or_test -> and_test .)
    `               reduce using rule 121 (or_test -> and_test .)
    NAME            reduce using rule 121 (or_test -> and_test .)
    NUMBER          reduce using rule 121 (or_test -> and_test .)
    STRING          reduce using rule 121 (or_test -> and_test .)
    )               reduce using rule 121 (or_test -> and_test .)
    :               reduce using rule 121 (or_test -> and_test .)
    ]               reduce using rule 121 (or_test -> and_test .)
    TAG_FOR         reduce using rule 121 (or_test -> and_test .)
    }               reduce using rule 121 (or_test -> and_test .)
    TAG_AS          reduce using rule 121 (or_test -> and_test .)
    TAG_ELSE        reduce using rule 121 (or_test -> and_test .)
    TAG_AND         shift and go to state 187


state 79

    (183) compound_stmt -> decorated .

    ENDMARKER       reduce using rule 183 (compound_stmt -> decorated .)
    NEWLINE         reduce using rule 183 (compound_stmt -> decorated .)
    TAG_IF          reduce using rule 183 (compound_stmt -> decorated .)
    TAG_WHILE       reduce using rule 183 (compound_stmt -> decorated .)
    TAG_FOR         reduce using rule 183 (compound_stmt -> decorated .)
    TAG_TRY         reduce using rule 183 (compound_stmt -> decorated .)
    TAG_DEF         reduce using rule 183 (compound_stmt -> decorated .)
    TAG_CLASS       reduce using rule 183 (compound_stmt -> decorated .)
    TAG_DEL         reduce using rule 183 (compound_stmt -> decorated .)
    TAG_PASS        reduce using rule 183 (compound_stmt -> decorated .)
    TAG_GLOBAL      reduce using rule 183 (compound_stmt -> decorated .)
    TAG_EXEC        reduce using rule 183 (compound_stmt -> decorated .)
    TAG_ASSERT      reduce using rule 183 (compound_stmt -> decorated .)
    TAG_DRAW        reduce using rule 183 (compound_stmt -> decorated .)
    TAG_BREAK       reduce using rule 183 (compound_stmt -> decorated .)
    TAG_CONTINUE    reduce using rule 183 (compound_stmt -> decorated .)
    TAG_RETURN      reduce using rule 183 (compound_stmt -> decorated .)
    TAG_RAISE       reduce using rule 183 (compound_stmt -> decorated .)
    TAG_IMPORT      reduce using rule 183 (compound_stmt -> decorated .)
    TAG_FROM        reduce using rule 183 (compound_stmt -> decorated .)
    @               reduce using rule 183 (compound_stmt -> decorated .)
    TAG_YIELD       reduce using rule 183 (compound_stmt -> decorated .)
    TAG_LAMBDA      reduce using rule 183 (compound_stmt -> decorated .)
    TAG_NOT         reduce using rule 183 (compound_stmt -> decorated .)
    +               reduce using rule 183 (compound_stmt -> decorated .)
    -               reduce using rule 183 (compound_stmt -> decorated .)
    ~               reduce using rule 183 (compound_stmt -> decorated .)
    (               reduce using rule 183 (compound_stmt -> decorated .)
    [               reduce using rule 183 (compound_stmt -> decorated .)
    {               reduce using rule 183 (compound_stmt -> decorated .)
    `               reduce using rule 183 (compound_stmt -> decorated .)
    NAME            reduce using rule 183 (compound_stmt -> decorated .)
    NUMBER          reduce using rule 183 (compound_stmt -> decorated .)
    STRING          reduce using rule 183 (compound_stmt -> decorated .)
    DEDENT          reduce using rule 183 (compound_stmt -> decorated .)


state 80

    (2) file_input -> file_content . ENDMARKER
    (3) file_content -> file_content . NEWLINE
    (4) file_content -> file_content . stmt
    (175) stmt -> . simple_stmt
    (176) stmt -> . compound_stmt
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (177) compound_stmt -> . if_stmt
    (178) compound_stmt -> . while_stmt
    (179) compound_stmt -> . for_stmt
    (180) compound_stmt -> . try_stmt
    (181) compound_stmt -> . funcdef
    (182) compound_stmt -> . classdef
    (183) compound_stmt -> . decorated
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (184) if_stmt -> . TAG_IF test suite
    (185) if_stmt -> . TAG_IF test suite TAG_ELSE suite
    (186) if_stmt -> . TAG_IF test suite elif_list
    (187) if_stmt -> . TAG_IF test suite elif_list TAG_ELSE suite
    (188) while_stmt -> . TAG_WHILE test suite
    (189) while_stmt -> . TAG_WHILE test suite TAG_ELSE suite
    (190) for_stmt -> . TAG_FOR exprlist TAG_IN testlist suite
    (191) for_stmt -> . TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite
    (192) try_stmt -> . TAG_TRY : suite TAG_FINALLY : suite
    (193) try_stmt -> . TAG_TRY : suite except_clauses
    (194) try_stmt -> . TAG_TRY : suite except_clauses TAG_ELSE : suite
    (195) try_stmt -> . TAG_TRY : suite except_clauses TAG_FINALLY : suite
    (196) try_stmt -> . TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite
    (160) funcdef -> . TAG_DEF NAME parameters suite
    (14) classdef -> . TAG_CLASS NAME : suite
    (15) classdef -> . TAG_CLASS NAME ( testlist ) : suite
    (16) classdef -> . TAG_CLASS NAME ( ) : suite
    (12) decorated -> . decorators classdef
    (13) decorated -> . decorators funcdef
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (10) decorators -> . decorator
    (11) decorators -> . decorators decorator
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (7) decorator -> . @ dotted_name NEWLINE
    (8) decorator -> . @ dotted_name ( ) NEWLINE
    (9) decorator -> . @ dotted_name ( arglist ) NEWLINE
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    ENDMARKER       shift and go to state 188
    NEWLINE         shift and go to state 189
    TAG_IF          shift and go to state 28
    TAG_WHILE       shift and go to state 37
    TAG_FOR         shift and go to state 15
    TAG_TRY         shift and go to state 30
    TAG_DEF         shift and go to state 62
    TAG_CLASS       shift and go to state 58
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    @               shift and go to state 16
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    try_stmt                       shift and go to state 6
    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    import_name                    shift and go to state 76
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    atom                           shift and go to state 56
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    compound_stmt                  shift and go to state 39
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 17
    testlist                       shift and go to state 18
    classdef                       shift and go to state 19
    stmt                           shift and go to state 190
    assert_stmt                    shift and go to state 20
    for_stmt                       shift and go to state 21
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    funcdef                        shift and go to state 5
    decorated                      shift and go to state 79
    import_stmt                    shift and go to state 44
    decorator                      shift and go to state 24
    pass_stmt                      shift and go to state 46
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    if_stmt                        shift and go to state 27
    xor_expr                       shift and go to state 52
    decorators                     shift and go to state 38
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    while_stmt                     shift and go to state 73
    expr                           shift and go to state 31
    arith_expr                     shift and go to state 47
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 81

    (281) yield_expr -> TAG_YIELD .
    (282) yield_expr -> TAG_YIELD . testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    NEWLINE         reduce using rule 281 (yield_expr -> TAG_YIELD .)
    ;               reduce using rule 281 (yield_expr -> TAG_YIELD .)
    =               reduce using rule 281 (yield_expr -> TAG_YIELD .)
    )               reduce using rule 281 (yield_expr -> TAG_YIELD .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 74
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    testlist                       shift and go to state 191
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 82

    (83) atom -> strings .
    (84) strings -> strings . STRING

  ! shift/reduce conflict for STRING resolved as shift
    OP_POWER        reduce using rule 83 (atom -> strings .)
    (               reduce using rule 83 (atom -> strings .)
    [               reduce using rule 83 (atom -> strings .)
    .               reduce using rule 83 (atom -> strings .)
    *               reduce using rule 83 (atom -> strings .)
    /               reduce using rule 83 (atom -> strings .)
    %               reduce using rule 83 (atom -> strings .)
    OP_EXACT_DIVISION reduce using rule 83 (atom -> strings .)
    +               reduce using rule 83 (atom -> strings .)
    -               reduce using rule 83 (atom -> strings .)
    OP_LEFT_SHIFT   reduce using rule 83 (atom -> strings .)
    OP_RIGHT_SHIFT  reduce using rule 83 (atom -> strings .)
    &               reduce using rule 83 (atom -> strings .)
    ^               reduce using rule 83 (atom -> strings .)
    |               reduce using rule 83 (atom -> strings .)
    >               reduce using rule 83 (atom -> strings .)
    <               reduce using rule 83 (atom -> strings .)
    OP_EQ           reduce using rule 83 (atom -> strings .)
    OP_GE           reduce using rule 83 (atom -> strings .)
    OP_LE           reduce using rule 83 (atom -> strings .)
    OP_NE           reduce using rule 83 (atom -> strings .)
    OP_NNE          reduce using rule 83 (atom -> strings .)
    TAG_IN          reduce using rule 83 (atom -> strings .)
    TAG_NOT         reduce using rule 83 (atom -> strings .)
    TAG_IS          reduce using rule 83 (atom -> strings .)
    TAG_AND         reduce using rule 83 (atom -> strings .)
    TAG_IF          reduce using rule 83 (atom -> strings .)
    TAG_OR          reduce using rule 83 (atom -> strings .)
    ,               reduce using rule 83 (atom -> strings .)
    NEWLINE         reduce using rule 83 (atom -> strings .)
    ;               reduce using rule 83 (atom -> strings .)
    ADD_ASN         reduce using rule 83 (atom -> strings .)
    SUB_ASN         reduce using rule 83 (atom -> strings .)
    MUL_ASN         reduce using rule 83 (atom -> strings .)
    DIV_ASN         reduce using rule 83 (atom -> strings .)
    MOD_ASN         reduce using rule 83 (atom -> strings .)
    AND_ASN         reduce using rule 83 (atom -> strings .)
    OR_ASN          reduce using rule 83 (atom -> strings .)
    XOR_ASN         reduce using rule 83 (atom -> strings .)
    LSHIFT_ASN      reduce using rule 83 (atom -> strings .)
    RSHIFT_ASN      reduce using rule 83 (atom -> strings .)
    POW_ASN         reduce using rule 83 (atom -> strings .)
    FDIV_ASN        reduce using rule 83 (atom -> strings .)
    =               reduce using rule 83 (atom -> strings .)
    TAG_FOR         reduce using rule 83 (atom -> strings .)
    )               reduce using rule 83 (atom -> strings .)
    `               reduce using rule 83 (atom -> strings .)
    INDENT          reduce using rule 83 (atom -> strings .)
    TAG_DEL         reduce using rule 83 (atom -> strings .)
    TAG_PASS        reduce using rule 83 (atom -> strings .)
    TAG_GLOBAL      reduce using rule 83 (atom -> strings .)
    TAG_EXEC        reduce using rule 83 (atom -> strings .)
    TAG_ASSERT      reduce using rule 83 (atom -> strings .)
    TAG_DRAW        reduce using rule 83 (atom -> strings .)
    TAG_BREAK       reduce using rule 83 (atom -> strings .)
    TAG_CONTINUE    reduce using rule 83 (atom -> strings .)
    TAG_RETURN      reduce using rule 83 (atom -> strings .)
    TAG_RAISE       reduce using rule 83 (atom -> strings .)
    TAG_IMPORT      reduce using rule 83 (atom -> strings .)
    TAG_FROM        reduce using rule 83 (atom -> strings .)
    TAG_YIELD       reduce using rule 83 (atom -> strings .)
    TAG_LAMBDA      reduce using rule 83 (atom -> strings .)
    ~               reduce using rule 83 (atom -> strings .)
    {               reduce using rule 83 (atom -> strings .)
    NAME            reduce using rule 83 (atom -> strings .)
    NUMBER          reduce using rule 83 (atom -> strings .)
    ]               reduce using rule 83 (atom -> strings .)
    :               reduce using rule 83 (atom -> strings .)
    }               reduce using rule 83 (atom -> strings .)
    TAG_AS          reduce using rule 83 (atom -> strings .)
    TAG_ELSE        reduce using rule 83 (atom -> strings .)
    STRING          shift and go to state 192

  ! STRING          [ reduce using rule 83 (atom -> strings .) ]


state 83

    (210) small_stmt -> del_stmt .

    NEWLINE         reduce using rule 210 (small_stmt -> del_stmt .)
    ;               reduce using rule 210 (small_stmt -> del_stmt .)


state 84

    (36) factor -> + . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    atom                           shift and go to state 56
    factor                         shift and go to state 193
    strings                        shift and go to state 82

state 85

    (208) simple_stmt -> small_stmt ; . NEWLINE

    NEWLINE         shift and go to state 194


state 86

    (207) simple_stmt -> small_stmt NEWLINE .

    ;               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_ELSE        reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    ENDMARKER       reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    NEWLINE         reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_IF          reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_WHILE       reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_FOR         reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_TRY         reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_DEF         reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_CLASS       reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_DEL         reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_PASS        reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_GLOBAL      reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_EXEC        reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_ASSERT      reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_DRAW        reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_BREAK       reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_CONTINUE    reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_RETURN      reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_RAISE       reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_IMPORT      reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_FROM        reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    @               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_YIELD       reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_LAMBDA      reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_NOT         reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    +               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    -               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    ~               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    (               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    [               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    {               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    `               reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    NAME            reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    NUMBER          reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    STRING          reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    DEDENT          reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_ELIF        reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_FINALLY     reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)
    TAG_EXCEPT      reduce using rule 207 (simple_stmt -> small_stmt NEWLINE .)


state 87

    (27) shift_expr -> shift_expr OP_RIGHT_SHIFT . arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    arith_expr                     shift and go to state 195
    power                          shift and go to state 40
    factor                         shift and go to state 13
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 88

    (26) shift_expr -> shift_expr OP_LEFT_SHIFT . arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    arith_expr                     shift and go to state 196
    power                          shift and go to state 40
    factor                         shift and go to state 13
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 89

    (125) not_test -> TAG_NOT not_test .

    TAG_AND         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_OR          reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_FOR         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_IF          reduce using rule 125 (not_test -> TAG_NOT not_test .)
    ]               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    ,               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    =               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    NEWLINE         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    ;               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    ADD_ASN         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    SUB_ASN         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    MUL_ASN         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    DIV_ASN         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    MOD_ASN         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    AND_ASN         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    OR_ASN          reduce using rule 125 (not_test -> TAG_NOT not_test .)
    XOR_ASN         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    LSHIFT_ASN      reduce using rule 125 (not_test -> TAG_NOT not_test .)
    RSHIFT_ASN      reduce using rule 125 (not_test -> TAG_NOT not_test .)
    POW_ASN         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    FDIV_ASN        reduce using rule 125 (not_test -> TAG_NOT not_test .)
    )               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    `               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    INDENT          reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_DEL         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_PASS        reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_GLOBAL      reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_EXEC        reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_ASSERT      reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_DRAW        reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_BREAK       reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_CONTINUE    reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_RETURN      reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_RAISE       reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_IMPORT      reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_FROM        reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_YIELD       reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_LAMBDA      reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_NOT         reduce using rule 125 (not_test -> TAG_NOT not_test .)
    +               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    -               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    ~               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    (               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    [               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    {               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    NAME            reduce using rule 125 (not_test -> TAG_NOT not_test .)
    NUMBER          reduce using rule 125 (not_test -> TAG_NOT not_test .)
    STRING          reduce using rule 125 (not_test -> TAG_NOT not_test .)
    :               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    }               reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_AS          reduce using rule 125 (not_test -> TAG_NOT not_test .)
    TAG_ELSE        reduce using rule 125 (not_test -> TAG_NOT not_test .)


state 90

    (276) exec_stmt -> TAG_EXEC expr .
    (277) exec_stmt -> TAG_EXEC expr . TAG_IN test
    (278) exec_stmt -> TAG_EXEC expr . TAG_IN test , test
    (20) expr -> expr . | xor_expr

    NEWLINE         reduce using rule 276 (exec_stmt -> TAG_EXEC expr .)
    ;               reduce using rule 276 (exec_stmt -> TAG_EXEC expr .)
    TAG_IN          shift and go to state 197
    |               shift and go to state 137


state 91

    (74) atom -> ( testlist_comp . )

    )               shift and go to state 198


state 92

    (72) atom -> ( ) .

    OP_POWER        reduce using rule 72 (atom -> ( ) .)
    (               reduce using rule 72 (atom -> ( ) .)
    [               reduce using rule 72 (atom -> ( ) .)
    .               reduce using rule 72 (atom -> ( ) .)
    *               reduce using rule 72 (atom -> ( ) .)
    /               reduce using rule 72 (atom -> ( ) .)
    %               reduce using rule 72 (atom -> ( ) .)
    OP_EXACT_DIVISION reduce using rule 72 (atom -> ( ) .)
    +               reduce using rule 72 (atom -> ( ) .)
    -               reduce using rule 72 (atom -> ( ) .)
    OP_LEFT_SHIFT   reduce using rule 72 (atom -> ( ) .)
    OP_RIGHT_SHIFT  reduce using rule 72 (atom -> ( ) .)
    &               reduce using rule 72 (atom -> ( ) .)
    ^               reduce using rule 72 (atom -> ( ) .)
    |               reduce using rule 72 (atom -> ( ) .)
    >               reduce using rule 72 (atom -> ( ) .)
    <               reduce using rule 72 (atom -> ( ) .)
    OP_EQ           reduce using rule 72 (atom -> ( ) .)
    OP_GE           reduce using rule 72 (atom -> ( ) .)
    OP_LE           reduce using rule 72 (atom -> ( ) .)
    OP_NE           reduce using rule 72 (atom -> ( ) .)
    OP_NNE          reduce using rule 72 (atom -> ( ) .)
    TAG_IN          reduce using rule 72 (atom -> ( ) .)
    TAG_NOT         reduce using rule 72 (atom -> ( ) .)
    TAG_IS          reduce using rule 72 (atom -> ( ) .)
    TAG_AND         reduce using rule 72 (atom -> ( ) .)
    TAG_IF          reduce using rule 72 (atom -> ( ) .)
    TAG_OR          reduce using rule 72 (atom -> ( ) .)
    ,               reduce using rule 72 (atom -> ( ) .)
    NEWLINE         reduce using rule 72 (atom -> ( ) .)
    ;               reduce using rule 72 (atom -> ( ) .)
    ADD_ASN         reduce using rule 72 (atom -> ( ) .)
    SUB_ASN         reduce using rule 72 (atom -> ( ) .)
    MUL_ASN         reduce using rule 72 (atom -> ( ) .)
    DIV_ASN         reduce using rule 72 (atom -> ( ) .)
    MOD_ASN         reduce using rule 72 (atom -> ( ) .)
    AND_ASN         reduce using rule 72 (atom -> ( ) .)
    OR_ASN          reduce using rule 72 (atom -> ( ) .)
    XOR_ASN         reduce using rule 72 (atom -> ( ) .)
    LSHIFT_ASN      reduce using rule 72 (atom -> ( ) .)
    RSHIFT_ASN      reduce using rule 72 (atom -> ( ) .)
    POW_ASN         reduce using rule 72 (atom -> ( ) .)
    FDIV_ASN        reduce using rule 72 (atom -> ( ) .)
    =               reduce using rule 72 (atom -> ( ) .)
    TAG_FOR         reduce using rule 72 (atom -> ( ) .)
    )               reduce using rule 72 (atom -> ( ) .)
    `               reduce using rule 72 (atom -> ( ) .)
    INDENT          reduce using rule 72 (atom -> ( ) .)
    TAG_DEL         reduce using rule 72 (atom -> ( ) .)
    TAG_PASS        reduce using rule 72 (atom -> ( ) .)
    TAG_GLOBAL      reduce using rule 72 (atom -> ( ) .)
    TAG_EXEC        reduce using rule 72 (atom -> ( ) .)
    TAG_ASSERT      reduce using rule 72 (atom -> ( ) .)
    TAG_DRAW        reduce using rule 72 (atom -> ( ) .)
    TAG_BREAK       reduce using rule 72 (atom -> ( ) .)
    TAG_CONTINUE    reduce using rule 72 (atom -> ( ) .)
    TAG_RETURN      reduce using rule 72 (atom -> ( ) .)
    TAG_RAISE       reduce using rule 72 (atom -> ( ) .)
    TAG_IMPORT      reduce using rule 72 (atom -> ( ) .)
    TAG_FROM        reduce using rule 72 (atom -> ( ) .)
    TAG_YIELD       reduce using rule 72 (atom -> ( ) .)
    TAG_LAMBDA      reduce using rule 72 (atom -> ( ) .)
    ~               reduce using rule 72 (atom -> ( ) .)
    {               reduce using rule 72 (atom -> ( ) .)
    NAME            reduce using rule 72 (atom -> ( ) .)
    NUMBER          reduce using rule 72 (atom -> ( ) .)
    STRING          reduce using rule 72 (atom -> ( ) .)
    ]               reduce using rule 72 (atom -> ( ) .)
    :               reduce using rule 72 (atom -> ( ) .)
    }               reduce using rule 72 (atom -> ( ) .)
    TAG_AS          reduce using rule 72 (atom -> ( ) .)
    TAG_ELSE        reduce using rule 72 (atom -> ( ) .)


state 93

    (101) testlist_comp -> test . comp_for
    (117) testlist_anns -> test .
    (104) comp_for -> . TAG_FOR exprlist TAG_IN or_test
    (105) comp_for -> . TAG_FOR exprlist TAG_IN or_test comp_iter

    ,               reduce using rule 117 (testlist_anns -> test .)
    )               reduce using rule 117 (testlist_anns -> test .)
    TAG_FOR         shift and go to state 200

    comp_for                       shift and go to state 199

state 94

    (73) atom -> ( yield_expr . )

    )               shift and go to state 201


state 95

    (100) testlist_comp -> testlist .

    )               reduce using rule 100 (testlist_comp -> testlist .)


state 96

    (151) varargs_two -> OP_POWER . NAME

    NAME            shift and go to state 202


state 97

    (153) fpdef -> NAME .

    =               reduce using rule 153 (fpdef -> NAME .)
    ,               reduce using rule 153 (fpdef -> NAME .)
    :               reduce using rule 153 (fpdef -> NAME .)
    )               reduce using rule 153 (fpdef -> NAME .)


state 98

    (154) fpdef -> ( . fplist )
    (157) fplist -> . fplist_top
    (158) fplist -> . fplist_top ,
    (155) fplist_top -> . fpdef
    (156) fplist_top -> . fplist_top , fpdef
    (153) fpdef -> . NAME
    (154) fpdef -> . ( fplist )

    NAME            shift and go to state 97
    (               shift and go to state 98

    fplist                         shift and go to state 204
    fplist_top                     shift and go to state 205
    fpdef                          shift and go to state 203

state 99

    (148) varargs_one -> fpdef .
    (149) varargs_one -> fpdef . = test

    ,               reduce using rule 148 (varargs_one -> fpdef .)
    :               reduce using rule 148 (varargs_one -> fpdef .)
    )               reduce using rule 148 (varargs_one -> fpdef .)
    =               shift and go to state 206


state 100

    (150) varargs_two -> * . NAME
    (152) varargs_two -> * . NAME , OP_POWER NAME

    NAME            shift and go to state 207


state 101

    (143) varargslist -> varargs_two .

    :               reduce using rule 143 (varargslist -> varargs_two .)
    )               reduce using rule 143 (varargslist -> varargs_two .)


state 102

    (141) lambdef -> TAG_LAMBDA varargslist . : test

    :               shift and go to state 208


state 103

    (142) varargslist -> varargs_one . , varargs_two
    (144) varargslist -> varargs_one .
    (145) varargslist -> varargs_one . ,
    (146) varargs_one -> varargs_one . , fpdef
    (147) varargs_one -> varargs_one . , fpdef = test

    ,               shift and go to state 209
    :               reduce using rule 144 (varargslist -> varargs_one .)
    )               reduce using rule 144 (varargslist -> varargs_one .)


state 104

    (140) lambdef -> TAG_LAMBDA : . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 210
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 105

    (239) draw_stmt -> TAG_DRAW testlist .

    NEWLINE         reduce using rule 239 (draw_stmt -> TAG_DRAW testlist .)
    ;               reduce using rule 239 (draw_stmt -> TAG_DRAW testlist .)


state 106

    (252) raise_stmt -> TAG_RAISE test .
    (253) raise_stmt -> TAG_RAISE test . , test
    (254) raise_stmt -> TAG_RAISE test . , test , test

    NEWLINE         reduce using rule 252 (raise_stmt -> TAG_RAISE test .)
    ;               reduce using rule 252 (raise_stmt -> TAG_RAISE test .)
    ,               shift and go to state 211


state 107

    (190) for_stmt -> TAG_FOR exprlist . TAG_IN testlist suite
    (191) for_stmt -> TAG_FOR exprlist . TAG_IN testlist suite TAG_ELSE suite
    (18) exprlist -> exprlist . , expr

    TAG_IN          shift and go to state 212
    ,               shift and go to state 213


state 108

    (17) exprlist -> expr .
    (20) expr -> expr . | xor_expr

    TAG_IN          reduce using rule 17 (exprlist -> expr .)
    ,               reduce using rule 17 (exprlist -> expr .)
    NEWLINE         reduce using rule 17 (exprlist -> expr .)
    ;               reduce using rule 17 (exprlist -> expr .)
    |               shift and go to state 137


state 109

    (270) dotted_name -> NAME .

    TAG_AS          reduce using rule 270 (dotted_name -> NAME .)
    .               reduce using rule 270 (dotted_name -> NAME .)
    ,               reduce using rule 270 (dotted_name -> NAME .)
    NEWLINE         reduce using rule 270 (dotted_name -> NAME .)
    ;               reduce using rule 270 (dotted_name -> NAME .)
    (               reduce using rule 270 (dotted_name -> NAME .)
    TAG_IMPORT      reduce using rule 270 (dotted_name -> NAME .)


state 110

    (7) decorator -> @ dotted_name . NEWLINE
    (8) decorator -> @ dotted_name . ( ) NEWLINE
    (9) decorator -> @ dotted_name . ( arglist ) NEWLINE
    (271) dotted_name -> dotted_name . . NAME

    NEWLINE         shift and go to state 215
    (               shift and go to state 214
    .               shift and go to state 216


state 111

    (205) simple_stmt -> simple_stmt ; . small_stmt NEWLINE
    (206) simple_stmt -> simple_stmt ; . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 217
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    expr_stmt                      shift and go to state 23
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    raise_stmt                     shift and go to state 57
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 112

    (230) augassign -> LSHIFT_ASN .

    TAG_YIELD       reduce using rule 230 (augassign -> LSHIFT_ASN .)
    TAG_LAMBDA      reduce using rule 230 (augassign -> LSHIFT_ASN .)
    TAG_NOT         reduce using rule 230 (augassign -> LSHIFT_ASN .)
    +               reduce using rule 230 (augassign -> LSHIFT_ASN .)
    -               reduce using rule 230 (augassign -> LSHIFT_ASN .)
    ~               reduce using rule 230 (augassign -> LSHIFT_ASN .)
    (               reduce using rule 230 (augassign -> LSHIFT_ASN .)
    [               reduce using rule 230 (augassign -> LSHIFT_ASN .)
    {               reduce using rule 230 (augassign -> LSHIFT_ASN .)
    `               reduce using rule 230 (augassign -> LSHIFT_ASN .)
    NAME            reduce using rule 230 (augassign -> LSHIFT_ASN .)
    NUMBER          reduce using rule 230 (augassign -> LSHIFT_ASN .)
    STRING          reduce using rule 230 (augassign -> LSHIFT_ASN .)


state 113

    (229) augassign -> XOR_ASN .

    TAG_YIELD       reduce using rule 229 (augassign -> XOR_ASN .)
    TAG_LAMBDA      reduce using rule 229 (augassign -> XOR_ASN .)
    TAG_NOT         reduce using rule 229 (augassign -> XOR_ASN .)
    +               reduce using rule 229 (augassign -> XOR_ASN .)
    -               reduce using rule 229 (augassign -> XOR_ASN .)
    ~               reduce using rule 229 (augassign -> XOR_ASN .)
    (               reduce using rule 229 (augassign -> XOR_ASN .)
    [               reduce using rule 229 (augassign -> XOR_ASN .)
    {               reduce using rule 229 (augassign -> XOR_ASN .)
    `               reduce using rule 229 (augassign -> XOR_ASN .)
    NAME            reduce using rule 229 (augassign -> XOR_ASN .)
    NUMBER          reduce using rule 229 (augassign -> XOR_ASN .)
    STRING          reduce using rule 229 (augassign -> XOR_ASN .)


state 114

    (224) augassign -> MUL_ASN .

    TAG_YIELD       reduce using rule 224 (augassign -> MUL_ASN .)
    TAG_LAMBDA      reduce using rule 224 (augassign -> MUL_ASN .)
    TAG_NOT         reduce using rule 224 (augassign -> MUL_ASN .)
    +               reduce using rule 224 (augassign -> MUL_ASN .)
    -               reduce using rule 224 (augassign -> MUL_ASN .)
    ~               reduce using rule 224 (augassign -> MUL_ASN .)
    (               reduce using rule 224 (augassign -> MUL_ASN .)
    [               reduce using rule 224 (augassign -> MUL_ASN .)
    {               reduce using rule 224 (augassign -> MUL_ASN .)
    `               reduce using rule 224 (augassign -> MUL_ASN .)
    NAME            reduce using rule 224 (augassign -> MUL_ASN .)
    NUMBER          reduce using rule 224 (augassign -> MUL_ASN .)
    STRING          reduce using rule 224 (augassign -> MUL_ASN .)


state 115

    (227) augassign -> AND_ASN .

    TAG_YIELD       reduce using rule 227 (augassign -> AND_ASN .)
    TAG_LAMBDA      reduce using rule 227 (augassign -> AND_ASN .)
    TAG_NOT         reduce using rule 227 (augassign -> AND_ASN .)
    +               reduce using rule 227 (augassign -> AND_ASN .)
    -               reduce using rule 227 (augassign -> AND_ASN .)
    ~               reduce using rule 227 (augassign -> AND_ASN .)
    (               reduce using rule 227 (augassign -> AND_ASN .)
    [               reduce using rule 227 (augassign -> AND_ASN .)
    {               reduce using rule 227 (augassign -> AND_ASN .)
    `               reduce using rule 227 (augassign -> AND_ASN .)
    NAME            reduce using rule 227 (augassign -> AND_ASN .)
    NUMBER          reduce using rule 227 (augassign -> AND_ASN .)
    STRING          reduce using rule 227 (augassign -> AND_ASN .)


state 116

    (223) augassign -> SUB_ASN .

    TAG_YIELD       reduce using rule 223 (augassign -> SUB_ASN .)
    TAG_LAMBDA      reduce using rule 223 (augassign -> SUB_ASN .)
    TAG_NOT         reduce using rule 223 (augassign -> SUB_ASN .)
    +               reduce using rule 223 (augassign -> SUB_ASN .)
    -               reduce using rule 223 (augassign -> SUB_ASN .)
    ~               reduce using rule 223 (augassign -> SUB_ASN .)
    (               reduce using rule 223 (augassign -> SUB_ASN .)
    [               reduce using rule 223 (augassign -> SUB_ASN .)
    {               reduce using rule 223 (augassign -> SUB_ASN .)
    `               reduce using rule 223 (augassign -> SUB_ASN .)
    NAME            reduce using rule 223 (augassign -> SUB_ASN .)
    NUMBER          reduce using rule 223 (augassign -> SUB_ASN .)
    STRING          reduce using rule 223 (augassign -> SUB_ASN .)


state 117

    (218) expr_stmt -> testlist augassign . yield_expr
    (219) expr_stmt -> testlist augassign . testlist
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 74
    and_expr                       shift and go to state 63
    yield_expr                     shift and go to state 218
    power                          shift and go to state 40
    testlist                       shift and go to state 219
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 118

    (220) expr_stmt -> testlist expr_stmt_bottom .
    (236) expr_stmt_bottom -> expr_stmt_bottom . = yield_expr
    (237) expr_stmt_bottom -> expr_stmt_bottom . = testlist

    NEWLINE         reduce using rule 220 (expr_stmt -> testlist expr_stmt_bottom .)
    ;               reduce using rule 220 (expr_stmt -> testlist expr_stmt_bottom .)
    =               shift and go to state 220


state 119

    (226) augassign -> MOD_ASN .

    TAG_YIELD       reduce using rule 226 (augassign -> MOD_ASN .)
    TAG_LAMBDA      reduce using rule 226 (augassign -> MOD_ASN .)
    TAG_NOT         reduce using rule 226 (augassign -> MOD_ASN .)
    +               reduce using rule 226 (augassign -> MOD_ASN .)
    -               reduce using rule 226 (augassign -> MOD_ASN .)
    ~               reduce using rule 226 (augassign -> MOD_ASN .)
    (               reduce using rule 226 (augassign -> MOD_ASN .)
    [               reduce using rule 226 (augassign -> MOD_ASN .)
    {               reduce using rule 226 (augassign -> MOD_ASN .)
    `               reduce using rule 226 (augassign -> MOD_ASN .)
    NAME            reduce using rule 226 (augassign -> MOD_ASN .)
    NUMBER          reduce using rule 226 (augassign -> MOD_ASN .)
    STRING          reduce using rule 226 (augassign -> MOD_ASN .)


state 120

    (231) augassign -> RSHIFT_ASN .

    TAG_YIELD       reduce using rule 231 (augassign -> RSHIFT_ASN .)
    TAG_LAMBDA      reduce using rule 231 (augassign -> RSHIFT_ASN .)
    TAG_NOT         reduce using rule 231 (augassign -> RSHIFT_ASN .)
    +               reduce using rule 231 (augassign -> RSHIFT_ASN .)
    -               reduce using rule 231 (augassign -> RSHIFT_ASN .)
    ~               reduce using rule 231 (augassign -> RSHIFT_ASN .)
    (               reduce using rule 231 (augassign -> RSHIFT_ASN .)
    [               reduce using rule 231 (augassign -> RSHIFT_ASN .)
    {               reduce using rule 231 (augassign -> RSHIFT_ASN .)
    `               reduce using rule 231 (augassign -> RSHIFT_ASN .)
    NAME            reduce using rule 231 (augassign -> RSHIFT_ASN .)
    NUMBER          reduce using rule 231 (augassign -> RSHIFT_ASN .)
    STRING          reduce using rule 231 (augassign -> RSHIFT_ASN .)


state 121

    (232) augassign -> POW_ASN .

    TAG_YIELD       reduce using rule 232 (augassign -> POW_ASN .)
    TAG_LAMBDA      reduce using rule 232 (augassign -> POW_ASN .)
    TAG_NOT         reduce using rule 232 (augassign -> POW_ASN .)
    +               reduce using rule 232 (augassign -> POW_ASN .)
    -               reduce using rule 232 (augassign -> POW_ASN .)
    ~               reduce using rule 232 (augassign -> POW_ASN .)
    (               reduce using rule 232 (augassign -> POW_ASN .)
    [               reduce using rule 232 (augassign -> POW_ASN .)
    {               reduce using rule 232 (augassign -> POW_ASN .)
    `               reduce using rule 232 (augassign -> POW_ASN .)
    NAME            reduce using rule 232 (augassign -> POW_ASN .)
    NUMBER          reduce using rule 232 (augassign -> POW_ASN .)
    STRING          reduce using rule 232 (augassign -> POW_ASN .)


state 122

    (234) expr_stmt_bottom -> = . yield_expr
    (235) expr_stmt_bottom -> = . testlist
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 74
    and_expr                       shift and go to state 63
    yield_expr                     shift and go to state 221
    power                          shift and go to state 40
    testlist                       shift and go to state 222
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 123

    (228) augassign -> OR_ASN .

    TAG_YIELD       reduce using rule 228 (augassign -> OR_ASN .)
    TAG_LAMBDA      reduce using rule 228 (augassign -> OR_ASN .)
    TAG_NOT         reduce using rule 228 (augassign -> OR_ASN .)
    +               reduce using rule 228 (augassign -> OR_ASN .)
    -               reduce using rule 228 (augassign -> OR_ASN .)
    ~               reduce using rule 228 (augassign -> OR_ASN .)
    (               reduce using rule 228 (augassign -> OR_ASN .)
    [               reduce using rule 228 (augassign -> OR_ASN .)
    {               reduce using rule 228 (augassign -> OR_ASN .)
    `               reduce using rule 228 (augassign -> OR_ASN .)
    NAME            reduce using rule 228 (augassign -> OR_ASN .)
    NUMBER          reduce using rule 228 (augassign -> OR_ASN .)
    STRING          reduce using rule 228 (augassign -> OR_ASN .)


state 124

    (233) augassign -> FDIV_ASN .

    TAG_YIELD       reduce using rule 233 (augassign -> FDIV_ASN .)
    TAG_LAMBDA      reduce using rule 233 (augassign -> FDIV_ASN .)
    TAG_NOT         reduce using rule 233 (augassign -> FDIV_ASN .)
    +               reduce using rule 233 (augassign -> FDIV_ASN .)
    -               reduce using rule 233 (augassign -> FDIV_ASN .)
    ~               reduce using rule 233 (augassign -> FDIV_ASN .)
    (               reduce using rule 233 (augassign -> FDIV_ASN .)
    [               reduce using rule 233 (augassign -> FDIV_ASN .)
    {               reduce using rule 233 (augassign -> FDIV_ASN .)
    `               reduce using rule 233 (augassign -> FDIV_ASN .)
    NAME            reduce using rule 233 (augassign -> FDIV_ASN .)
    NUMBER          reduce using rule 233 (augassign -> FDIV_ASN .)
    STRING          reduce using rule 233 (augassign -> FDIV_ASN .)


state 125

    (222) augassign -> ADD_ASN .

    TAG_YIELD       reduce using rule 222 (augassign -> ADD_ASN .)
    TAG_LAMBDA      reduce using rule 222 (augassign -> ADD_ASN .)
    TAG_NOT         reduce using rule 222 (augassign -> ADD_ASN .)
    +               reduce using rule 222 (augassign -> ADD_ASN .)
    -               reduce using rule 222 (augassign -> ADD_ASN .)
    ~               reduce using rule 222 (augassign -> ADD_ASN .)
    (               reduce using rule 222 (augassign -> ADD_ASN .)
    [               reduce using rule 222 (augassign -> ADD_ASN .)
    {               reduce using rule 222 (augassign -> ADD_ASN .)
    `               reduce using rule 222 (augassign -> ADD_ASN .)
    NAME            reduce using rule 222 (augassign -> ADD_ASN .)
    NUMBER          reduce using rule 222 (augassign -> ADD_ASN .)
    STRING          reduce using rule 222 (augassign -> ADD_ASN .)


state 126

    (225) augassign -> DIV_ASN .

    TAG_YIELD       reduce using rule 225 (augassign -> DIV_ASN .)
    TAG_LAMBDA      reduce using rule 225 (augassign -> DIV_ASN .)
    TAG_NOT         reduce using rule 225 (augassign -> DIV_ASN .)
    +               reduce using rule 225 (augassign -> DIV_ASN .)
    -               reduce using rule 225 (augassign -> DIV_ASN .)
    ~               reduce using rule 225 (augassign -> DIV_ASN .)
    (               reduce using rule 225 (augassign -> DIV_ASN .)
    [               reduce using rule 225 (augassign -> DIV_ASN .)
    {               reduce using rule 225 (augassign -> DIV_ASN .)
    `               reduce using rule 225 (augassign -> DIV_ASN .)
    NAME            reduce using rule 225 (augassign -> DIV_ASN .)
    NUMBER          reduce using rule 225 (augassign -> DIV_ASN .)
    STRING          reduce using rule 225 (augassign -> DIV_ASN .)


state 127

    (86) testlist1 -> test .

    `               reduce using rule 86 (testlist1 -> test .)
    ,               reduce using rule 86 (testlist1 -> test .)


state 128

    (80) atom -> ` testlist1 . `
    (87) testlist1 -> testlist1 . , test

    `               shift and go to state 223
    ,               shift and go to state 224


state 129

    (33) term -> term % . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    factor                         shift and go to state 225
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 130

    (31) term -> term * . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    factor                         shift and go to state 226
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 131

    (32) term -> term / . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    factor                         shift and go to state 227
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 132

    (34) term -> term OP_EXACT_DIVISION . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    factor                         shift and go to state 228
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 133

    (184) if_stmt -> TAG_IF test . suite
    (185) if_stmt -> TAG_IF test . suite TAG_ELSE suite
    (186) if_stmt -> TAG_IF test . suite elif_list
    (187) if_stmt -> TAG_IF test . suite elif_list TAG_ELSE suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 229
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    import_name                    shift and go to state 76
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    expr                           shift and go to state 31
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 134

    (119) test -> or_test TAG_IF . or_test TAG_ELSE test
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 232
    strings                        shift and go to state 82

state 135

    (122) or_test -> or_test TAG_OR . and_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 233
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    strings                        shift and go to state 82

state 136

    (192) try_stmt -> TAG_TRY : . suite TAG_FINALLY : suite
    (193) try_stmt -> TAG_TRY : . suite except_clauses
    (194) try_stmt -> TAG_TRY : . suite except_clauses TAG_ELSE : suite
    (195) try_stmt -> TAG_TRY : . suite except_clauses TAG_FINALLY : suite
    (196) try_stmt -> TAG_TRY : . suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 234
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 137

    (20) expr -> expr | . xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 235
    strings                        shift and go to state 82
    and_expr                       shift and go to state 63

state 138

    (115) testlist -> testlist_anns , .
    (116) testlist_anns -> testlist_anns , . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

  ! shift/reduce conflict for TAG_LAMBDA resolved as shift
  ! shift/reduce conflict for TAG_NOT resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for ` resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    NEWLINE         reduce using rule 115 (testlist -> testlist_anns , .)
    ;               reduce using rule 115 (testlist -> testlist_anns , .)
    ADD_ASN         reduce using rule 115 (testlist -> testlist_anns , .)
    SUB_ASN         reduce using rule 115 (testlist -> testlist_anns , .)
    MUL_ASN         reduce using rule 115 (testlist -> testlist_anns , .)
    DIV_ASN         reduce using rule 115 (testlist -> testlist_anns , .)
    MOD_ASN         reduce using rule 115 (testlist -> testlist_anns , .)
    AND_ASN         reduce using rule 115 (testlist -> testlist_anns , .)
    OR_ASN          reduce using rule 115 (testlist -> testlist_anns , .)
    XOR_ASN         reduce using rule 115 (testlist -> testlist_anns , .)
    LSHIFT_ASN      reduce using rule 115 (testlist -> testlist_anns , .)
    RSHIFT_ASN      reduce using rule 115 (testlist -> testlist_anns , .)
    POW_ASN         reduce using rule 115 (testlist -> testlist_anns , .)
    FDIV_ASN        reduce using rule 115 (testlist -> testlist_anns , .)
    =               reduce using rule 115 (testlist -> testlist_anns , .)
    )               reduce using rule 115 (testlist -> testlist_anns , .)
    ]               reduce using rule 115 (testlist -> testlist_anns , .)
    INDENT          reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_DEL         reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_PASS        reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_GLOBAL      reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_EXEC        reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_ASSERT      reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_DRAW        reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_BREAK       reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_CONTINUE    reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_RETURN      reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_RAISE       reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_IMPORT      reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_FROM        reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_YIELD       reduce using rule 115 (testlist -> testlist_anns , .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

  ! TAG_LAMBDA      [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! TAG_NOT         [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! +               [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! -               [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! ~               [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! (               [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! [               [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! {               [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! `               [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! NAME            [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! NUMBER          [ reduce using rule 115 (testlist -> testlist_anns , .) ]
  ! STRING          [ reduce using rule 115 (testlist -> testlist_anns , .) ]

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 236
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 139

    (188) while_stmt -> TAG_WHILE test . suite
    (189) while_stmt -> TAG_WHILE test . suite TAG_ELSE suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 237
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 140

    (12) decorated -> decorators classdef .

    DEDENT          reduce using rule 12 (decorated -> decorators classdef .)
    TAG_IF          reduce using rule 12 (decorated -> decorators classdef .)
    TAG_WHILE       reduce using rule 12 (decorated -> decorators classdef .)
    TAG_FOR         reduce using rule 12 (decorated -> decorators classdef .)
    TAG_TRY         reduce using rule 12 (decorated -> decorators classdef .)
    TAG_DEF         reduce using rule 12 (decorated -> decorators classdef .)
    TAG_CLASS       reduce using rule 12 (decorated -> decorators classdef .)
    TAG_DEL         reduce using rule 12 (decorated -> decorators classdef .)
    TAG_PASS        reduce using rule 12 (decorated -> decorators classdef .)
    TAG_GLOBAL      reduce using rule 12 (decorated -> decorators classdef .)
    TAG_EXEC        reduce using rule 12 (decorated -> decorators classdef .)
    TAG_ASSERT      reduce using rule 12 (decorated -> decorators classdef .)
    TAG_DRAW        reduce using rule 12 (decorated -> decorators classdef .)
    TAG_BREAK       reduce using rule 12 (decorated -> decorators classdef .)
    TAG_CONTINUE    reduce using rule 12 (decorated -> decorators classdef .)
    TAG_RETURN      reduce using rule 12 (decorated -> decorators classdef .)
    TAG_RAISE       reduce using rule 12 (decorated -> decorators classdef .)
    TAG_IMPORT      reduce using rule 12 (decorated -> decorators classdef .)
    TAG_FROM        reduce using rule 12 (decorated -> decorators classdef .)
    @               reduce using rule 12 (decorated -> decorators classdef .)
    TAG_YIELD       reduce using rule 12 (decorated -> decorators classdef .)
    TAG_LAMBDA      reduce using rule 12 (decorated -> decorators classdef .)
    TAG_NOT         reduce using rule 12 (decorated -> decorators classdef .)
    +               reduce using rule 12 (decorated -> decorators classdef .)
    -               reduce using rule 12 (decorated -> decorators classdef .)
    ~               reduce using rule 12 (decorated -> decorators classdef .)
    (               reduce using rule 12 (decorated -> decorators classdef .)
    [               reduce using rule 12 (decorated -> decorators classdef .)
    {               reduce using rule 12 (decorated -> decorators classdef .)
    `               reduce using rule 12 (decorated -> decorators classdef .)
    NAME            reduce using rule 12 (decorated -> decorators classdef .)
    NUMBER          reduce using rule 12 (decorated -> decorators classdef .)
    STRING          reduce using rule 12 (decorated -> decorators classdef .)
    ENDMARKER       reduce using rule 12 (decorated -> decorators classdef .)
    NEWLINE         reduce using rule 12 (decorated -> decorators classdef .)


state 141

    (13) decorated -> decorators funcdef .

    DEDENT          reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_IF          reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_WHILE       reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_FOR         reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_TRY         reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_DEF         reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_CLASS       reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_DEL         reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_PASS        reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_GLOBAL      reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_EXEC        reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_ASSERT      reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_DRAW        reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_BREAK       reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_CONTINUE    reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_RETURN      reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_RAISE       reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_IMPORT      reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_FROM        reduce using rule 13 (decorated -> decorators funcdef .)
    @               reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_YIELD       reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_LAMBDA      reduce using rule 13 (decorated -> decorators funcdef .)
    TAG_NOT         reduce using rule 13 (decorated -> decorators funcdef .)
    +               reduce using rule 13 (decorated -> decorators funcdef .)
    -               reduce using rule 13 (decorated -> decorators funcdef .)
    ~               reduce using rule 13 (decorated -> decorators funcdef .)
    (               reduce using rule 13 (decorated -> decorators funcdef .)
    [               reduce using rule 13 (decorated -> decorators funcdef .)
    {               reduce using rule 13 (decorated -> decorators funcdef .)
    `               reduce using rule 13 (decorated -> decorators funcdef .)
    NAME            reduce using rule 13 (decorated -> decorators funcdef .)
    NUMBER          reduce using rule 13 (decorated -> decorators funcdef .)
    STRING          reduce using rule 13 (decorated -> decorators funcdef .)
    ENDMARKER       reduce using rule 13 (decorated -> decorators funcdef .)
    NEWLINE         reduce using rule 13 (decorated -> decorators funcdef .)


state 142

    (11) decorators -> decorators decorator .

    TAG_CLASS       reduce using rule 11 (decorators -> decorators decorator .)
    TAG_DEF         reduce using rule 11 (decorators -> decorators decorator .)
    @               reduce using rule 11 (decorators -> decorators decorator .)


state 143

    (279) assert_stmt -> TAG_ASSERT test .
    (280) assert_stmt -> TAG_ASSERT test . , test

    NEWLINE         reduce using rule 279 (assert_stmt -> TAG_ASSERT test .)
    ;               reduce using rule 279 (assert_stmt -> TAG_ASSERT test .)
    ,               shift and go to state 238


state 144

    (76) atom -> [ listmaker . ]

    ]               shift and go to state 239


state 145

    (88) listmaker -> testlist .

    ]               reduce using rule 88 (listmaker -> testlist .)


state 146

    (89) listmaker -> test . list_for
    (117) testlist_anns -> test .
    (110) list_for -> . TAG_FOR exprlist TAG_IN testlist_safe
    (111) list_for -> . TAG_FOR exprlist TAG_IN testlist_safe list_iter

    ,               reduce using rule 117 (testlist_anns -> test .)
    ]               reduce using rule 117 (testlist_anns -> test .)
    TAG_FOR         shift and go to state 241

    list_for                       shift and go to state 240

state 147

    (75) atom -> [ ] .

    OP_POWER        reduce using rule 75 (atom -> [ ] .)
    (               reduce using rule 75 (atom -> [ ] .)
    [               reduce using rule 75 (atom -> [ ] .)
    .               reduce using rule 75 (atom -> [ ] .)
    *               reduce using rule 75 (atom -> [ ] .)
    /               reduce using rule 75 (atom -> [ ] .)
    %               reduce using rule 75 (atom -> [ ] .)
    OP_EXACT_DIVISION reduce using rule 75 (atom -> [ ] .)
    +               reduce using rule 75 (atom -> [ ] .)
    -               reduce using rule 75 (atom -> [ ] .)
    OP_LEFT_SHIFT   reduce using rule 75 (atom -> [ ] .)
    OP_RIGHT_SHIFT  reduce using rule 75 (atom -> [ ] .)
    &               reduce using rule 75 (atom -> [ ] .)
    ^               reduce using rule 75 (atom -> [ ] .)
    |               reduce using rule 75 (atom -> [ ] .)
    >               reduce using rule 75 (atom -> [ ] .)
    <               reduce using rule 75 (atom -> [ ] .)
    OP_EQ           reduce using rule 75 (atom -> [ ] .)
    OP_GE           reduce using rule 75 (atom -> [ ] .)
    OP_LE           reduce using rule 75 (atom -> [ ] .)
    OP_NE           reduce using rule 75 (atom -> [ ] .)
    OP_NNE          reduce using rule 75 (atom -> [ ] .)
    TAG_IN          reduce using rule 75 (atom -> [ ] .)
    TAG_NOT         reduce using rule 75 (atom -> [ ] .)
    TAG_IS          reduce using rule 75 (atom -> [ ] .)
    TAG_AND         reduce using rule 75 (atom -> [ ] .)
    TAG_IF          reduce using rule 75 (atom -> [ ] .)
    TAG_OR          reduce using rule 75 (atom -> [ ] .)
    ,               reduce using rule 75 (atom -> [ ] .)
    NEWLINE         reduce using rule 75 (atom -> [ ] .)
    ;               reduce using rule 75 (atom -> [ ] .)
    ADD_ASN         reduce using rule 75 (atom -> [ ] .)
    SUB_ASN         reduce using rule 75 (atom -> [ ] .)
    MUL_ASN         reduce using rule 75 (atom -> [ ] .)
    DIV_ASN         reduce using rule 75 (atom -> [ ] .)
    MOD_ASN         reduce using rule 75 (atom -> [ ] .)
    AND_ASN         reduce using rule 75 (atom -> [ ] .)
    OR_ASN          reduce using rule 75 (atom -> [ ] .)
    XOR_ASN         reduce using rule 75 (atom -> [ ] .)
    LSHIFT_ASN      reduce using rule 75 (atom -> [ ] .)
    RSHIFT_ASN      reduce using rule 75 (atom -> [ ] .)
    POW_ASN         reduce using rule 75 (atom -> [ ] .)
    FDIV_ASN        reduce using rule 75 (atom -> [ ] .)
    =               reduce using rule 75 (atom -> [ ] .)
    TAG_FOR         reduce using rule 75 (atom -> [ ] .)
    )               reduce using rule 75 (atom -> [ ] .)
    `               reduce using rule 75 (atom -> [ ] .)
    INDENT          reduce using rule 75 (atom -> [ ] .)
    TAG_DEL         reduce using rule 75 (atom -> [ ] .)
    TAG_PASS        reduce using rule 75 (atom -> [ ] .)
    TAG_GLOBAL      reduce using rule 75 (atom -> [ ] .)
    TAG_EXEC        reduce using rule 75 (atom -> [ ] .)
    TAG_ASSERT      reduce using rule 75 (atom -> [ ] .)
    TAG_DRAW        reduce using rule 75 (atom -> [ ] .)
    TAG_BREAK       reduce using rule 75 (atom -> [ ] .)
    TAG_CONTINUE    reduce using rule 75 (atom -> [ ] .)
    TAG_RETURN      reduce using rule 75 (atom -> [ ] .)
    TAG_RAISE       reduce using rule 75 (atom -> [ ] .)
    TAG_IMPORT      reduce using rule 75 (atom -> [ ] .)
    TAG_FROM        reduce using rule 75 (atom -> [ ] .)
    TAG_YIELD       reduce using rule 75 (atom -> [ ] .)
    TAG_LAMBDA      reduce using rule 75 (atom -> [ ] .)
    ~               reduce using rule 75 (atom -> [ ] .)
    {               reduce using rule 75 (atom -> [ ] .)
    NAME            reduce using rule 75 (atom -> [ ] .)
    NUMBER          reduce using rule 75 (atom -> [ ] .)
    STRING          reduce using rule 75 (atom -> [ ] .)
    ]               reduce using rule 75 (atom -> [ ] .)
    :               reduce using rule 75 (atom -> [ ] .)
    }               reduce using rule 75 (atom -> [ ] .)
    TAG_AS          reduce using rule 75 (atom -> [ ] .)
    TAG_ELSE        reduce using rule 75 (atom -> [ ] .)


state 148

    (128) comparison -> comparison comp_op . expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 242
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    term                           shift and go to state 26
    strings                        shift and go to state 82
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 52
    and_expr                       shift and go to state 63

state 149

    (131) comp_op -> OP_EQ .

    +               reduce using rule 131 (comp_op -> OP_EQ .)
    -               reduce using rule 131 (comp_op -> OP_EQ .)
    ~               reduce using rule 131 (comp_op -> OP_EQ .)
    (               reduce using rule 131 (comp_op -> OP_EQ .)
    [               reduce using rule 131 (comp_op -> OP_EQ .)
    {               reduce using rule 131 (comp_op -> OP_EQ .)
    `               reduce using rule 131 (comp_op -> OP_EQ .)
    NAME            reduce using rule 131 (comp_op -> OP_EQ .)
    NUMBER          reduce using rule 131 (comp_op -> OP_EQ .)
    STRING          reduce using rule 131 (comp_op -> OP_EQ .)


state 150

    (136) comp_op -> TAG_IN .

    +               reduce using rule 136 (comp_op -> TAG_IN .)
    -               reduce using rule 136 (comp_op -> TAG_IN .)
    ~               reduce using rule 136 (comp_op -> TAG_IN .)
    (               reduce using rule 136 (comp_op -> TAG_IN .)
    [               reduce using rule 136 (comp_op -> TAG_IN .)
    {               reduce using rule 136 (comp_op -> TAG_IN .)
    `               reduce using rule 136 (comp_op -> TAG_IN .)
    NAME            reduce using rule 136 (comp_op -> TAG_IN .)
    NUMBER          reduce using rule 136 (comp_op -> TAG_IN .)
    STRING          reduce using rule 136 (comp_op -> TAG_IN .)


state 151

    (137) comp_op -> TAG_NOT . TAG_IN

    TAG_IN          shift and go to state 243


state 152

    (135) comp_op -> OP_NNE .

    +               reduce using rule 135 (comp_op -> OP_NNE .)
    -               reduce using rule 135 (comp_op -> OP_NNE .)
    ~               reduce using rule 135 (comp_op -> OP_NNE .)
    (               reduce using rule 135 (comp_op -> OP_NNE .)
    [               reduce using rule 135 (comp_op -> OP_NNE .)
    {               reduce using rule 135 (comp_op -> OP_NNE .)
    `               reduce using rule 135 (comp_op -> OP_NNE .)
    NAME            reduce using rule 135 (comp_op -> OP_NNE .)
    NUMBER          reduce using rule 135 (comp_op -> OP_NNE .)
    STRING          reduce using rule 135 (comp_op -> OP_NNE .)


state 153

    (134) comp_op -> OP_NE .

    +               reduce using rule 134 (comp_op -> OP_NE .)
    -               reduce using rule 134 (comp_op -> OP_NE .)
    ~               reduce using rule 134 (comp_op -> OP_NE .)
    (               reduce using rule 134 (comp_op -> OP_NE .)
    [               reduce using rule 134 (comp_op -> OP_NE .)
    {               reduce using rule 134 (comp_op -> OP_NE .)
    `               reduce using rule 134 (comp_op -> OP_NE .)
    NAME            reduce using rule 134 (comp_op -> OP_NE .)
    NUMBER          reduce using rule 134 (comp_op -> OP_NE .)
    STRING          reduce using rule 134 (comp_op -> OP_NE .)


state 154

    (132) comp_op -> OP_GE .

    +               reduce using rule 132 (comp_op -> OP_GE .)
    -               reduce using rule 132 (comp_op -> OP_GE .)
    ~               reduce using rule 132 (comp_op -> OP_GE .)
    (               reduce using rule 132 (comp_op -> OP_GE .)
    [               reduce using rule 132 (comp_op -> OP_GE .)
    {               reduce using rule 132 (comp_op -> OP_GE .)
    `               reduce using rule 132 (comp_op -> OP_GE .)
    NAME            reduce using rule 132 (comp_op -> OP_GE .)
    NUMBER          reduce using rule 132 (comp_op -> OP_GE .)
    STRING          reduce using rule 132 (comp_op -> OP_GE .)


state 155

    (138) comp_op -> TAG_IS .
    (139) comp_op -> TAG_IS . TAG_NOT

    +               reduce using rule 138 (comp_op -> TAG_IS .)
    -               reduce using rule 138 (comp_op -> TAG_IS .)
    ~               reduce using rule 138 (comp_op -> TAG_IS .)
    (               reduce using rule 138 (comp_op -> TAG_IS .)
    [               reduce using rule 138 (comp_op -> TAG_IS .)
    {               reduce using rule 138 (comp_op -> TAG_IS .)
    `               reduce using rule 138 (comp_op -> TAG_IS .)
    NAME            reduce using rule 138 (comp_op -> TAG_IS .)
    NUMBER          reduce using rule 138 (comp_op -> TAG_IS .)
    STRING          reduce using rule 138 (comp_op -> TAG_IS .)
    TAG_NOT         shift and go to state 244


state 156

    (133) comp_op -> OP_LE .

    +               reduce using rule 133 (comp_op -> OP_LE .)
    -               reduce using rule 133 (comp_op -> OP_LE .)
    ~               reduce using rule 133 (comp_op -> OP_LE .)
    (               reduce using rule 133 (comp_op -> OP_LE .)
    [               reduce using rule 133 (comp_op -> OP_LE .)
    {               reduce using rule 133 (comp_op -> OP_LE .)
    `               reduce using rule 133 (comp_op -> OP_LE .)
    NAME            reduce using rule 133 (comp_op -> OP_LE .)
    NUMBER          reduce using rule 133 (comp_op -> OP_LE .)
    STRING          reduce using rule 133 (comp_op -> OP_LE .)


state 157

    (130) comp_op -> < .

    +               reduce using rule 130 (comp_op -> < .)
    -               reduce using rule 130 (comp_op -> < .)
    ~               reduce using rule 130 (comp_op -> < .)
    (               reduce using rule 130 (comp_op -> < .)
    [               reduce using rule 130 (comp_op -> < .)
    {               reduce using rule 130 (comp_op -> < .)
    `               reduce using rule 130 (comp_op -> < .)
    NAME            reduce using rule 130 (comp_op -> < .)
    NUMBER          reduce using rule 130 (comp_op -> < .)
    STRING          reduce using rule 130 (comp_op -> < .)


state 158

    (129) comp_op -> > .

    +               reduce using rule 129 (comp_op -> > .)
    -               reduce using rule 129 (comp_op -> > .)
    ~               reduce using rule 129 (comp_op -> > .)
    (               reduce using rule 129 (comp_op -> > .)
    [               reduce using rule 129 (comp_op -> > .)
    {               reduce using rule 129 (comp_op -> > .)
    `               reduce using rule 129 (comp_op -> > .)
    NAME            reduce using rule 129 (comp_op -> > .)
    NUMBER          reduce using rule 129 (comp_op -> > .)
    STRING          reduce using rule 129 (comp_op -> > .)


state 159

    (29) arith_expr -> arith_expr + . term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 245
    power                          shift and go to state 40
    factor                         shift and go to state 13
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 160

    (30) arith_expr -> arith_expr - . term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 246
    power                          shift and go to state 40
    factor                         shift and go to state 13
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 161

    (257) import_name -> TAG_IMPORT dotted_as_names .
    (268) dotted_as_names -> dotted_as_names . , dotted_as_name

    NEWLINE         reduce using rule 257 (import_name -> TAG_IMPORT dotted_as_names .)
    ;               reduce using rule 257 (import_name -> TAG_IMPORT dotted_as_names .)
    ,               shift and go to state 247


state 162

    (262) dotted_as_name -> dotted_name .
    (263) dotted_as_name -> dotted_name . TAG_AS NAME
    (271) dotted_name -> dotted_name . . NAME

    ,               reduce using rule 262 (dotted_as_name -> dotted_name .)
    NEWLINE         reduce using rule 262 (dotted_as_name -> dotted_name .)
    ;               reduce using rule 262 (dotted_as_name -> dotted_name .)
    TAG_AS          shift and go to state 248
    .               shift and go to state 216


state 163

    (269) dotted_as_names -> dotted_as_name .

    ,               reduce using rule 269 (dotted_as_names -> dotted_as_name .)
    NEWLINE         reduce using rule 269 (dotted_as_names -> dotted_as_name .)
    ;               reduce using rule 269 (dotted_as_names -> dotted_as_name .)


state 164

    (78) atom -> { dictormaker . }

    }               shift and go to state 249


state 165

    (94) dictormaker -> test . : test comp_for
    (99) setmaker -> test . comp_for
    (90) dictormaker_piece -> test . : test
    (95) setmaker_piece -> test .
    (104) comp_for -> . TAG_FOR exprlist TAG_IN or_test
    (105) comp_for -> . TAG_FOR exprlist TAG_IN or_test comp_iter

    :               shift and go to state 251
    ,               reduce using rule 95 (setmaker_piece -> test .)
    }               reduce using rule 95 (setmaker_piece -> test .)
    TAG_FOR         shift and go to state 200

    comp_for                       shift and go to state 250

state 166

    (92) dictormaker -> dictormaker_piece .
    (93) dictormaker -> dictormaker_piece . ,
    (91) dictormaker_piece -> dictormaker_piece . , test : test

    }               reduce using rule 92 (dictormaker -> dictormaker_piece .)
    ,               shift and go to state 252


state 167

    (97) setmaker -> setmaker_piece .
    (98) setmaker -> setmaker_piece . ,
    (96) setmaker_piece -> setmaker_piece . , test

    }               reduce using rule 97 (setmaker -> setmaker_piece .)
    ,               shift and go to state 253


state 168

    (79) atom -> { setmaker . }

    }               shift and go to state 254


state 169

    (77) atom -> { } .

    OP_POWER        reduce using rule 77 (atom -> { } .)
    (               reduce using rule 77 (atom -> { } .)
    [               reduce using rule 77 (atom -> { } .)
    .               reduce using rule 77 (atom -> { } .)
    *               reduce using rule 77 (atom -> { } .)
    /               reduce using rule 77 (atom -> { } .)
    %               reduce using rule 77 (atom -> { } .)
    OP_EXACT_DIVISION reduce using rule 77 (atom -> { } .)
    +               reduce using rule 77 (atom -> { } .)
    -               reduce using rule 77 (atom -> { } .)
    OP_LEFT_SHIFT   reduce using rule 77 (atom -> { } .)
    OP_RIGHT_SHIFT  reduce using rule 77 (atom -> { } .)
    &               reduce using rule 77 (atom -> { } .)
    ^               reduce using rule 77 (atom -> { } .)
    |               reduce using rule 77 (atom -> { } .)
    >               reduce using rule 77 (atom -> { } .)
    <               reduce using rule 77 (atom -> { } .)
    OP_EQ           reduce using rule 77 (atom -> { } .)
    OP_GE           reduce using rule 77 (atom -> { } .)
    OP_LE           reduce using rule 77 (atom -> { } .)
    OP_NE           reduce using rule 77 (atom -> { } .)
    OP_NNE          reduce using rule 77 (atom -> { } .)
    TAG_IN          reduce using rule 77 (atom -> { } .)
    TAG_NOT         reduce using rule 77 (atom -> { } .)
    TAG_IS          reduce using rule 77 (atom -> { } .)
    TAG_AND         reduce using rule 77 (atom -> { } .)
    TAG_IF          reduce using rule 77 (atom -> { } .)
    TAG_OR          reduce using rule 77 (atom -> { } .)
    ,               reduce using rule 77 (atom -> { } .)
    NEWLINE         reduce using rule 77 (atom -> { } .)
    ;               reduce using rule 77 (atom -> { } .)
    ADD_ASN         reduce using rule 77 (atom -> { } .)
    SUB_ASN         reduce using rule 77 (atom -> { } .)
    MUL_ASN         reduce using rule 77 (atom -> { } .)
    DIV_ASN         reduce using rule 77 (atom -> { } .)
    MOD_ASN         reduce using rule 77 (atom -> { } .)
    AND_ASN         reduce using rule 77 (atom -> { } .)
    OR_ASN          reduce using rule 77 (atom -> { } .)
    XOR_ASN         reduce using rule 77 (atom -> { } .)
    LSHIFT_ASN      reduce using rule 77 (atom -> { } .)
    RSHIFT_ASN      reduce using rule 77 (atom -> { } .)
    POW_ASN         reduce using rule 77 (atom -> { } .)
    FDIV_ASN        reduce using rule 77 (atom -> { } .)
    =               reduce using rule 77 (atom -> { } .)
    TAG_FOR         reduce using rule 77 (atom -> { } .)
    )               reduce using rule 77 (atom -> { } .)
    `               reduce using rule 77 (atom -> { } .)
    INDENT          reduce using rule 77 (atom -> { } .)
    TAG_DEL         reduce using rule 77 (atom -> { } .)
    TAG_PASS        reduce using rule 77 (atom -> { } .)
    TAG_GLOBAL      reduce using rule 77 (atom -> { } .)
    TAG_EXEC        reduce using rule 77 (atom -> { } .)
    TAG_ASSERT      reduce using rule 77 (atom -> { } .)
    TAG_DRAW        reduce using rule 77 (atom -> { } .)
    TAG_BREAK       reduce using rule 77 (atom -> { } .)
    TAG_CONTINUE    reduce using rule 77 (atom -> { } .)
    TAG_RETURN      reduce using rule 77 (atom -> { } .)
    TAG_RAISE       reduce using rule 77 (atom -> { } .)
    TAG_IMPORT      reduce using rule 77 (atom -> { } .)
    TAG_FROM        reduce using rule 77 (atom -> { } .)
    TAG_YIELD       reduce using rule 77 (atom -> { } .)
    TAG_LAMBDA      reduce using rule 77 (atom -> { } .)
    ~               reduce using rule 77 (atom -> { } .)
    {               reduce using rule 77 (atom -> { } .)
    NAME            reduce using rule 77 (atom -> { } .)
    NUMBER          reduce using rule 77 (atom -> { } .)
    STRING          reduce using rule 77 (atom -> { } .)
    ]               reduce using rule 77 (atom -> { } .)
    :               reduce using rule 77 (atom -> { } .)
    }               reduce using rule 77 (atom -> { } .)
    TAG_AS          reduce using rule 77 (atom -> { } .)
    TAG_ELSE        reduce using rule 77 (atom -> { } .)


state 170

    (250) return_stmt -> TAG_RETURN testlist .

    NEWLINE         reduce using rule 250 (return_stmt -> TAG_RETURN testlist .)
    ;               reduce using rule 250 (return_stmt -> TAG_RETURN testlist .)


state 171

    (22) xor_expr -> xor_expr ^ . and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    strings                        shift and go to state 82
    and_expr                       shift and go to state 255

state 172

    (258) import_from -> TAG_FROM dotted_name . TAG_IMPORT *
    (259) import_from -> TAG_FROM dotted_name . TAG_IMPORT import_as_names
    (271) dotted_name -> dotted_name . . NAME

    TAG_IMPORT      shift and go to state 256
    .               shift and go to state 216


state 173

    (272) global_stmt -> TAG_GLOBAL namelist .
    (274) namelist -> namelist . , NAME

    NEWLINE         reduce using rule 272 (global_stmt -> TAG_GLOBAL namelist .)
    ;               reduce using rule 272 (global_stmt -> TAG_GLOBAL namelist .)
    ,               shift and go to state 257


state 174

    (273) namelist -> NAME .

    ,               reduce using rule 273 (namelist -> NAME .)
    NEWLINE         reduce using rule 273 (namelist -> NAME .)
    ;               reduce using rule 273 (namelist -> NAME .)


state 175

    (42) power -> atom OP_POWER . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    factor                         shift and go to state 258
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 176

    (46) trailer -> ( . )
    (47) trailer -> ( . arglist )
    (52) arglist -> . arglist_piece
    (53) arglist -> . arglist_piece ,
    (50) arglist_piece -> . argument
    (51) arglist_piece -> . arglist_piece , argument
    (54) argument -> . test
    (55) argument -> . test comp_for
    (56) argument -> . test = test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    )               shift and go to state 262
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    argument                       shift and go to state 259
    arglist_piece                  shift and go to state 260
    not_test                       shift and go to state 68
    arglist                        shift and go to state 261
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 263
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 177

    (49) trailer -> . . NAME

    NAME            shift and go to state 264


state 178

    (41) power -> atom trailers .
    (43) power -> atom trailers . OP_POWER factor
    (44) trailers -> trailers . trailer
    (46) trailer -> . ( )
    (47) trailer -> . ( arglist )
    (48) trailer -> . [ subscriptlist ]
    (49) trailer -> . . NAME

  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for [ resolved as shift
    *               reduce using rule 41 (power -> atom trailers .)
    /               reduce using rule 41 (power -> atom trailers .)
    %               reduce using rule 41 (power -> atom trailers .)
    OP_EXACT_DIVISION reduce using rule 41 (power -> atom trailers .)
    +               reduce using rule 41 (power -> atom trailers .)
    -               reduce using rule 41 (power -> atom trailers .)
    OP_LEFT_SHIFT   reduce using rule 41 (power -> atom trailers .)
    OP_RIGHT_SHIFT  reduce using rule 41 (power -> atom trailers .)
    &               reduce using rule 41 (power -> atom trailers .)
    ^               reduce using rule 41 (power -> atom trailers .)
    |               reduce using rule 41 (power -> atom trailers .)
    >               reduce using rule 41 (power -> atom trailers .)
    <               reduce using rule 41 (power -> atom trailers .)
    OP_EQ           reduce using rule 41 (power -> atom trailers .)
    OP_GE           reduce using rule 41 (power -> atom trailers .)
    OP_LE           reduce using rule 41 (power -> atom trailers .)
    OP_NE           reduce using rule 41 (power -> atom trailers .)
    OP_NNE          reduce using rule 41 (power -> atom trailers .)
    TAG_IN          reduce using rule 41 (power -> atom trailers .)
    TAG_NOT         reduce using rule 41 (power -> atom trailers .)
    TAG_IS          reduce using rule 41 (power -> atom trailers .)
    TAG_AND         reduce using rule 41 (power -> atom trailers .)
    TAG_IF          reduce using rule 41 (power -> atom trailers .)
    TAG_OR          reduce using rule 41 (power -> atom trailers .)
    :               reduce using rule 41 (power -> atom trailers .)
    ]               reduce using rule 41 (power -> atom trailers .)
    ,               reduce using rule 41 (power -> atom trailers .)
    ADD_ASN         reduce using rule 41 (power -> atom trailers .)
    SUB_ASN         reduce using rule 41 (power -> atom trailers .)
    MUL_ASN         reduce using rule 41 (power -> atom trailers .)
    DIV_ASN         reduce using rule 41 (power -> atom trailers .)
    MOD_ASN         reduce using rule 41 (power -> atom trailers .)
    AND_ASN         reduce using rule 41 (power -> atom trailers .)
    OR_ASN          reduce using rule 41 (power -> atom trailers .)
    XOR_ASN         reduce using rule 41 (power -> atom trailers .)
    LSHIFT_ASN      reduce using rule 41 (power -> atom trailers .)
    RSHIFT_ASN      reduce using rule 41 (power -> atom trailers .)
    POW_ASN         reduce using rule 41 (power -> atom trailers .)
    FDIV_ASN        reduce using rule 41 (power -> atom trailers .)
    =               reduce using rule 41 (power -> atom trailers .)
    NEWLINE         reduce using rule 41 (power -> atom trailers .)
    ;               reduce using rule 41 (power -> atom trailers .)
    INDENT          reduce using rule 41 (power -> atom trailers .)
    TAG_DEL         reduce using rule 41 (power -> atom trailers .)
    TAG_PASS        reduce using rule 41 (power -> atom trailers .)
    TAG_GLOBAL      reduce using rule 41 (power -> atom trailers .)
    TAG_EXEC        reduce using rule 41 (power -> atom trailers .)
    TAG_ASSERT      reduce using rule 41 (power -> atom trailers .)
    TAG_DRAW        reduce using rule 41 (power -> atom trailers .)
    TAG_BREAK       reduce using rule 41 (power -> atom trailers .)
    TAG_CONTINUE    reduce using rule 41 (power -> atom trailers .)
    TAG_RETURN      reduce using rule 41 (power -> atom trailers .)
    TAG_RAISE       reduce using rule 41 (power -> atom trailers .)
    TAG_IMPORT      reduce using rule 41 (power -> atom trailers .)
    TAG_FROM        reduce using rule 41 (power -> atom trailers .)
    TAG_YIELD       reduce using rule 41 (power -> atom trailers .)
    TAG_LAMBDA      reduce using rule 41 (power -> atom trailers .)
    ~               reduce using rule 41 (power -> atom trailers .)
    {               reduce using rule 41 (power -> atom trailers .)
    `               reduce using rule 41 (power -> atom trailers .)
    NAME            reduce using rule 41 (power -> atom trailers .)
    NUMBER          reduce using rule 41 (power -> atom trailers .)
    STRING          reduce using rule 41 (power -> atom trailers .)
    TAG_FOR         reduce using rule 41 (power -> atom trailers .)
    )               reduce using rule 41 (power -> atom trailers .)
    }               reduce using rule 41 (power -> atom trailers .)
    TAG_AS          reduce using rule 41 (power -> atom trailers .)
    TAG_ELSE        reduce using rule 41 (power -> atom trailers .)
    OP_POWER        shift and go to state 265
    (               shift and go to state 176
    [               shift and go to state 179
    .               shift and go to state 177

  ! (               [ reduce using rule 41 (power -> atom trailers .) ]
  ! [               [ reduce using rule 41 (power -> atom trailers .) ]

    trailer                        shift and go to state 266

state 179

    (48) trailer -> [ . subscriptlist ]
    (57) subscriptlist -> . subscriptlist , subscript
    (58) subscriptlist -> . subscriptlist ,
    (59) subscriptlist -> . subscript
    (60) subscript -> . . . .
    (61) subscript -> . test
    (62) subscript -> . :
    (63) subscript -> . test :
    (64) subscript -> . : test
    (65) subscript -> . test : test
    (66) subscript -> . : sliceop
    (67) subscript -> . test : sliceop
    (68) subscript -> . : test sliceop
    (69) subscript -> . test : test sliceop
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    .               shift and go to state 267
    :               shift and go to state 270
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 268
    subscript                      shift and go to state 269
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    subscriptlist                  shift and go to state 271
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 180

    (45) trailers -> trailer .

    OP_POWER        reduce using rule 45 (trailers -> trailer .)
    (               reduce using rule 45 (trailers -> trailer .)
    [               reduce using rule 45 (trailers -> trailer .)
    .               reduce using rule 45 (trailers -> trailer .)
    *               reduce using rule 45 (trailers -> trailer .)
    /               reduce using rule 45 (trailers -> trailer .)
    %               reduce using rule 45 (trailers -> trailer .)
    OP_EXACT_DIVISION reduce using rule 45 (trailers -> trailer .)
    +               reduce using rule 45 (trailers -> trailer .)
    -               reduce using rule 45 (trailers -> trailer .)
    OP_LEFT_SHIFT   reduce using rule 45 (trailers -> trailer .)
    OP_RIGHT_SHIFT  reduce using rule 45 (trailers -> trailer .)
    &               reduce using rule 45 (trailers -> trailer .)
    ^               reduce using rule 45 (trailers -> trailer .)
    |               reduce using rule 45 (trailers -> trailer .)
    >               reduce using rule 45 (trailers -> trailer .)
    <               reduce using rule 45 (trailers -> trailer .)
    OP_EQ           reduce using rule 45 (trailers -> trailer .)
    OP_GE           reduce using rule 45 (trailers -> trailer .)
    OP_LE           reduce using rule 45 (trailers -> trailer .)
    OP_NE           reduce using rule 45 (trailers -> trailer .)
    OP_NNE          reduce using rule 45 (trailers -> trailer .)
    TAG_IN          reduce using rule 45 (trailers -> trailer .)
    TAG_NOT         reduce using rule 45 (trailers -> trailer .)
    TAG_IS          reduce using rule 45 (trailers -> trailer .)
    TAG_AND         reduce using rule 45 (trailers -> trailer .)
    TAG_IF          reduce using rule 45 (trailers -> trailer .)
    TAG_OR          reduce using rule 45 (trailers -> trailer .)
    ,               reduce using rule 45 (trailers -> trailer .)
    ADD_ASN         reduce using rule 45 (trailers -> trailer .)
    SUB_ASN         reduce using rule 45 (trailers -> trailer .)
    MUL_ASN         reduce using rule 45 (trailers -> trailer .)
    DIV_ASN         reduce using rule 45 (trailers -> trailer .)
    MOD_ASN         reduce using rule 45 (trailers -> trailer .)
    AND_ASN         reduce using rule 45 (trailers -> trailer .)
    OR_ASN          reduce using rule 45 (trailers -> trailer .)
    XOR_ASN         reduce using rule 45 (trailers -> trailer .)
    LSHIFT_ASN      reduce using rule 45 (trailers -> trailer .)
    RSHIFT_ASN      reduce using rule 45 (trailers -> trailer .)
    POW_ASN         reduce using rule 45 (trailers -> trailer .)
    FDIV_ASN        reduce using rule 45 (trailers -> trailer .)
    =               reduce using rule 45 (trailers -> trailer .)
    NEWLINE         reduce using rule 45 (trailers -> trailer .)
    ;               reduce using rule 45 (trailers -> trailer .)
    TAG_FOR         reduce using rule 45 (trailers -> trailer .)
    )               reduce using rule 45 (trailers -> trailer .)
    `               reduce using rule 45 (trailers -> trailer .)
    INDENT          reduce using rule 45 (trailers -> trailer .)
    TAG_DEL         reduce using rule 45 (trailers -> trailer .)
    TAG_PASS        reduce using rule 45 (trailers -> trailer .)
    TAG_GLOBAL      reduce using rule 45 (trailers -> trailer .)
    TAG_EXEC        reduce using rule 45 (trailers -> trailer .)
    TAG_ASSERT      reduce using rule 45 (trailers -> trailer .)
    TAG_DRAW        reduce using rule 45 (trailers -> trailer .)
    TAG_BREAK       reduce using rule 45 (trailers -> trailer .)
    TAG_CONTINUE    reduce using rule 45 (trailers -> trailer .)
    TAG_RETURN      reduce using rule 45 (trailers -> trailer .)
    TAG_RAISE       reduce using rule 45 (trailers -> trailer .)
    TAG_IMPORT      reduce using rule 45 (trailers -> trailer .)
    TAG_FROM        reduce using rule 45 (trailers -> trailer .)
    TAG_YIELD       reduce using rule 45 (trailers -> trailer .)
    TAG_LAMBDA      reduce using rule 45 (trailers -> trailer .)
    ~               reduce using rule 45 (trailers -> trailer .)
    {               reduce using rule 45 (trailers -> trailer .)
    NAME            reduce using rule 45 (trailers -> trailer .)
    NUMBER          reduce using rule 45 (trailers -> trailer .)
    STRING          reduce using rule 45 (trailers -> trailer .)
    ]               reduce using rule 45 (trailers -> trailer .)
    :               reduce using rule 45 (trailers -> trailer .)
    }               reduce using rule 45 (trailers -> trailer .)
    TAG_AS          reduce using rule 45 (trailers -> trailer .)
    TAG_ELSE        reduce using rule 45 (trailers -> trailer .)


state 181

    (14) classdef -> TAG_CLASS NAME . : suite
    (15) classdef -> TAG_CLASS NAME . ( testlist ) : suite
    (16) classdef -> TAG_CLASS NAME . ( ) : suite

    :               shift and go to state 273
    (               shift and go to state 272


state 182

    (240) del_stmt -> TAG_DEL exprlist .
    (18) exprlist -> exprlist . , expr

    NEWLINE         reduce using rule 240 (del_stmt -> TAG_DEL exprlist .)
    ;               reduce using rule 240 (del_stmt -> TAG_DEL exprlist .)
    ,               shift and go to state 213


state 183

    (160) funcdef -> TAG_DEF NAME . parameters suite
    (161) parameters -> . ( )
    (162) parameters -> . ( varargslist )

    (               shift and go to state 275

    parameters                     shift and go to state 274

state 184

    (24) and_expr -> and_expr & . shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    power                          shift and go to state 40
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 276
    factor                         shift and go to state 13
    strings                        shift and go to state 82

state 185

    (38) factor -> ~ factor .

    *               reduce using rule 38 (factor -> ~ factor .)
    /               reduce using rule 38 (factor -> ~ factor .)
    %               reduce using rule 38 (factor -> ~ factor .)
    OP_EXACT_DIVISION reduce using rule 38 (factor -> ~ factor .)
    +               reduce using rule 38 (factor -> ~ factor .)
    -               reduce using rule 38 (factor -> ~ factor .)
    OP_LEFT_SHIFT   reduce using rule 38 (factor -> ~ factor .)
    OP_RIGHT_SHIFT  reduce using rule 38 (factor -> ~ factor .)
    &               reduce using rule 38 (factor -> ~ factor .)
    ^               reduce using rule 38 (factor -> ~ factor .)
    |               reduce using rule 38 (factor -> ~ factor .)
    >               reduce using rule 38 (factor -> ~ factor .)
    <               reduce using rule 38 (factor -> ~ factor .)
    OP_EQ           reduce using rule 38 (factor -> ~ factor .)
    OP_GE           reduce using rule 38 (factor -> ~ factor .)
    OP_LE           reduce using rule 38 (factor -> ~ factor .)
    OP_NE           reduce using rule 38 (factor -> ~ factor .)
    OP_NNE          reduce using rule 38 (factor -> ~ factor .)
    TAG_IN          reduce using rule 38 (factor -> ~ factor .)
    TAG_NOT         reduce using rule 38 (factor -> ~ factor .)
    TAG_IS          reduce using rule 38 (factor -> ~ factor .)
    TAG_AND         reduce using rule 38 (factor -> ~ factor .)
    TAG_IF          reduce using rule 38 (factor -> ~ factor .)
    TAG_OR          reduce using rule 38 (factor -> ~ factor .)
    ,               reduce using rule 38 (factor -> ~ factor .)
    ADD_ASN         reduce using rule 38 (factor -> ~ factor .)
    SUB_ASN         reduce using rule 38 (factor -> ~ factor .)
    MUL_ASN         reduce using rule 38 (factor -> ~ factor .)
    DIV_ASN         reduce using rule 38 (factor -> ~ factor .)
    MOD_ASN         reduce using rule 38 (factor -> ~ factor .)
    AND_ASN         reduce using rule 38 (factor -> ~ factor .)
    OR_ASN          reduce using rule 38 (factor -> ~ factor .)
    XOR_ASN         reduce using rule 38 (factor -> ~ factor .)
    LSHIFT_ASN      reduce using rule 38 (factor -> ~ factor .)
    RSHIFT_ASN      reduce using rule 38 (factor -> ~ factor .)
    POW_ASN         reduce using rule 38 (factor -> ~ factor .)
    FDIV_ASN        reduce using rule 38 (factor -> ~ factor .)
    =               reduce using rule 38 (factor -> ~ factor .)
    NEWLINE         reduce using rule 38 (factor -> ~ factor .)
    ;               reduce using rule 38 (factor -> ~ factor .)
    TAG_FOR         reduce using rule 38 (factor -> ~ factor .)
    )               reduce using rule 38 (factor -> ~ factor .)
    `               reduce using rule 38 (factor -> ~ factor .)
    INDENT          reduce using rule 38 (factor -> ~ factor .)
    TAG_DEL         reduce using rule 38 (factor -> ~ factor .)
    TAG_PASS        reduce using rule 38 (factor -> ~ factor .)
    TAG_GLOBAL      reduce using rule 38 (factor -> ~ factor .)
    TAG_EXEC        reduce using rule 38 (factor -> ~ factor .)
    TAG_ASSERT      reduce using rule 38 (factor -> ~ factor .)
    TAG_DRAW        reduce using rule 38 (factor -> ~ factor .)
    TAG_BREAK       reduce using rule 38 (factor -> ~ factor .)
    TAG_CONTINUE    reduce using rule 38 (factor -> ~ factor .)
    TAG_RETURN      reduce using rule 38 (factor -> ~ factor .)
    TAG_RAISE       reduce using rule 38 (factor -> ~ factor .)
    TAG_IMPORT      reduce using rule 38 (factor -> ~ factor .)
    TAG_FROM        reduce using rule 38 (factor -> ~ factor .)
    TAG_YIELD       reduce using rule 38 (factor -> ~ factor .)
    TAG_LAMBDA      reduce using rule 38 (factor -> ~ factor .)
    ~               reduce using rule 38 (factor -> ~ factor .)
    (               reduce using rule 38 (factor -> ~ factor .)
    [               reduce using rule 38 (factor -> ~ factor .)
    {               reduce using rule 38 (factor -> ~ factor .)
    NAME            reduce using rule 38 (factor -> ~ factor .)
    NUMBER          reduce using rule 38 (factor -> ~ factor .)
    STRING          reduce using rule 38 (factor -> ~ factor .)
    ]               reduce using rule 38 (factor -> ~ factor .)
    :               reduce using rule 38 (factor -> ~ factor .)
    }               reduce using rule 38 (factor -> ~ factor .)
    TAG_AS          reduce using rule 38 (factor -> ~ factor .)
    TAG_ELSE        reduce using rule 38 (factor -> ~ factor .)


state 186

    (37) factor -> - factor .

    *               reduce using rule 37 (factor -> - factor .)
    /               reduce using rule 37 (factor -> - factor .)
    %               reduce using rule 37 (factor -> - factor .)
    OP_EXACT_DIVISION reduce using rule 37 (factor -> - factor .)
    +               reduce using rule 37 (factor -> - factor .)
    -               reduce using rule 37 (factor -> - factor .)
    OP_LEFT_SHIFT   reduce using rule 37 (factor -> - factor .)
    OP_RIGHT_SHIFT  reduce using rule 37 (factor -> - factor .)
    &               reduce using rule 37 (factor -> - factor .)
    ^               reduce using rule 37 (factor -> - factor .)
    |               reduce using rule 37 (factor -> - factor .)
    >               reduce using rule 37 (factor -> - factor .)
    <               reduce using rule 37 (factor -> - factor .)
    OP_EQ           reduce using rule 37 (factor -> - factor .)
    OP_GE           reduce using rule 37 (factor -> - factor .)
    OP_LE           reduce using rule 37 (factor -> - factor .)
    OP_NE           reduce using rule 37 (factor -> - factor .)
    OP_NNE          reduce using rule 37 (factor -> - factor .)
    TAG_IN          reduce using rule 37 (factor -> - factor .)
    TAG_NOT         reduce using rule 37 (factor -> - factor .)
    TAG_IS          reduce using rule 37 (factor -> - factor .)
    TAG_AND         reduce using rule 37 (factor -> - factor .)
    TAG_IF          reduce using rule 37 (factor -> - factor .)
    TAG_OR          reduce using rule 37 (factor -> - factor .)
    ,               reduce using rule 37 (factor -> - factor .)
    ADD_ASN         reduce using rule 37 (factor -> - factor .)
    SUB_ASN         reduce using rule 37 (factor -> - factor .)
    MUL_ASN         reduce using rule 37 (factor -> - factor .)
    DIV_ASN         reduce using rule 37 (factor -> - factor .)
    MOD_ASN         reduce using rule 37 (factor -> - factor .)
    AND_ASN         reduce using rule 37 (factor -> - factor .)
    OR_ASN          reduce using rule 37 (factor -> - factor .)
    XOR_ASN         reduce using rule 37 (factor -> - factor .)
    LSHIFT_ASN      reduce using rule 37 (factor -> - factor .)
    RSHIFT_ASN      reduce using rule 37 (factor -> - factor .)
    POW_ASN         reduce using rule 37 (factor -> - factor .)
    FDIV_ASN        reduce using rule 37 (factor -> - factor .)
    =               reduce using rule 37 (factor -> - factor .)
    NEWLINE         reduce using rule 37 (factor -> - factor .)
    ;               reduce using rule 37 (factor -> - factor .)
    TAG_FOR         reduce using rule 37 (factor -> - factor .)
    )               reduce using rule 37 (factor -> - factor .)
    `               reduce using rule 37 (factor -> - factor .)
    INDENT          reduce using rule 37 (factor -> - factor .)
    TAG_DEL         reduce using rule 37 (factor -> - factor .)
    TAG_PASS        reduce using rule 37 (factor -> - factor .)
    TAG_GLOBAL      reduce using rule 37 (factor -> - factor .)
    TAG_EXEC        reduce using rule 37 (factor -> - factor .)
    TAG_ASSERT      reduce using rule 37 (factor -> - factor .)
    TAG_DRAW        reduce using rule 37 (factor -> - factor .)
    TAG_BREAK       reduce using rule 37 (factor -> - factor .)
    TAG_CONTINUE    reduce using rule 37 (factor -> - factor .)
    TAG_RETURN      reduce using rule 37 (factor -> - factor .)
    TAG_RAISE       reduce using rule 37 (factor -> - factor .)
    TAG_IMPORT      reduce using rule 37 (factor -> - factor .)
    TAG_FROM        reduce using rule 37 (factor -> - factor .)
    TAG_YIELD       reduce using rule 37 (factor -> - factor .)
    TAG_LAMBDA      reduce using rule 37 (factor -> - factor .)
    ~               reduce using rule 37 (factor -> - factor .)
    (               reduce using rule 37 (factor -> - factor .)
    [               reduce using rule 37 (factor -> - factor .)
    {               reduce using rule 37 (factor -> - factor .)
    NAME            reduce using rule 37 (factor -> - factor .)
    NUMBER          reduce using rule 37 (factor -> - factor .)
    STRING          reduce using rule 37 (factor -> - factor .)
    ]               reduce using rule 37 (factor -> - factor .)
    :               reduce using rule 37 (factor -> - factor .)
    }               reduce using rule 37 (factor -> - factor .)
    TAG_AS          reduce using rule 37 (factor -> - factor .)
    TAG_ELSE        reduce using rule 37 (factor -> - factor .)


state 187

    (124) and_test -> and_test TAG_AND . not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    comparison                     shift and go to state 45
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    term                           shift and go to state 26
    strings                        shift and go to state 82
    not_test                       shift and go to state 277
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 52
    and_expr                       shift and go to state 63

state 188

    (2) file_input -> file_content ENDMARKER .

    $end            reduce using rule 2 (file_input -> file_content ENDMARKER .)


state 189

    (3) file_content -> file_content NEWLINE .

    ENDMARKER       reduce using rule 3 (file_content -> file_content NEWLINE .)
    NEWLINE         reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_IF          reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_WHILE       reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_FOR         reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_TRY         reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_DEF         reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_CLASS       reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_DEL         reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_PASS        reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_GLOBAL      reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_EXEC        reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_ASSERT      reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_DRAW        reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_BREAK       reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_CONTINUE    reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_RETURN      reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_RAISE       reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_IMPORT      reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_FROM        reduce using rule 3 (file_content -> file_content NEWLINE .)
    @               reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_YIELD       reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_LAMBDA      reduce using rule 3 (file_content -> file_content NEWLINE .)
    TAG_NOT         reduce using rule 3 (file_content -> file_content NEWLINE .)
    +               reduce using rule 3 (file_content -> file_content NEWLINE .)
    -               reduce using rule 3 (file_content -> file_content NEWLINE .)
    ~               reduce using rule 3 (file_content -> file_content NEWLINE .)
    (               reduce using rule 3 (file_content -> file_content NEWLINE .)
    [               reduce using rule 3 (file_content -> file_content NEWLINE .)
    {               reduce using rule 3 (file_content -> file_content NEWLINE .)
    `               reduce using rule 3 (file_content -> file_content NEWLINE .)
    NAME            reduce using rule 3 (file_content -> file_content NEWLINE .)
    NUMBER          reduce using rule 3 (file_content -> file_content NEWLINE .)
    STRING          reduce using rule 3 (file_content -> file_content NEWLINE .)


state 190

    (4) file_content -> file_content stmt .

    ENDMARKER       reduce using rule 4 (file_content -> file_content stmt .)
    NEWLINE         reduce using rule 4 (file_content -> file_content stmt .)
    TAG_IF          reduce using rule 4 (file_content -> file_content stmt .)
    TAG_WHILE       reduce using rule 4 (file_content -> file_content stmt .)
    TAG_FOR         reduce using rule 4 (file_content -> file_content stmt .)
    TAG_TRY         reduce using rule 4 (file_content -> file_content stmt .)
    TAG_DEF         reduce using rule 4 (file_content -> file_content stmt .)
    TAG_CLASS       reduce using rule 4 (file_content -> file_content stmt .)
    TAG_DEL         reduce using rule 4 (file_content -> file_content stmt .)
    TAG_PASS        reduce using rule 4 (file_content -> file_content stmt .)
    TAG_GLOBAL      reduce using rule 4 (file_content -> file_content stmt .)
    TAG_EXEC        reduce using rule 4 (file_content -> file_content stmt .)
    TAG_ASSERT      reduce using rule 4 (file_content -> file_content stmt .)
    TAG_DRAW        reduce using rule 4 (file_content -> file_content stmt .)
    TAG_BREAK       reduce using rule 4 (file_content -> file_content stmt .)
    TAG_CONTINUE    reduce using rule 4 (file_content -> file_content stmt .)
    TAG_RETURN      reduce using rule 4 (file_content -> file_content stmt .)
    TAG_RAISE       reduce using rule 4 (file_content -> file_content stmt .)
    TAG_IMPORT      reduce using rule 4 (file_content -> file_content stmt .)
    TAG_FROM        reduce using rule 4 (file_content -> file_content stmt .)
    @               reduce using rule 4 (file_content -> file_content stmt .)
    TAG_YIELD       reduce using rule 4 (file_content -> file_content stmt .)
    TAG_LAMBDA      reduce using rule 4 (file_content -> file_content stmt .)
    TAG_NOT         reduce using rule 4 (file_content -> file_content stmt .)
    +               reduce using rule 4 (file_content -> file_content stmt .)
    -               reduce using rule 4 (file_content -> file_content stmt .)
    ~               reduce using rule 4 (file_content -> file_content stmt .)
    (               reduce using rule 4 (file_content -> file_content stmt .)
    [               reduce using rule 4 (file_content -> file_content stmt .)
    {               reduce using rule 4 (file_content -> file_content stmt .)
    `               reduce using rule 4 (file_content -> file_content stmt .)
    NAME            reduce using rule 4 (file_content -> file_content stmt .)
    NUMBER          reduce using rule 4 (file_content -> file_content stmt .)
    STRING          reduce using rule 4 (file_content -> file_content stmt .)


state 191

    (282) yield_expr -> TAG_YIELD testlist .

    NEWLINE         reduce using rule 282 (yield_expr -> TAG_YIELD testlist .)
    ;               reduce using rule 282 (yield_expr -> TAG_YIELD testlist .)
    =               reduce using rule 282 (yield_expr -> TAG_YIELD testlist .)
    )               reduce using rule 282 (yield_expr -> TAG_YIELD testlist .)


state 192

    (84) strings -> strings STRING .

    STRING          reduce using rule 84 (strings -> strings STRING .)
    OP_POWER        reduce using rule 84 (strings -> strings STRING .)
    (               reduce using rule 84 (strings -> strings STRING .)
    [               reduce using rule 84 (strings -> strings STRING .)
    .               reduce using rule 84 (strings -> strings STRING .)
    *               reduce using rule 84 (strings -> strings STRING .)
    /               reduce using rule 84 (strings -> strings STRING .)
    %               reduce using rule 84 (strings -> strings STRING .)
    OP_EXACT_DIVISION reduce using rule 84 (strings -> strings STRING .)
    +               reduce using rule 84 (strings -> strings STRING .)
    -               reduce using rule 84 (strings -> strings STRING .)
    OP_LEFT_SHIFT   reduce using rule 84 (strings -> strings STRING .)
    OP_RIGHT_SHIFT  reduce using rule 84 (strings -> strings STRING .)
    &               reduce using rule 84 (strings -> strings STRING .)
    ^               reduce using rule 84 (strings -> strings STRING .)
    |               reduce using rule 84 (strings -> strings STRING .)
    >               reduce using rule 84 (strings -> strings STRING .)
    <               reduce using rule 84 (strings -> strings STRING .)
    OP_EQ           reduce using rule 84 (strings -> strings STRING .)
    OP_GE           reduce using rule 84 (strings -> strings STRING .)
    OP_LE           reduce using rule 84 (strings -> strings STRING .)
    OP_NE           reduce using rule 84 (strings -> strings STRING .)
    OP_NNE          reduce using rule 84 (strings -> strings STRING .)
    TAG_IN          reduce using rule 84 (strings -> strings STRING .)
    TAG_NOT         reduce using rule 84 (strings -> strings STRING .)
    TAG_IS          reduce using rule 84 (strings -> strings STRING .)
    TAG_AND         reduce using rule 84 (strings -> strings STRING .)
    TAG_IF          reduce using rule 84 (strings -> strings STRING .)
    TAG_OR          reduce using rule 84 (strings -> strings STRING .)
    ,               reduce using rule 84 (strings -> strings STRING .)
    ADD_ASN         reduce using rule 84 (strings -> strings STRING .)
    SUB_ASN         reduce using rule 84 (strings -> strings STRING .)
    MUL_ASN         reduce using rule 84 (strings -> strings STRING .)
    DIV_ASN         reduce using rule 84 (strings -> strings STRING .)
    MOD_ASN         reduce using rule 84 (strings -> strings STRING .)
    AND_ASN         reduce using rule 84 (strings -> strings STRING .)
    OR_ASN          reduce using rule 84 (strings -> strings STRING .)
    XOR_ASN         reduce using rule 84 (strings -> strings STRING .)
    LSHIFT_ASN      reduce using rule 84 (strings -> strings STRING .)
    RSHIFT_ASN      reduce using rule 84 (strings -> strings STRING .)
    POW_ASN         reduce using rule 84 (strings -> strings STRING .)
    FDIV_ASN        reduce using rule 84 (strings -> strings STRING .)
    =               reduce using rule 84 (strings -> strings STRING .)
    NEWLINE         reduce using rule 84 (strings -> strings STRING .)
    ;               reduce using rule 84 (strings -> strings STRING .)
    INDENT          reduce using rule 84 (strings -> strings STRING .)
    TAG_DEL         reduce using rule 84 (strings -> strings STRING .)
    TAG_PASS        reduce using rule 84 (strings -> strings STRING .)
    TAG_GLOBAL      reduce using rule 84 (strings -> strings STRING .)
    TAG_EXEC        reduce using rule 84 (strings -> strings STRING .)
    TAG_ASSERT      reduce using rule 84 (strings -> strings STRING .)
    TAG_DRAW        reduce using rule 84 (strings -> strings STRING .)
    TAG_BREAK       reduce using rule 84 (strings -> strings STRING .)
    TAG_CONTINUE    reduce using rule 84 (strings -> strings STRING .)
    TAG_RETURN      reduce using rule 84 (strings -> strings STRING .)
    TAG_RAISE       reduce using rule 84 (strings -> strings STRING .)
    TAG_IMPORT      reduce using rule 84 (strings -> strings STRING .)
    TAG_FROM        reduce using rule 84 (strings -> strings STRING .)
    TAG_YIELD       reduce using rule 84 (strings -> strings STRING .)
    TAG_LAMBDA      reduce using rule 84 (strings -> strings STRING .)
    ~               reduce using rule 84 (strings -> strings STRING .)
    {               reduce using rule 84 (strings -> strings STRING .)
    `               reduce using rule 84 (strings -> strings STRING .)
    NAME            reduce using rule 84 (strings -> strings STRING .)
    NUMBER          reduce using rule 84 (strings -> strings STRING .)
    TAG_FOR         reduce using rule 84 (strings -> strings STRING .)
    ]               reduce using rule 84 (strings -> strings STRING .)
    }               reduce using rule 84 (strings -> strings STRING .)
    :               reduce using rule 84 (strings -> strings STRING .)
    )               reduce using rule 84 (strings -> strings STRING .)
    TAG_AS          reduce using rule 84 (strings -> strings STRING .)
    TAG_ELSE        reduce using rule 84 (strings -> strings STRING .)


state 193

    (36) factor -> + factor .

    *               reduce using rule 36 (factor -> + factor .)
    /               reduce using rule 36 (factor -> + factor .)
    %               reduce using rule 36 (factor -> + factor .)
    OP_EXACT_DIVISION reduce using rule 36 (factor -> + factor .)
    +               reduce using rule 36 (factor -> + factor .)
    -               reduce using rule 36 (factor -> + factor .)
    OP_LEFT_SHIFT   reduce using rule 36 (factor -> + factor .)
    OP_RIGHT_SHIFT  reduce using rule 36 (factor -> + factor .)
    &               reduce using rule 36 (factor -> + factor .)
    ^               reduce using rule 36 (factor -> + factor .)
    |               reduce using rule 36 (factor -> + factor .)
    >               reduce using rule 36 (factor -> + factor .)
    <               reduce using rule 36 (factor -> + factor .)
    OP_EQ           reduce using rule 36 (factor -> + factor .)
    OP_GE           reduce using rule 36 (factor -> + factor .)
    OP_LE           reduce using rule 36 (factor -> + factor .)
    OP_NE           reduce using rule 36 (factor -> + factor .)
    OP_NNE          reduce using rule 36 (factor -> + factor .)
    TAG_IN          reduce using rule 36 (factor -> + factor .)
    TAG_NOT         reduce using rule 36 (factor -> + factor .)
    TAG_IS          reduce using rule 36 (factor -> + factor .)
    TAG_AND         reduce using rule 36 (factor -> + factor .)
    TAG_IF          reduce using rule 36 (factor -> + factor .)
    TAG_OR          reduce using rule 36 (factor -> + factor .)
    ,               reduce using rule 36 (factor -> + factor .)
    ADD_ASN         reduce using rule 36 (factor -> + factor .)
    SUB_ASN         reduce using rule 36 (factor -> + factor .)
    MUL_ASN         reduce using rule 36 (factor -> + factor .)
    DIV_ASN         reduce using rule 36 (factor -> + factor .)
    MOD_ASN         reduce using rule 36 (factor -> + factor .)
    AND_ASN         reduce using rule 36 (factor -> + factor .)
    OR_ASN          reduce using rule 36 (factor -> + factor .)
    XOR_ASN         reduce using rule 36 (factor -> + factor .)
    LSHIFT_ASN      reduce using rule 36 (factor -> + factor .)
    RSHIFT_ASN      reduce using rule 36 (factor -> + factor .)
    POW_ASN         reduce using rule 36 (factor -> + factor .)
    FDIV_ASN        reduce using rule 36 (factor -> + factor .)
    =               reduce using rule 36 (factor -> + factor .)
    NEWLINE         reduce using rule 36 (factor -> + factor .)
    ;               reduce using rule 36 (factor -> + factor .)
    TAG_FOR         reduce using rule 36 (factor -> + factor .)
    )               reduce using rule 36 (factor -> + factor .)
    `               reduce using rule 36 (factor -> + factor .)
    INDENT          reduce using rule 36 (factor -> + factor .)
    TAG_DEL         reduce using rule 36 (factor -> + factor .)
    TAG_PASS        reduce using rule 36 (factor -> + factor .)
    TAG_GLOBAL      reduce using rule 36 (factor -> + factor .)
    TAG_EXEC        reduce using rule 36 (factor -> + factor .)
    TAG_ASSERT      reduce using rule 36 (factor -> + factor .)
    TAG_DRAW        reduce using rule 36 (factor -> + factor .)
    TAG_BREAK       reduce using rule 36 (factor -> + factor .)
    TAG_CONTINUE    reduce using rule 36 (factor -> + factor .)
    TAG_RETURN      reduce using rule 36 (factor -> + factor .)
    TAG_RAISE       reduce using rule 36 (factor -> + factor .)
    TAG_IMPORT      reduce using rule 36 (factor -> + factor .)
    TAG_FROM        reduce using rule 36 (factor -> + factor .)
    TAG_YIELD       reduce using rule 36 (factor -> + factor .)
    TAG_LAMBDA      reduce using rule 36 (factor -> + factor .)
    ~               reduce using rule 36 (factor -> + factor .)
    (               reduce using rule 36 (factor -> + factor .)
    [               reduce using rule 36 (factor -> + factor .)
    {               reduce using rule 36 (factor -> + factor .)
    NAME            reduce using rule 36 (factor -> + factor .)
    NUMBER          reduce using rule 36 (factor -> + factor .)
    STRING          reduce using rule 36 (factor -> + factor .)
    ]               reduce using rule 36 (factor -> + factor .)
    :               reduce using rule 36 (factor -> + factor .)
    }               reduce using rule 36 (factor -> + factor .)
    TAG_AS          reduce using rule 36 (factor -> + factor .)
    TAG_ELSE        reduce using rule 36 (factor -> + factor .)


state 194

    (208) simple_stmt -> small_stmt ; NEWLINE .

    ;               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_ELSE        reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    ENDMARKER       reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    NEWLINE         reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_IF          reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_WHILE       reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_FOR         reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_TRY         reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_DEF         reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_CLASS       reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_DEL         reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_PASS        reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_GLOBAL      reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_EXEC        reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_ASSERT      reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_DRAW        reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_BREAK       reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_CONTINUE    reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_RETURN      reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_RAISE       reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_IMPORT      reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_FROM        reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    @               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_YIELD       reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_LAMBDA      reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_NOT         reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    +               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    -               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    ~               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    (               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    [               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    {               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    `               reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    NAME            reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    NUMBER          reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    STRING          reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    DEDENT          reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_ELIF        reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_FINALLY     reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)
    TAG_EXCEPT      reduce using rule 208 (simple_stmt -> small_stmt ; NEWLINE .)


state 195

    (27) shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .
    (29) arith_expr -> arith_expr . + term
    (30) arith_expr -> arith_expr . - term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    OP_LEFT_SHIFT   reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    OP_RIGHT_SHIFT  reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    &               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    ^               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    |               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    >               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    <               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    OP_EQ           reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    OP_GE           reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    OP_LE           reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    OP_NE           reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    OP_NNE          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_IN          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_NOT         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_IS          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_AND         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_IF          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_OR          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    ,               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    ADD_ASN         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    SUB_ASN         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    MUL_ASN         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    DIV_ASN         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    MOD_ASN         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    AND_ASN         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    OR_ASN          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    XOR_ASN         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    LSHIFT_ASN      reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    RSHIFT_ASN      reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    POW_ASN         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    FDIV_ASN        reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    =               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    NEWLINE         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    ;               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    :               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    )               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_FOR         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    `               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    INDENT          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_DEL         reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_PASS        reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_GLOBAL      reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_EXEC        reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_ASSERT      reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_DRAW        reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_BREAK       reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_CONTINUE    reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_RETURN      reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_RAISE       reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_IMPORT      reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_FROM        reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_YIELD       reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_LAMBDA      reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    ~               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    (               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    [               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    {               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    NAME            reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    NUMBER          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    STRING          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    ]               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    }               reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_AS          reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    TAG_ELSE        reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .)
    +               shift and go to state 159
    -               shift and go to state 160

  ! +               [ reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .) ]
  ! -               [ reduce using rule 27 (shift_expr -> shift_expr OP_RIGHT_SHIFT arith_expr .) ]


state 196

    (26) shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .
    (29) arith_expr -> arith_expr . + term
    (30) arith_expr -> arith_expr . - term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
    OP_LEFT_SHIFT   reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    OP_RIGHT_SHIFT  reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    &               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    ^               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    |               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    >               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    <               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    OP_EQ           reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    OP_GE           reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    OP_LE           reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    OP_NE           reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    OP_NNE          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_IN          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_NOT         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_IS          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_AND         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_IF          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_OR          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    ,               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    ADD_ASN         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    SUB_ASN         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    MUL_ASN         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    DIV_ASN         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    MOD_ASN         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    AND_ASN         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    OR_ASN          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    XOR_ASN         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    LSHIFT_ASN      reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    RSHIFT_ASN      reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    POW_ASN         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    FDIV_ASN        reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    =               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    NEWLINE         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    ;               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    :               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    )               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_FOR         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    `               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    INDENT          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_DEL         reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_PASS        reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_GLOBAL      reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_EXEC        reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_ASSERT      reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_DRAW        reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_BREAK       reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_CONTINUE    reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_RETURN      reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_RAISE       reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_IMPORT      reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_FROM        reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_YIELD       reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_LAMBDA      reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    ~               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    (               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    [               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    {               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    NAME            reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    NUMBER          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    STRING          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    ]               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    }               reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_AS          reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    TAG_ELSE        reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .)
    +               shift and go to state 159
    -               shift and go to state 160

  ! +               [ reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .) ]
  ! -               [ reduce using rule 26 (shift_expr -> shift_expr OP_LEFT_SHIFT arith_expr .) ]


state 197

    (277) exec_stmt -> TAG_EXEC expr TAG_IN . test
    (278) exec_stmt -> TAG_EXEC expr TAG_IN . test , test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 278
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 198

    (74) atom -> ( testlist_comp ) .

    OP_POWER        reduce using rule 74 (atom -> ( testlist_comp ) .)
    (               reduce using rule 74 (atom -> ( testlist_comp ) .)
    [               reduce using rule 74 (atom -> ( testlist_comp ) .)
    .               reduce using rule 74 (atom -> ( testlist_comp ) .)
    *               reduce using rule 74 (atom -> ( testlist_comp ) .)
    /               reduce using rule 74 (atom -> ( testlist_comp ) .)
    %               reduce using rule 74 (atom -> ( testlist_comp ) .)
    OP_EXACT_DIVISION reduce using rule 74 (atom -> ( testlist_comp ) .)
    +               reduce using rule 74 (atom -> ( testlist_comp ) .)
    -               reduce using rule 74 (atom -> ( testlist_comp ) .)
    OP_LEFT_SHIFT   reduce using rule 74 (atom -> ( testlist_comp ) .)
    OP_RIGHT_SHIFT  reduce using rule 74 (atom -> ( testlist_comp ) .)
    &               reduce using rule 74 (atom -> ( testlist_comp ) .)
    ^               reduce using rule 74 (atom -> ( testlist_comp ) .)
    |               reduce using rule 74 (atom -> ( testlist_comp ) .)
    >               reduce using rule 74 (atom -> ( testlist_comp ) .)
    <               reduce using rule 74 (atom -> ( testlist_comp ) .)
    OP_EQ           reduce using rule 74 (atom -> ( testlist_comp ) .)
    OP_GE           reduce using rule 74 (atom -> ( testlist_comp ) .)
    OP_LE           reduce using rule 74 (atom -> ( testlist_comp ) .)
    OP_NE           reduce using rule 74 (atom -> ( testlist_comp ) .)
    OP_NNE          reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_IN          reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_NOT         reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_IS          reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_AND         reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_IF          reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_OR          reduce using rule 74 (atom -> ( testlist_comp ) .)
    ,               reduce using rule 74 (atom -> ( testlist_comp ) .)
    NEWLINE         reduce using rule 74 (atom -> ( testlist_comp ) .)
    ;               reduce using rule 74 (atom -> ( testlist_comp ) .)
    ADD_ASN         reduce using rule 74 (atom -> ( testlist_comp ) .)
    SUB_ASN         reduce using rule 74 (atom -> ( testlist_comp ) .)
    MUL_ASN         reduce using rule 74 (atom -> ( testlist_comp ) .)
    DIV_ASN         reduce using rule 74 (atom -> ( testlist_comp ) .)
    MOD_ASN         reduce using rule 74 (atom -> ( testlist_comp ) .)
    AND_ASN         reduce using rule 74 (atom -> ( testlist_comp ) .)
    OR_ASN          reduce using rule 74 (atom -> ( testlist_comp ) .)
    XOR_ASN         reduce using rule 74 (atom -> ( testlist_comp ) .)
    LSHIFT_ASN      reduce using rule 74 (atom -> ( testlist_comp ) .)
    RSHIFT_ASN      reduce using rule 74 (atom -> ( testlist_comp ) .)
    POW_ASN         reduce using rule 74 (atom -> ( testlist_comp ) .)
    FDIV_ASN        reduce using rule 74 (atom -> ( testlist_comp ) .)
    =               reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_FOR         reduce using rule 74 (atom -> ( testlist_comp ) .)
    )               reduce using rule 74 (atom -> ( testlist_comp ) .)
    `               reduce using rule 74 (atom -> ( testlist_comp ) .)
    INDENT          reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_DEL         reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_PASS        reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_GLOBAL      reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_EXEC        reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_ASSERT      reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_DRAW        reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_BREAK       reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_CONTINUE    reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_RETURN      reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_RAISE       reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_IMPORT      reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_FROM        reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_YIELD       reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_LAMBDA      reduce using rule 74 (atom -> ( testlist_comp ) .)
    ~               reduce using rule 74 (atom -> ( testlist_comp ) .)
    {               reduce using rule 74 (atom -> ( testlist_comp ) .)
    NAME            reduce using rule 74 (atom -> ( testlist_comp ) .)
    NUMBER          reduce using rule 74 (atom -> ( testlist_comp ) .)
    STRING          reduce using rule 74 (atom -> ( testlist_comp ) .)
    ]               reduce using rule 74 (atom -> ( testlist_comp ) .)
    :               reduce using rule 74 (atom -> ( testlist_comp ) .)
    }               reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_AS          reduce using rule 74 (atom -> ( testlist_comp ) .)
    TAG_ELSE        reduce using rule 74 (atom -> ( testlist_comp ) .)


state 199

    (101) testlist_comp -> test comp_for .

    )               reduce using rule 101 (testlist_comp -> test comp_for .)


state 200

    (104) comp_for -> TAG_FOR . exprlist TAG_IN or_test
    (105) comp_for -> TAG_FOR . exprlist TAG_IN or_test comp_iter
    (17) exprlist -> . expr
    (18) exprlist -> . exprlist , expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    xor_expr                       shift and go to state 52
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 108
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    strings                        shift and go to state 82
    factor                         shift and go to state 13
    exprlist                       shift and go to state 279
    and_expr                       shift and go to state 63

state 201

    (73) atom -> ( yield_expr ) .

    OP_POWER        reduce using rule 73 (atom -> ( yield_expr ) .)
    (               reduce using rule 73 (atom -> ( yield_expr ) .)
    [               reduce using rule 73 (atom -> ( yield_expr ) .)
    .               reduce using rule 73 (atom -> ( yield_expr ) .)
    *               reduce using rule 73 (atom -> ( yield_expr ) .)
    /               reduce using rule 73 (atom -> ( yield_expr ) .)
    %               reduce using rule 73 (atom -> ( yield_expr ) .)
    OP_EXACT_DIVISION reduce using rule 73 (atom -> ( yield_expr ) .)
    +               reduce using rule 73 (atom -> ( yield_expr ) .)
    -               reduce using rule 73 (atom -> ( yield_expr ) .)
    OP_LEFT_SHIFT   reduce using rule 73 (atom -> ( yield_expr ) .)
    OP_RIGHT_SHIFT  reduce using rule 73 (atom -> ( yield_expr ) .)
    &               reduce using rule 73 (atom -> ( yield_expr ) .)
    ^               reduce using rule 73 (atom -> ( yield_expr ) .)
    |               reduce using rule 73 (atom -> ( yield_expr ) .)
    >               reduce using rule 73 (atom -> ( yield_expr ) .)
    <               reduce using rule 73 (atom -> ( yield_expr ) .)
    OP_EQ           reduce using rule 73 (atom -> ( yield_expr ) .)
    OP_GE           reduce using rule 73 (atom -> ( yield_expr ) .)
    OP_LE           reduce using rule 73 (atom -> ( yield_expr ) .)
    OP_NE           reduce using rule 73 (atom -> ( yield_expr ) .)
    OP_NNE          reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_IN          reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_NOT         reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_IS          reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_AND         reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_IF          reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_OR          reduce using rule 73 (atom -> ( yield_expr ) .)
    ,               reduce using rule 73 (atom -> ( yield_expr ) .)
    NEWLINE         reduce using rule 73 (atom -> ( yield_expr ) .)
    ;               reduce using rule 73 (atom -> ( yield_expr ) .)
    ADD_ASN         reduce using rule 73 (atom -> ( yield_expr ) .)
    SUB_ASN         reduce using rule 73 (atom -> ( yield_expr ) .)
    MUL_ASN         reduce using rule 73 (atom -> ( yield_expr ) .)
    DIV_ASN         reduce using rule 73 (atom -> ( yield_expr ) .)
    MOD_ASN         reduce using rule 73 (atom -> ( yield_expr ) .)
    AND_ASN         reduce using rule 73 (atom -> ( yield_expr ) .)
    OR_ASN          reduce using rule 73 (atom -> ( yield_expr ) .)
    XOR_ASN         reduce using rule 73 (atom -> ( yield_expr ) .)
    LSHIFT_ASN      reduce using rule 73 (atom -> ( yield_expr ) .)
    RSHIFT_ASN      reduce using rule 73 (atom -> ( yield_expr ) .)
    POW_ASN         reduce using rule 73 (atom -> ( yield_expr ) .)
    FDIV_ASN        reduce using rule 73 (atom -> ( yield_expr ) .)
    =               reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_FOR         reduce using rule 73 (atom -> ( yield_expr ) .)
    )               reduce using rule 73 (atom -> ( yield_expr ) .)
    `               reduce using rule 73 (atom -> ( yield_expr ) .)
    INDENT          reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_DEL         reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_PASS        reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_GLOBAL      reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_EXEC        reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_ASSERT      reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_DRAW        reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_BREAK       reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_CONTINUE    reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_RETURN      reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_RAISE       reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_IMPORT      reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_FROM        reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_YIELD       reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_LAMBDA      reduce using rule 73 (atom -> ( yield_expr ) .)
    ~               reduce using rule 73 (atom -> ( yield_expr ) .)
    {               reduce using rule 73 (atom -> ( yield_expr ) .)
    NAME            reduce using rule 73 (atom -> ( yield_expr ) .)
    NUMBER          reduce using rule 73 (atom -> ( yield_expr ) .)
    STRING          reduce using rule 73 (atom -> ( yield_expr ) .)
    ]               reduce using rule 73 (atom -> ( yield_expr ) .)
    :               reduce using rule 73 (atom -> ( yield_expr ) .)
    }               reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_AS          reduce using rule 73 (atom -> ( yield_expr ) .)
    TAG_ELSE        reduce using rule 73 (atom -> ( yield_expr ) .)


state 202

    (151) varargs_two -> OP_POWER NAME .

    :               reduce using rule 151 (varargs_two -> OP_POWER NAME .)
    )               reduce using rule 151 (varargs_two -> OP_POWER NAME .)


state 203

    (155) fplist_top -> fpdef .

    ,               reduce using rule 155 (fplist_top -> fpdef .)
    )               reduce using rule 155 (fplist_top -> fpdef .)


state 204

    (154) fpdef -> ( fplist . )

    )               shift and go to state 280


state 205

    (157) fplist -> fplist_top .
    (158) fplist -> fplist_top . ,
    (156) fplist_top -> fplist_top . , fpdef

    )               reduce using rule 157 (fplist -> fplist_top .)
    ,               shift and go to state 281


state 206

    (149) varargs_one -> fpdef = . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 282
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 207

    (150) varargs_two -> * NAME .
    (152) varargs_two -> * NAME . , OP_POWER NAME

    :               reduce using rule 150 (varargs_two -> * NAME .)
    )               reduce using rule 150 (varargs_two -> * NAME .)
    ,               shift and go to state 283


state 208

    (141) lambdef -> TAG_LAMBDA varargslist : . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 284
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 209

    (142) varargslist -> varargs_one , . varargs_two
    (145) varargslist -> varargs_one , .
    (146) varargs_one -> varargs_one , . fpdef
    (147) varargs_one -> varargs_one , . fpdef = test
    (150) varargs_two -> . * NAME
    (151) varargs_two -> . OP_POWER NAME
    (152) varargs_two -> . * NAME , OP_POWER NAME
    (153) fpdef -> . NAME
    (154) fpdef -> . ( fplist )

    :               reduce using rule 145 (varargslist -> varargs_one , .)
    )               reduce using rule 145 (varargslist -> varargs_one , .)
    *               shift and go to state 100
    OP_POWER        shift and go to state 96
    NAME            shift and go to state 97
    (               shift and go to state 98

    varargs_two                    shift and go to state 286
    fpdef                          shift and go to state 285

state 210

    (140) lambdef -> TAG_LAMBDA : test .

    ,               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    INDENT          reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_DEL         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_PASS        reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_GLOBAL      reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_EXEC        reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_ASSERT      reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_DRAW        reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_BREAK       reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_CONTINUE    reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_RETURN      reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_RAISE       reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_IMPORT      reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_FROM        reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_YIELD       reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_LAMBDA      reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_NOT         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    +               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    -               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    ~               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    (               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    [               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    {               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    `               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    NAME            reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    NUMBER          reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    STRING          reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    =               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_FOR         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    )               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    ADD_ASN         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    SUB_ASN         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    MUL_ASN         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    DIV_ASN         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    MOD_ASN         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    AND_ASN         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    OR_ASN          reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    XOR_ASN         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    LSHIFT_ASN      reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    RSHIFT_ASN      reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    POW_ASN         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    FDIV_ASN        reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    NEWLINE         reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    ;               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    ]               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    }               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    :               reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)
    TAG_AS          reduce using rule 140 (lambdef -> TAG_LAMBDA : test .)


state 211

    (253) raise_stmt -> TAG_RAISE test , . test
    (254) raise_stmt -> TAG_RAISE test , . test , test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 287
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 212

    (190) for_stmt -> TAG_FOR exprlist TAG_IN . testlist suite
    (191) for_stmt -> TAG_FOR exprlist TAG_IN . testlist suite TAG_ELSE suite
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 74
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    testlist                       shift and go to state 288
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 213

    (18) exprlist -> exprlist , . expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 289
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    strings                        shift and go to state 82
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 52
    and_expr                       shift and go to state 63

state 214

    (8) decorator -> @ dotted_name ( . ) NEWLINE
    (9) decorator -> @ dotted_name ( . arglist ) NEWLINE
    (52) arglist -> . arglist_piece
    (53) arglist -> . arglist_piece ,
    (50) arglist_piece -> . argument
    (51) arglist_piece -> . arglist_piece , argument
    (54) argument -> . test
    (55) argument -> . test comp_for
    (56) argument -> . test = test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    )               shift and go to state 291
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    argument                       shift and go to state 259
    arglist_piece                  shift and go to state 260
    not_test                       shift and go to state 68
    arglist                        shift and go to state 290
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 263
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 215

    (7) decorator -> @ dotted_name NEWLINE .

    TAG_CLASS       reduce using rule 7 (decorator -> @ dotted_name NEWLINE .)
    TAG_DEF         reduce using rule 7 (decorator -> @ dotted_name NEWLINE .)
    @               reduce using rule 7 (decorator -> @ dotted_name NEWLINE .)


state 216

    (271) dotted_name -> dotted_name . . NAME

    NAME            shift and go to state 292


state 217

    (205) simple_stmt -> simple_stmt ; small_stmt . NEWLINE
    (206) simple_stmt -> simple_stmt ; small_stmt . ; NEWLINE

    NEWLINE         shift and go to state 294
    ;               shift and go to state 293


state 218

    (218) expr_stmt -> testlist augassign yield_expr .

    NEWLINE         reduce using rule 218 (expr_stmt -> testlist augassign yield_expr .)
    ;               reduce using rule 218 (expr_stmt -> testlist augassign yield_expr .)


state 219

    (219) expr_stmt -> testlist augassign testlist .

    NEWLINE         reduce using rule 219 (expr_stmt -> testlist augassign testlist .)
    ;               reduce using rule 219 (expr_stmt -> testlist augassign testlist .)


state 220

    (236) expr_stmt_bottom -> expr_stmt_bottom = . yield_expr
    (237) expr_stmt_bottom -> expr_stmt_bottom = . testlist
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    shift_expr                     shift and go to state 3
    not_test                       shift and go to state 68
    testlist_anns                  shift and go to state 35
    factor                         shift and go to state 13
    test                           shift and go to state 74
    and_expr                       shift and go to state 63
    yield_expr                     shift and go to state 295
    power                          shift and go to state 40
    testlist                       shift and go to state 296
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 221

    (234) expr_stmt_bottom -> = yield_expr .

    =               reduce using rule 234 (expr_stmt_bottom -> = yield_expr .)
    NEWLINE         reduce using rule 234 (expr_stmt_bottom -> = yield_expr .)
    ;               reduce using rule 234 (expr_stmt_bottom -> = yield_expr .)


state 222

    (235) expr_stmt_bottom -> = testlist .

    =               reduce using rule 235 (expr_stmt_bottom -> = testlist .)
    NEWLINE         reduce using rule 235 (expr_stmt_bottom -> = testlist .)
    ;               reduce using rule 235 (expr_stmt_bottom -> = testlist .)


state 223

    (80) atom -> ` testlist1 ` .

    OP_POWER        reduce using rule 80 (atom -> ` testlist1 ` .)
    (               reduce using rule 80 (atom -> ` testlist1 ` .)
    [               reduce using rule 80 (atom -> ` testlist1 ` .)
    .               reduce using rule 80 (atom -> ` testlist1 ` .)
    *               reduce using rule 80 (atom -> ` testlist1 ` .)
    /               reduce using rule 80 (atom -> ` testlist1 ` .)
    %               reduce using rule 80 (atom -> ` testlist1 ` .)
    OP_EXACT_DIVISION reduce using rule 80 (atom -> ` testlist1 ` .)
    +               reduce using rule 80 (atom -> ` testlist1 ` .)
    -               reduce using rule 80 (atom -> ` testlist1 ` .)
    OP_LEFT_SHIFT   reduce using rule 80 (atom -> ` testlist1 ` .)
    OP_RIGHT_SHIFT  reduce using rule 80 (atom -> ` testlist1 ` .)
    &               reduce using rule 80 (atom -> ` testlist1 ` .)
    ^               reduce using rule 80 (atom -> ` testlist1 ` .)
    |               reduce using rule 80 (atom -> ` testlist1 ` .)
    >               reduce using rule 80 (atom -> ` testlist1 ` .)
    <               reduce using rule 80 (atom -> ` testlist1 ` .)
    OP_EQ           reduce using rule 80 (atom -> ` testlist1 ` .)
    OP_GE           reduce using rule 80 (atom -> ` testlist1 ` .)
    OP_LE           reduce using rule 80 (atom -> ` testlist1 ` .)
    OP_NE           reduce using rule 80 (atom -> ` testlist1 ` .)
    OP_NNE          reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_IN          reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_NOT         reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_IS          reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_AND         reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_IF          reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_OR          reduce using rule 80 (atom -> ` testlist1 ` .)
    ,               reduce using rule 80 (atom -> ` testlist1 ` .)
    NEWLINE         reduce using rule 80 (atom -> ` testlist1 ` .)
    ;               reduce using rule 80 (atom -> ` testlist1 ` .)
    ADD_ASN         reduce using rule 80 (atom -> ` testlist1 ` .)
    SUB_ASN         reduce using rule 80 (atom -> ` testlist1 ` .)
    MUL_ASN         reduce using rule 80 (atom -> ` testlist1 ` .)
    DIV_ASN         reduce using rule 80 (atom -> ` testlist1 ` .)
    MOD_ASN         reduce using rule 80 (atom -> ` testlist1 ` .)
    AND_ASN         reduce using rule 80 (atom -> ` testlist1 ` .)
    OR_ASN          reduce using rule 80 (atom -> ` testlist1 ` .)
    XOR_ASN         reduce using rule 80 (atom -> ` testlist1 ` .)
    LSHIFT_ASN      reduce using rule 80 (atom -> ` testlist1 ` .)
    RSHIFT_ASN      reduce using rule 80 (atom -> ` testlist1 ` .)
    POW_ASN         reduce using rule 80 (atom -> ` testlist1 ` .)
    FDIV_ASN        reduce using rule 80 (atom -> ` testlist1 ` .)
    =               reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_FOR         reduce using rule 80 (atom -> ` testlist1 ` .)
    )               reduce using rule 80 (atom -> ` testlist1 ` .)
    `               reduce using rule 80 (atom -> ` testlist1 ` .)
    INDENT          reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_DEL         reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_PASS        reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_GLOBAL      reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_EXEC        reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_ASSERT      reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_DRAW        reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_BREAK       reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_CONTINUE    reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_RETURN      reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_RAISE       reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_IMPORT      reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_FROM        reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_YIELD       reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_LAMBDA      reduce using rule 80 (atom -> ` testlist1 ` .)
    ~               reduce using rule 80 (atom -> ` testlist1 ` .)
    {               reduce using rule 80 (atom -> ` testlist1 ` .)
    NAME            reduce using rule 80 (atom -> ` testlist1 ` .)
    NUMBER          reduce using rule 80 (atom -> ` testlist1 ` .)
    STRING          reduce using rule 80 (atom -> ` testlist1 ` .)
    ]               reduce using rule 80 (atom -> ` testlist1 ` .)
    :               reduce using rule 80 (atom -> ` testlist1 ` .)
    }               reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_AS          reduce using rule 80 (atom -> ` testlist1 ` .)
    TAG_ELSE        reduce using rule 80 (atom -> ` testlist1 ` .)


state 224

    (87) testlist1 -> testlist1 , . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 297
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 225

    (33) term -> term % factor .

    *               reduce using rule 33 (term -> term % factor .)
    /               reduce using rule 33 (term -> term % factor .)
    %               reduce using rule 33 (term -> term % factor .)
    OP_EXACT_DIVISION reduce using rule 33 (term -> term % factor .)
    +               reduce using rule 33 (term -> term % factor .)
    -               reduce using rule 33 (term -> term % factor .)
    OP_LEFT_SHIFT   reduce using rule 33 (term -> term % factor .)
    OP_RIGHT_SHIFT  reduce using rule 33 (term -> term % factor .)
    &               reduce using rule 33 (term -> term % factor .)
    ^               reduce using rule 33 (term -> term % factor .)
    |               reduce using rule 33 (term -> term % factor .)
    >               reduce using rule 33 (term -> term % factor .)
    <               reduce using rule 33 (term -> term % factor .)
    OP_EQ           reduce using rule 33 (term -> term % factor .)
    OP_GE           reduce using rule 33 (term -> term % factor .)
    OP_LE           reduce using rule 33 (term -> term % factor .)
    OP_NE           reduce using rule 33 (term -> term % factor .)
    OP_NNE          reduce using rule 33 (term -> term % factor .)
    TAG_IN          reduce using rule 33 (term -> term % factor .)
    TAG_NOT         reduce using rule 33 (term -> term % factor .)
    TAG_IS          reduce using rule 33 (term -> term % factor .)
    TAG_AND         reduce using rule 33 (term -> term % factor .)
    TAG_IF          reduce using rule 33 (term -> term % factor .)
    TAG_OR          reduce using rule 33 (term -> term % factor .)
    ]               reduce using rule 33 (term -> term % factor .)
    ,               reduce using rule 33 (term -> term % factor .)
    )               reduce using rule 33 (term -> term % factor .)
    ADD_ASN         reduce using rule 33 (term -> term % factor .)
    SUB_ASN         reduce using rule 33 (term -> term % factor .)
    MUL_ASN         reduce using rule 33 (term -> term % factor .)
    DIV_ASN         reduce using rule 33 (term -> term % factor .)
    MOD_ASN         reduce using rule 33 (term -> term % factor .)
    AND_ASN         reduce using rule 33 (term -> term % factor .)
    OR_ASN          reduce using rule 33 (term -> term % factor .)
    XOR_ASN         reduce using rule 33 (term -> term % factor .)
    LSHIFT_ASN      reduce using rule 33 (term -> term % factor .)
    RSHIFT_ASN      reduce using rule 33 (term -> term % factor .)
    POW_ASN         reduce using rule 33 (term -> term % factor .)
    FDIV_ASN        reduce using rule 33 (term -> term % factor .)
    =               reduce using rule 33 (term -> term % factor .)
    NEWLINE         reduce using rule 33 (term -> term % factor .)
    ;               reduce using rule 33 (term -> term % factor .)
    TAG_FOR         reduce using rule 33 (term -> term % factor .)
    `               reduce using rule 33 (term -> term % factor .)
    INDENT          reduce using rule 33 (term -> term % factor .)
    TAG_DEL         reduce using rule 33 (term -> term % factor .)
    TAG_PASS        reduce using rule 33 (term -> term % factor .)
    TAG_GLOBAL      reduce using rule 33 (term -> term % factor .)
    TAG_EXEC        reduce using rule 33 (term -> term % factor .)
    TAG_ASSERT      reduce using rule 33 (term -> term % factor .)
    TAG_DRAW        reduce using rule 33 (term -> term % factor .)
    TAG_BREAK       reduce using rule 33 (term -> term % factor .)
    TAG_CONTINUE    reduce using rule 33 (term -> term % factor .)
    TAG_RETURN      reduce using rule 33 (term -> term % factor .)
    TAG_RAISE       reduce using rule 33 (term -> term % factor .)
    TAG_IMPORT      reduce using rule 33 (term -> term % factor .)
    TAG_FROM        reduce using rule 33 (term -> term % factor .)
    TAG_YIELD       reduce using rule 33 (term -> term % factor .)
    TAG_LAMBDA      reduce using rule 33 (term -> term % factor .)
    ~               reduce using rule 33 (term -> term % factor .)
    (               reduce using rule 33 (term -> term % factor .)
    [               reduce using rule 33 (term -> term % factor .)
    {               reduce using rule 33 (term -> term % factor .)
    NAME            reduce using rule 33 (term -> term % factor .)
    NUMBER          reduce using rule 33 (term -> term % factor .)
    STRING          reduce using rule 33 (term -> term % factor .)
    :               reduce using rule 33 (term -> term % factor .)
    }               reduce using rule 33 (term -> term % factor .)
    TAG_AS          reduce using rule 33 (term -> term % factor .)
    TAG_ELSE        reduce using rule 33 (term -> term % factor .)


state 226

    (31) term -> term * factor .

    *               reduce using rule 31 (term -> term * factor .)
    /               reduce using rule 31 (term -> term * factor .)
    %               reduce using rule 31 (term -> term * factor .)
    OP_EXACT_DIVISION reduce using rule 31 (term -> term * factor .)
    +               reduce using rule 31 (term -> term * factor .)
    -               reduce using rule 31 (term -> term * factor .)
    OP_LEFT_SHIFT   reduce using rule 31 (term -> term * factor .)
    OP_RIGHT_SHIFT  reduce using rule 31 (term -> term * factor .)
    &               reduce using rule 31 (term -> term * factor .)
    ^               reduce using rule 31 (term -> term * factor .)
    |               reduce using rule 31 (term -> term * factor .)
    >               reduce using rule 31 (term -> term * factor .)
    <               reduce using rule 31 (term -> term * factor .)
    OP_EQ           reduce using rule 31 (term -> term * factor .)
    OP_GE           reduce using rule 31 (term -> term * factor .)
    OP_LE           reduce using rule 31 (term -> term * factor .)
    OP_NE           reduce using rule 31 (term -> term * factor .)
    OP_NNE          reduce using rule 31 (term -> term * factor .)
    TAG_IN          reduce using rule 31 (term -> term * factor .)
    TAG_NOT         reduce using rule 31 (term -> term * factor .)
    TAG_IS          reduce using rule 31 (term -> term * factor .)
    TAG_AND         reduce using rule 31 (term -> term * factor .)
    TAG_IF          reduce using rule 31 (term -> term * factor .)
    TAG_OR          reduce using rule 31 (term -> term * factor .)
    ]               reduce using rule 31 (term -> term * factor .)
    ,               reduce using rule 31 (term -> term * factor .)
    )               reduce using rule 31 (term -> term * factor .)
    ADD_ASN         reduce using rule 31 (term -> term * factor .)
    SUB_ASN         reduce using rule 31 (term -> term * factor .)
    MUL_ASN         reduce using rule 31 (term -> term * factor .)
    DIV_ASN         reduce using rule 31 (term -> term * factor .)
    MOD_ASN         reduce using rule 31 (term -> term * factor .)
    AND_ASN         reduce using rule 31 (term -> term * factor .)
    OR_ASN          reduce using rule 31 (term -> term * factor .)
    XOR_ASN         reduce using rule 31 (term -> term * factor .)
    LSHIFT_ASN      reduce using rule 31 (term -> term * factor .)
    RSHIFT_ASN      reduce using rule 31 (term -> term * factor .)
    POW_ASN         reduce using rule 31 (term -> term * factor .)
    FDIV_ASN        reduce using rule 31 (term -> term * factor .)
    =               reduce using rule 31 (term -> term * factor .)
    NEWLINE         reduce using rule 31 (term -> term * factor .)
    ;               reduce using rule 31 (term -> term * factor .)
    TAG_FOR         reduce using rule 31 (term -> term * factor .)
    `               reduce using rule 31 (term -> term * factor .)
    INDENT          reduce using rule 31 (term -> term * factor .)
    TAG_DEL         reduce using rule 31 (term -> term * factor .)
    TAG_PASS        reduce using rule 31 (term -> term * factor .)
    TAG_GLOBAL      reduce using rule 31 (term -> term * factor .)
    TAG_EXEC        reduce using rule 31 (term -> term * factor .)
    TAG_ASSERT      reduce using rule 31 (term -> term * factor .)
    TAG_DRAW        reduce using rule 31 (term -> term * factor .)
    TAG_BREAK       reduce using rule 31 (term -> term * factor .)
    TAG_CONTINUE    reduce using rule 31 (term -> term * factor .)
    TAG_RETURN      reduce using rule 31 (term -> term * factor .)
    TAG_RAISE       reduce using rule 31 (term -> term * factor .)
    TAG_IMPORT      reduce using rule 31 (term -> term * factor .)
    TAG_FROM        reduce using rule 31 (term -> term * factor .)
    TAG_YIELD       reduce using rule 31 (term -> term * factor .)
    TAG_LAMBDA      reduce using rule 31 (term -> term * factor .)
    ~               reduce using rule 31 (term -> term * factor .)
    (               reduce using rule 31 (term -> term * factor .)
    [               reduce using rule 31 (term -> term * factor .)
    {               reduce using rule 31 (term -> term * factor .)
    NAME            reduce using rule 31 (term -> term * factor .)
    NUMBER          reduce using rule 31 (term -> term * factor .)
    STRING          reduce using rule 31 (term -> term * factor .)
    :               reduce using rule 31 (term -> term * factor .)
    }               reduce using rule 31 (term -> term * factor .)
    TAG_AS          reduce using rule 31 (term -> term * factor .)
    TAG_ELSE        reduce using rule 31 (term -> term * factor .)


state 227

    (32) term -> term / factor .

    *               reduce using rule 32 (term -> term / factor .)
    /               reduce using rule 32 (term -> term / factor .)
    %               reduce using rule 32 (term -> term / factor .)
    OP_EXACT_DIVISION reduce using rule 32 (term -> term / factor .)
    +               reduce using rule 32 (term -> term / factor .)
    -               reduce using rule 32 (term -> term / factor .)
    OP_LEFT_SHIFT   reduce using rule 32 (term -> term / factor .)
    OP_RIGHT_SHIFT  reduce using rule 32 (term -> term / factor .)
    &               reduce using rule 32 (term -> term / factor .)
    ^               reduce using rule 32 (term -> term / factor .)
    |               reduce using rule 32 (term -> term / factor .)
    >               reduce using rule 32 (term -> term / factor .)
    <               reduce using rule 32 (term -> term / factor .)
    OP_EQ           reduce using rule 32 (term -> term / factor .)
    OP_GE           reduce using rule 32 (term -> term / factor .)
    OP_LE           reduce using rule 32 (term -> term / factor .)
    OP_NE           reduce using rule 32 (term -> term / factor .)
    OP_NNE          reduce using rule 32 (term -> term / factor .)
    TAG_IN          reduce using rule 32 (term -> term / factor .)
    TAG_NOT         reduce using rule 32 (term -> term / factor .)
    TAG_IS          reduce using rule 32 (term -> term / factor .)
    TAG_AND         reduce using rule 32 (term -> term / factor .)
    TAG_IF          reduce using rule 32 (term -> term / factor .)
    TAG_OR          reduce using rule 32 (term -> term / factor .)
    ]               reduce using rule 32 (term -> term / factor .)
    ,               reduce using rule 32 (term -> term / factor .)
    )               reduce using rule 32 (term -> term / factor .)
    ADD_ASN         reduce using rule 32 (term -> term / factor .)
    SUB_ASN         reduce using rule 32 (term -> term / factor .)
    MUL_ASN         reduce using rule 32 (term -> term / factor .)
    DIV_ASN         reduce using rule 32 (term -> term / factor .)
    MOD_ASN         reduce using rule 32 (term -> term / factor .)
    AND_ASN         reduce using rule 32 (term -> term / factor .)
    OR_ASN          reduce using rule 32 (term -> term / factor .)
    XOR_ASN         reduce using rule 32 (term -> term / factor .)
    LSHIFT_ASN      reduce using rule 32 (term -> term / factor .)
    RSHIFT_ASN      reduce using rule 32 (term -> term / factor .)
    POW_ASN         reduce using rule 32 (term -> term / factor .)
    FDIV_ASN        reduce using rule 32 (term -> term / factor .)
    =               reduce using rule 32 (term -> term / factor .)
    NEWLINE         reduce using rule 32 (term -> term / factor .)
    ;               reduce using rule 32 (term -> term / factor .)
    TAG_FOR         reduce using rule 32 (term -> term / factor .)
    `               reduce using rule 32 (term -> term / factor .)
    INDENT          reduce using rule 32 (term -> term / factor .)
    TAG_DEL         reduce using rule 32 (term -> term / factor .)
    TAG_PASS        reduce using rule 32 (term -> term / factor .)
    TAG_GLOBAL      reduce using rule 32 (term -> term / factor .)
    TAG_EXEC        reduce using rule 32 (term -> term / factor .)
    TAG_ASSERT      reduce using rule 32 (term -> term / factor .)
    TAG_DRAW        reduce using rule 32 (term -> term / factor .)
    TAG_BREAK       reduce using rule 32 (term -> term / factor .)
    TAG_CONTINUE    reduce using rule 32 (term -> term / factor .)
    TAG_RETURN      reduce using rule 32 (term -> term / factor .)
    TAG_RAISE       reduce using rule 32 (term -> term / factor .)
    TAG_IMPORT      reduce using rule 32 (term -> term / factor .)
    TAG_FROM        reduce using rule 32 (term -> term / factor .)
    TAG_YIELD       reduce using rule 32 (term -> term / factor .)
    TAG_LAMBDA      reduce using rule 32 (term -> term / factor .)
    ~               reduce using rule 32 (term -> term / factor .)
    (               reduce using rule 32 (term -> term / factor .)
    [               reduce using rule 32 (term -> term / factor .)
    {               reduce using rule 32 (term -> term / factor .)
    NAME            reduce using rule 32 (term -> term / factor .)
    NUMBER          reduce using rule 32 (term -> term / factor .)
    STRING          reduce using rule 32 (term -> term / factor .)
    :               reduce using rule 32 (term -> term / factor .)
    }               reduce using rule 32 (term -> term / factor .)
    TAG_AS          reduce using rule 32 (term -> term / factor .)
    TAG_ELSE        reduce using rule 32 (term -> term / factor .)


state 228

    (34) term -> term OP_EXACT_DIVISION factor .

    *               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    /               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    %               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OP_EXACT_DIVISION reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    +               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    -               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OP_LEFT_SHIFT   reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OP_RIGHT_SHIFT  reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    &               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    ^               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    |               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    >               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    <               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OP_EQ           reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OP_GE           reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OP_LE           reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OP_NE           reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OP_NNE          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_IN          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_NOT         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_IS          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_AND         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_IF          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_OR          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    ]               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    ,               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    )               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    ADD_ASN         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    SUB_ASN         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    MUL_ASN         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    DIV_ASN         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    MOD_ASN         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    AND_ASN         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    OR_ASN          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    XOR_ASN         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    LSHIFT_ASN      reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    RSHIFT_ASN      reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    POW_ASN         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    FDIV_ASN        reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    =               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    NEWLINE         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    ;               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_FOR         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    `               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    INDENT          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_DEL         reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_PASS        reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_GLOBAL      reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_EXEC        reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_ASSERT      reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_DRAW        reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_BREAK       reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_CONTINUE    reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_RETURN      reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_RAISE       reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_IMPORT      reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_FROM        reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_YIELD       reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_LAMBDA      reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    ~               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    (               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    [               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    {               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    NAME            reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    NUMBER          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    STRING          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    :               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    }               reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_AS          reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)
    TAG_ELSE        reduce using rule 34 (term -> term OP_EXACT_DIVISION factor .)


state 229

    (184) if_stmt -> TAG_IF test suite .
    (185) if_stmt -> TAG_IF test suite . TAG_ELSE suite
    (186) if_stmt -> TAG_IF test suite . elif_list
    (187) if_stmt -> TAG_IF test suite . elif_list TAG_ELSE suite
    (203) elif_list -> . TAG_ELIF test : suite
    (204) elif_list -> . elif_list TAG_ELIF test : suite

    DEDENT          reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_IF          reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_WHILE       reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_FOR         reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_TRY         reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_DEF         reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_CLASS       reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_DEL         reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_PASS        reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_GLOBAL      reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_EXEC        reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_ASSERT      reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_DRAW        reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_BREAK       reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_CONTINUE    reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_RETURN      reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_RAISE       reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_IMPORT      reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_FROM        reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    @               reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_YIELD       reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_LAMBDA      reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_NOT         reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    +               reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    -               reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    ~               reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    (               reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    [               reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    {               reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    `               reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    NAME            reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    NUMBER          reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    STRING          reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    ENDMARKER       reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    NEWLINE         reduce using rule 184 (if_stmt -> TAG_IF test suite .)
    TAG_ELSE        shift and go to state 298
    TAG_ELIF        shift and go to state 299

    elif_list                      shift and go to state 300

state 230

    (163) suite -> simple_stmt .
    (205) simple_stmt -> simple_stmt . ; small_stmt NEWLINE
    (206) simple_stmt -> simple_stmt . ; small_stmt ; NEWLINE

    ENDMARKER       reduce using rule 163 (suite -> simple_stmt .)
    NEWLINE         reduce using rule 163 (suite -> simple_stmt .)
    TAG_IF          reduce using rule 163 (suite -> simple_stmt .)
    TAG_WHILE       reduce using rule 163 (suite -> simple_stmt .)
    TAG_FOR         reduce using rule 163 (suite -> simple_stmt .)
    TAG_TRY         reduce using rule 163 (suite -> simple_stmt .)
    TAG_DEF         reduce using rule 163 (suite -> simple_stmt .)
    TAG_CLASS       reduce using rule 163 (suite -> simple_stmt .)
    TAG_DEL         reduce using rule 163 (suite -> simple_stmt .)
    TAG_PASS        reduce using rule 163 (suite -> simple_stmt .)
    TAG_GLOBAL      reduce using rule 163 (suite -> simple_stmt .)
    TAG_EXEC        reduce using rule 163 (suite -> simple_stmt .)
    TAG_ASSERT      reduce using rule 163 (suite -> simple_stmt .)
    TAG_DRAW        reduce using rule 163 (suite -> simple_stmt .)
    TAG_BREAK       reduce using rule 163 (suite -> simple_stmt .)
    TAG_CONTINUE    reduce using rule 163 (suite -> simple_stmt .)
    TAG_RETURN      reduce using rule 163 (suite -> simple_stmt .)
    TAG_RAISE       reduce using rule 163 (suite -> simple_stmt .)
    TAG_IMPORT      reduce using rule 163 (suite -> simple_stmt .)
    TAG_FROM        reduce using rule 163 (suite -> simple_stmt .)
    @               reduce using rule 163 (suite -> simple_stmt .)
    TAG_YIELD       reduce using rule 163 (suite -> simple_stmt .)
    TAG_LAMBDA      reduce using rule 163 (suite -> simple_stmt .)
    TAG_NOT         reduce using rule 163 (suite -> simple_stmt .)
    +               reduce using rule 163 (suite -> simple_stmt .)
    -               reduce using rule 163 (suite -> simple_stmt .)
    ~               reduce using rule 163 (suite -> simple_stmt .)
    (               reduce using rule 163 (suite -> simple_stmt .)
    [               reduce using rule 163 (suite -> simple_stmt .)
    {               reduce using rule 163 (suite -> simple_stmt .)
    `               reduce using rule 163 (suite -> simple_stmt .)
    NAME            reduce using rule 163 (suite -> simple_stmt .)
    NUMBER          reduce using rule 163 (suite -> simple_stmt .)
    STRING          reduce using rule 163 (suite -> simple_stmt .)
    DEDENT          reduce using rule 163 (suite -> simple_stmt .)
    TAG_ELSE        reduce using rule 163 (suite -> simple_stmt .)
    TAG_ELIF        reduce using rule 163 (suite -> simple_stmt .)
    TAG_FINALLY     reduce using rule 163 (suite -> simple_stmt .)
    TAG_EXCEPT      reduce using rule 163 (suite -> simple_stmt .)
    ;               shift and go to state 111


state 231

    (164) suite -> INDENT . stmts DEDENT
    (173) stmts -> . stmt
    (174) stmts -> . stmts stmt
    (175) stmt -> . simple_stmt
    (176) stmt -> . compound_stmt
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (177) compound_stmt -> . if_stmt
    (178) compound_stmt -> . while_stmt
    (179) compound_stmt -> . for_stmt
    (180) compound_stmt -> . try_stmt
    (181) compound_stmt -> . funcdef
    (182) compound_stmt -> . classdef
    (183) compound_stmt -> . decorated
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (184) if_stmt -> . TAG_IF test suite
    (185) if_stmt -> . TAG_IF test suite TAG_ELSE suite
    (186) if_stmt -> . TAG_IF test suite elif_list
    (187) if_stmt -> . TAG_IF test suite elif_list TAG_ELSE suite
    (188) while_stmt -> . TAG_WHILE test suite
    (189) while_stmt -> . TAG_WHILE test suite TAG_ELSE suite
    (190) for_stmt -> . TAG_FOR exprlist TAG_IN testlist suite
    (191) for_stmt -> . TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite
    (192) try_stmt -> . TAG_TRY : suite TAG_FINALLY : suite
    (193) try_stmt -> . TAG_TRY : suite except_clauses
    (194) try_stmt -> . TAG_TRY : suite except_clauses TAG_ELSE : suite
    (195) try_stmt -> . TAG_TRY : suite except_clauses TAG_FINALLY : suite
    (196) try_stmt -> . TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite
    (160) funcdef -> . TAG_DEF NAME parameters suite
    (14) classdef -> . TAG_CLASS NAME : suite
    (15) classdef -> . TAG_CLASS NAME ( testlist ) : suite
    (16) classdef -> . TAG_CLASS NAME ( ) : suite
    (12) decorated -> . decorators classdef
    (13) decorated -> . decorators funcdef
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (10) decorators -> . decorator
    (11) decorators -> . decorators decorator
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (7) decorator -> . @ dotted_name NEWLINE
    (8) decorator -> . @ dotted_name ( ) NEWLINE
    (9) decorator -> . @ dotted_name ( arglist ) NEWLINE
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_IF          shift and go to state 28
    TAG_WHILE       shift and go to state 37
    TAG_FOR         shift and go to state 15
    TAG_TRY         shift and go to state 30
    TAG_DEF         shift and go to state 62
    TAG_CLASS       shift and go to state 58
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    @               shift and go to state 16
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    try_stmt                       shift and go to state 6
    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    import_name                    shift and go to state 76
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    atom                           shift and go to state 56
    stmts                          shift and go to state 301
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    compound_stmt                  shift and go to state 39
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 17
    testlist                       shift and go to state 18
    classdef                       shift and go to state 19
    stmt                           shift and go to state 302
    assert_stmt                    shift and go to state 20
    for_stmt                       shift and go to state 21
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    funcdef                        shift and go to state 5
    decorated                      shift and go to state 79
    import_stmt                    shift and go to state 44
    decorator                      shift and go to state 24
    pass_stmt                      shift and go to state 46
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    if_stmt                        shift and go to state 27
    xor_expr                       shift and go to state 52
    decorators                     shift and go to state 38
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    while_stmt                     shift and go to state 73
    expr                           shift and go to state 31
    arith_expr                     shift and go to state 47
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 232

    (119) test -> or_test TAG_IF or_test . TAG_ELSE test
    (122) or_test -> or_test . TAG_OR and_test

    TAG_ELSE        shift and go to state 303
    TAG_OR          shift and go to state 135


state 233

    (122) or_test -> or_test TAG_OR and_test .
    (124) and_test -> and_test . TAG_AND not_test

    TAG_IF          reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_OR          reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    ,               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    NEWLINE         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    ;               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    ADD_ASN         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    SUB_ASN         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    MUL_ASN         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    DIV_ASN         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    MOD_ASN         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    AND_ASN         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    OR_ASN          reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    XOR_ASN         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    LSHIFT_ASN      reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    RSHIFT_ASN      reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    POW_ASN         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    FDIV_ASN        reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    =               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    INDENT          reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_DEL         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_PASS        reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_GLOBAL      reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_EXEC        reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_ASSERT      reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_DRAW        reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_BREAK       reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_CONTINUE    reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_RETURN      reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_RAISE       reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_IMPORT      reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_FROM        reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_YIELD       reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_LAMBDA      reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_NOT         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    +               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    -               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    ~               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    (               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    [               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    {               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    `               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    NAME            reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    NUMBER          reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    STRING          reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    )               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    :               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    ]               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_FOR         reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    }               reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_AS          reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_ELSE        reduce using rule 122 (or_test -> or_test TAG_OR and_test .)
    TAG_AND         shift and go to state 187


state 234

    (192) try_stmt -> TAG_TRY : suite . TAG_FINALLY : suite
    (193) try_stmt -> TAG_TRY : suite . except_clauses
    (194) try_stmt -> TAG_TRY : suite . except_clauses TAG_ELSE : suite
    (195) try_stmt -> TAG_TRY : suite . except_clauses TAG_FINALLY : suite
    (196) try_stmt -> TAG_TRY : suite . except_clauses TAG_ELSE : suite TAG_FINALLY : suite
    (197) except_clauses -> . except_clauses except_clause : suite
    (198) except_clauses -> . except_clause : suite
    (199) except_clause -> . TAG_EXCEPT
    (200) except_clause -> . TAG_EXCEPT test
    (201) except_clause -> . TAG_EXCEPT test TAG_AS test
    (202) except_clause -> . TAG_EXCEPT test , test

    TAG_FINALLY     shift and go to state 307
    TAG_EXCEPT      shift and go to state 304

    except_clause                  shift and go to state 306
    except_clauses                 shift and go to state 305

state 235

    (20) expr -> expr | xor_expr .
    (22) xor_expr -> xor_expr . ^ and_expr

    |               reduce using rule 20 (expr -> expr | xor_expr .)
    >               reduce using rule 20 (expr -> expr | xor_expr .)
    <               reduce using rule 20 (expr -> expr | xor_expr .)
    OP_EQ           reduce using rule 20 (expr -> expr | xor_expr .)
    OP_GE           reduce using rule 20 (expr -> expr | xor_expr .)
    OP_LE           reduce using rule 20 (expr -> expr | xor_expr .)
    OP_NE           reduce using rule 20 (expr -> expr | xor_expr .)
    OP_NNE          reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_IN          reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_NOT         reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_IS          reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_AND         reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_IF          reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_OR          reduce using rule 20 (expr -> expr | xor_expr .)
    =               reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_FOR         reduce using rule 20 (expr -> expr | xor_expr .)
    ,               reduce using rule 20 (expr -> expr | xor_expr .)
    )               reduce using rule 20 (expr -> expr | xor_expr .)
    ADD_ASN         reduce using rule 20 (expr -> expr | xor_expr .)
    SUB_ASN         reduce using rule 20 (expr -> expr | xor_expr .)
    MUL_ASN         reduce using rule 20 (expr -> expr | xor_expr .)
    DIV_ASN         reduce using rule 20 (expr -> expr | xor_expr .)
    MOD_ASN         reduce using rule 20 (expr -> expr | xor_expr .)
    AND_ASN         reduce using rule 20 (expr -> expr | xor_expr .)
    OR_ASN          reduce using rule 20 (expr -> expr | xor_expr .)
    XOR_ASN         reduce using rule 20 (expr -> expr | xor_expr .)
    LSHIFT_ASN      reduce using rule 20 (expr -> expr | xor_expr .)
    RSHIFT_ASN      reduce using rule 20 (expr -> expr | xor_expr .)
    POW_ASN         reduce using rule 20 (expr -> expr | xor_expr .)
    FDIV_ASN        reduce using rule 20 (expr -> expr | xor_expr .)
    NEWLINE         reduce using rule 20 (expr -> expr | xor_expr .)
    ;               reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_AS          reduce using rule 20 (expr -> expr | xor_expr .)
    :               reduce using rule 20 (expr -> expr | xor_expr .)
    ]               reduce using rule 20 (expr -> expr | xor_expr .)
    }               reduce using rule 20 (expr -> expr | xor_expr .)
    INDENT          reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_DEL         reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_PASS        reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_GLOBAL      reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_EXEC        reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_ASSERT      reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_DRAW        reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_BREAK       reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_CONTINUE    reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_RETURN      reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_RAISE       reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_IMPORT      reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_FROM        reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_YIELD       reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_LAMBDA      reduce using rule 20 (expr -> expr | xor_expr .)
    +               reduce using rule 20 (expr -> expr | xor_expr .)
    -               reduce using rule 20 (expr -> expr | xor_expr .)
    ~               reduce using rule 20 (expr -> expr | xor_expr .)
    (               reduce using rule 20 (expr -> expr | xor_expr .)
    [               reduce using rule 20 (expr -> expr | xor_expr .)
    {               reduce using rule 20 (expr -> expr | xor_expr .)
    `               reduce using rule 20 (expr -> expr | xor_expr .)
    NAME            reduce using rule 20 (expr -> expr | xor_expr .)
    NUMBER          reduce using rule 20 (expr -> expr | xor_expr .)
    STRING          reduce using rule 20 (expr -> expr | xor_expr .)
    TAG_ELSE        reduce using rule 20 (expr -> expr | xor_expr .)
    ^               shift and go to state 171


state 236

    (116) testlist_anns -> testlist_anns , test .

    ,               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    ]               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    ADD_ASN         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    SUB_ASN         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    MUL_ASN         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    DIV_ASN         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    MOD_ASN         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    AND_ASN         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    OR_ASN          reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    XOR_ASN         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    LSHIFT_ASN      reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    RSHIFT_ASN      reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    POW_ASN         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    FDIV_ASN        reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    =               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    NEWLINE         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    ;               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    )               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    INDENT          reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_DEL         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_PASS        reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_GLOBAL      reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_EXEC        reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_ASSERT      reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_DRAW        reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_BREAK       reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_CONTINUE    reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_RETURN      reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_RAISE       reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_IMPORT      reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_FROM        reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_YIELD       reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_LAMBDA      reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    TAG_NOT         reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    +               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    -               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    ~               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    (               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    [               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    {               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    `               reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    NAME            reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    NUMBER          reduce using rule 116 (testlist_anns -> testlist_anns , test .)
    STRING          reduce using rule 116 (testlist_anns -> testlist_anns , test .)


state 237

    (188) while_stmt -> TAG_WHILE test suite .
    (189) while_stmt -> TAG_WHILE test suite . TAG_ELSE suite

    ENDMARKER       reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    NEWLINE         reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_IF          reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_WHILE       reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_FOR         reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_TRY         reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_DEF         reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_CLASS       reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_DEL         reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_PASS        reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_GLOBAL      reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_EXEC        reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_ASSERT      reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_DRAW        reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_BREAK       reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_CONTINUE    reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_RETURN      reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_RAISE       reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_IMPORT      reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_FROM        reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    @               reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_YIELD       reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_LAMBDA      reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_NOT         reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    +               reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    -               reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    ~               reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    (               reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    [               reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    {               reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    `               reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    NAME            reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    NUMBER          reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    STRING          reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    DEDENT          reduce using rule 188 (while_stmt -> TAG_WHILE test suite .)
    TAG_ELSE        shift and go to state 308


state 238

    (280) assert_stmt -> TAG_ASSERT test , . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 309
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 239

    (76) atom -> [ listmaker ] .

    OP_POWER        reduce using rule 76 (atom -> [ listmaker ] .)
    (               reduce using rule 76 (atom -> [ listmaker ] .)
    [               reduce using rule 76 (atom -> [ listmaker ] .)
    .               reduce using rule 76 (atom -> [ listmaker ] .)
    *               reduce using rule 76 (atom -> [ listmaker ] .)
    /               reduce using rule 76 (atom -> [ listmaker ] .)
    %               reduce using rule 76 (atom -> [ listmaker ] .)
    OP_EXACT_DIVISION reduce using rule 76 (atom -> [ listmaker ] .)
    +               reduce using rule 76 (atom -> [ listmaker ] .)
    -               reduce using rule 76 (atom -> [ listmaker ] .)
    OP_LEFT_SHIFT   reduce using rule 76 (atom -> [ listmaker ] .)
    OP_RIGHT_SHIFT  reduce using rule 76 (atom -> [ listmaker ] .)
    &               reduce using rule 76 (atom -> [ listmaker ] .)
    ^               reduce using rule 76 (atom -> [ listmaker ] .)
    |               reduce using rule 76 (atom -> [ listmaker ] .)
    >               reduce using rule 76 (atom -> [ listmaker ] .)
    <               reduce using rule 76 (atom -> [ listmaker ] .)
    OP_EQ           reduce using rule 76 (atom -> [ listmaker ] .)
    OP_GE           reduce using rule 76 (atom -> [ listmaker ] .)
    OP_LE           reduce using rule 76 (atom -> [ listmaker ] .)
    OP_NE           reduce using rule 76 (atom -> [ listmaker ] .)
    OP_NNE          reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_IN          reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_NOT         reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_IS          reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_AND         reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_IF          reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_OR          reduce using rule 76 (atom -> [ listmaker ] .)
    ,               reduce using rule 76 (atom -> [ listmaker ] .)
    NEWLINE         reduce using rule 76 (atom -> [ listmaker ] .)
    ;               reduce using rule 76 (atom -> [ listmaker ] .)
    ADD_ASN         reduce using rule 76 (atom -> [ listmaker ] .)
    SUB_ASN         reduce using rule 76 (atom -> [ listmaker ] .)
    MUL_ASN         reduce using rule 76 (atom -> [ listmaker ] .)
    DIV_ASN         reduce using rule 76 (atom -> [ listmaker ] .)
    MOD_ASN         reduce using rule 76 (atom -> [ listmaker ] .)
    AND_ASN         reduce using rule 76 (atom -> [ listmaker ] .)
    OR_ASN          reduce using rule 76 (atom -> [ listmaker ] .)
    XOR_ASN         reduce using rule 76 (atom -> [ listmaker ] .)
    LSHIFT_ASN      reduce using rule 76 (atom -> [ listmaker ] .)
    RSHIFT_ASN      reduce using rule 76 (atom -> [ listmaker ] .)
    POW_ASN         reduce using rule 76 (atom -> [ listmaker ] .)
    FDIV_ASN        reduce using rule 76 (atom -> [ listmaker ] .)
    =               reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_FOR         reduce using rule 76 (atom -> [ listmaker ] .)
    )               reduce using rule 76 (atom -> [ listmaker ] .)
    `               reduce using rule 76 (atom -> [ listmaker ] .)
    INDENT          reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_DEL         reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_PASS        reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_GLOBAL      reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_EXEC        reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_ASSERT      reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_DRAW        reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_BREAK       reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_CONTINUE    reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_RETURN      reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_RAISE       reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_IMPORT      reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_FROM        reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_YIELD       reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_LAMBDA      reduce using rule 76 (atom -> [ listmaker ] .)
    ~               reduce using rule 76 (atom -> [ listmaker ] .)
    {               reduce using rule 76 (atom -> [ listmaker ] .)
    NAME            reduce using rule 76 (atom -> [ listmaker ] .)
    NUMBER          reduce using rule 76 (atom -> [ listmaker ] .)
    STRING          reduce using rule 76 (atom -> [ listmaker ] .)
    ]               reduce using rule 76 (atom -> [ listmaker ] .)
    :               reduce using rule 76 (atom -> [ listmaker ] .)
    }               reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_AS          reduce using rule 76 (atom -> [ listmaker ] .)
    TAG_ELSE        reduce using rule 76 (atom -> [ listmaker ] .)


state 240

    (89) listmaker -> test list_for .

    ]               reduce using rule 89 (listmaker -> test list_for .)


state 241

    (110) list_for -> TAG_FOR . exprlist TAG_IN testlist_safe
    (111) list_for -> TAG_FOR . exprlist TAG_IN testlist_safe list_iter
    (17) exprlist -> . expr
    (18) exprlist -> . exprlist , expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    term                           shift and go to state 26
    power                          shift and go to state 40
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 108
    atom                           shift and go to state 56
    shift_expr                     shift and go to state 3
    strings                        shift and go to state 82
    factor                         shift and go to state 13
    xor_expr                       shift and go to state 52
    exprlist                       shift and go to state 310
    and_expr                       shift and go to state 63

state 242

    (128) comparison -> comparison comp_op expr .
    (20) expr -> expr . | xor_expr

    >               reduce using rule 128 (comparison -> comparison comp_op expr .)
    <               reduce using rule 128 (comparison -> comparison comp_op expr .)
    OP_EQ           reduce using rule 128 (comparison -> comparison comp_op expr .)
    OP_GE           reduce using rule 128 (comparison -> comparison comp_op expr .)
    OP_LE           reduce using rule 128 (comparison -> comparison comp_op expr .)
    OP_NE           reduce using rule 128 (comparison -> comparison comp_op expr .)
    OP_NNE          reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_IN          reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_NOT         reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_IS          reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_AND         reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_IF          reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_OR          reduce using rule 128 (comparison -> comparison comp_op expr .)
    ,               reduce using rule 128 (comparison -> comparison comp_op expr .)
    =               reduce using rule 128 (comparison -> comparison comp_op expr .)
    NEWLINE         reduce using rule 128 (comparison -> comparison comp_op expr .)
    ;               reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_FOR         reduce using rule 128 (comparison -> comparison comp_op expr .)
    )               reduce using rule 128 (comparison -> comparison comp_op expr .)
    }               reduce using rule 128 (comparison -> comparison comp_op expr .)
    :               reduce using rule 128 (comparison -> comparison comp_op expr .)
    ADD_ASN         reduce using rule 128 (comparison -> comparison comp_op expr .)
    SUB_ASN         reduce using rule 128 (comparison -> comparison comp_op expr .)
    MUL_ASN         reduce using rule 128 (comparison -> comparison comp_op expr .)
    DIV_ASN         reduce using rule 128 (comparison -> comparison comp_op expr .)
    MOD_ASN         reduce using rule 128 (comparison -> comparison comp_op expr .)
    AND_ASN         reduce using rule 128 (comparison -> comparison comp_op expr .)
    OR_ASN          reduce using rule 128 (comparison -> comparison comp_op expr .)
    XOR_ASN         reduce using rule 128 (comparison -> comparison comp_op expr .)
    LSHIFT_ASN      reduce using rule 128 (comparison -> comparison comp_op expr .)
    RSHIFT_ASN      reduce using rule 128 (comparison -> comparison comp_op expr .)
    POW_ASN         reduce using rule 128 (comparison -> comparison comp_op expr .)
    FDIV_ASN        reduce using rule 128 (comparison -> comparison comp_op expr .)
    `               reduce using rule 128 (comparison -> comparison comp_op expr .)
    INDENT          reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_DEL         reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_PASS        reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_GLOBAL      reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_EXEC        reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_ASSERT      reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_DRAW        reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_BREAK       reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_CONTINUE    reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_RETURN      reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_RAISE       reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_IMPORT      reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_FROM        reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_YIELD       reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_LAMBDA      reduce using rule 128 (comparison -> comparison comp_op expr .)
    +               reduce using rule 128 (comparison -> comparison comp_op expr .)
    -               reduce using rule 128 (comparison -> comparison comp_op expr .)
    ~               reduce using rule 128 (comparison -> comparison comp_op expr .)
    (               reduce using rule 128 (comparison -> comparison comp_op expr .)
    [               reduce using rule 128 (comparison -> comparison comp_op expr .)
    {               reduce using rule 128 (comparison -> comparison comp_op expr .)
    NAME            reduce using rule 128 (comparison -> comparison comp_op expr .)
    NUMBER          reduce using rule 128 (comparison -> comparison comp_op expr .)
    STRING          reduce using rule 128 (comparison -> comparison comp_op expr .)
    ]               reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_AS          reduce using rule 128 (comparison -> comparison comp_op expr .)
    TAG_ELSE        reduce using rule 128 (comparison -> comparison comp_op expr .)
    |               shift and go to state 137


state 243

    (137) comp_op -> TAG_NOT TAG_IN .

    +               reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    -               reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    ~               reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    (               reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    [               reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    {               reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    `               reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    NAME            reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    NUMBER          reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)
    STRING          reduce using rule 137 (comp_op -> TAG_NOT TAG_IN .)


state 244

    (139) comp_op -> TAG_IS TAG_NOT .

    +               reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    -               reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    ~               reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    (               reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    [               reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    {               reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    `               reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    NAME            reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    NUMBER          reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)
    STRING          reduce using rule 139 (comp_op -> TAG_IS TAG_NOT .)


state 245

    (29) arith_expr -> arith_expr + term .
    (31) term -> term . * factor
    (32) term -> term . / factor
    (33) term -> term . % factor
    (34) term -> term . OP_EXACT_DIVISION factor

    +               reduce using rule 29 (arith_expr -> arith_expr + term .)
    -               reduce using rule 29 (arith_expr -> arith_expr + term .)
    OP_LEFT_SHIFT   reduce using rule 29 (arith_expr -> arith_expr + term .)
    OP_RIGHT_SHIFT  reduce using rule 29 (arith_expr -> arith_expr + term .)
    &               reduce using rule 29 (arith_expr -> arith_expr + term .)
    ^               reduce using rule 29 (arith_expr -> arith_expr + term .)
    |               reduce using rule 29 (arith_expr -> arith_expr + term .)
    >               reduce using rule 29 (arith_expr -> arith_expr + term .)
    <               reduce using rule 29 (arith_expr -> arith_expr + term .)
    OP_EQ           reduce using rule 29 (arith_expr -> arith_expr + term .)
    OP_GE           reduce using rule 29 (arith_expr -> arith_expr + term .)
    OP_LE           reduce using rule 29 (arith_expr -> arith_expr + term .)
    OP_NE           reduce using rule 29 (arith_expr -> arith_expr + term .)
    OP_NNE          reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_IN          reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_NOT         reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_IS          reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_AND         reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_IF          reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_OR          reduce using rule 29 (arith_expr -> arith_expr + term .)
    ,               reduce using rule 29 (arith_expr -> arith_expr + term .)
    ADD_ASN         reduce using rule 29 (arith_expr -> arith_expr + term .)
    SUB_ASN         reduce using rule 29 (arith_expr -> arith_expr + term .)
    MUL_ASN         reduce using rule 29 (arith_expr -> arith_expr + term .)
    DIV_ASN         reduce using rule 29 (arith_expr -> arith_expr + term .)
    MOD_ASN         reduce using rule 29 (arith_expr -> arith_expr + term .)
    AND_ASN         reduce using rule 29 (arith_expr -> arith_expr + term .)
    OR_ASN          reduce using rule 29 (arith_expr -> arith_expr + term .)
    XOR_ASN         reduce using rule 29 (arith_expr -> arith_expr + term .)
    LSHIFT_ASN      reduce using rule 29 (arith_expr -> arith_expr + term .)
    RSHIFT_ASN      reduce using rule 29 (arith_expr -> arith_expr + term .)
    POW_ASN         reduce using rule 29 (arith_expr -> arith_expr + term .)
    FDIV_ASN        reduce using rule 29 (arith_expr -> arith_expr + term .)
    =               reduce using rule 29 (arith_expr -> arith_expr + term .)
    NEWLINE         reduce using rule 29 (arith_expr -> arith_expr + term .)
    ;               reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_FOR         reduce using rule 29 (arith_expr -> arith_expr + term .)
    ]               reduce using rule 29 (arith_expr -> arith_expr + term .)
    )               reduce using rule 29 (arith_expr -> arith_expr + term .)
    INDENT          reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_DEL         reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_PASS        reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_GLOBAL      reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_EXEC        reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_ASSERT      reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_DRAW        reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_BREAK       reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_CONTINUE    reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_RETURN      reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_RAISE       reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_IMPORT      reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_FROM        reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_YIELD       reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_LAMBDA      reduce using rule 29 (arith_expr -> arith_expr + term .)
    ~               reduce using rule 29 (arith_expr -> arith_expr + term .)
    (               reduce using rule 29 (arith_expr -> arith_expr + term .)
    [               reduce using rule 29 (arith_expr -> arith_expr + term .)
    {               reduce using rule 29 (arith_expr -> arith_expr + term .)
    `               reduce using rule 29 (arith_expr -> arith_expr + term .)
    NAME            reduce using rule 29 (arith_expr -> arith_expr + term .)
    NUMBER          reduce using rule 29 (arith_expr -> arith_expr + term .)
    STRING          reduce using rule 29 (arith_expr -> arith_expr + term .)
    }               reduce using rule 29 (arith_expr -> arith_expr + term .)
    :               reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_AS          reduce using rule 29 (arith_expr -> arith_expr + term .)
    TAG_ELSE        reduce using rule 29 (arith_expr -> arith_expr + term .)
    *               shift and go to state 130
    /               shift and go to state 131
    %               shift and go to state 129
    OP_EXACT_DIVISION shift and go to state 132


state 246

    (30) arith_expr -> arith_expr - term .
    (31) term -> term . * factor
    (32) term -> term . / factor
    (33) term -> term . % factor
    (34) term -> term . OP_EXACT_DIVISION factor

    +               reduce using rule 30 (arith_expr -> arith_expr - term .)
    -               reduce using rule 30 (arith_expr -> arith_expr - term .)
    OP_LEFT_SHIFT   reduce using rule 30 (arith_expr -> arith_expr - term .)
    OP_RIGHT_SHIFT  reduce using rule 30 (arith_expr -> arith_expr - term .)
    &               reduce using rule 30 (arith_expr -> arith_expr - term .)
    ^               reduce using rule 30 (arith_expr -> arith_expr - term .)
    |               reduce using rule 30 (arith_expr -> arith_expr - term .)
    >               reduce using rule 30 (arith_expr -> arith_expr - term .)
    <               reduce using rule 30 (arith_expr -> arith_expr - term .)
    OP_EQ           reduce using rule 30 (arith_expr -> arith_expr - term .)
    OP_GE           reduce using rule 30 (arith_expr -> arith_expr - term .)
    OP_LE           reduce using rule 30 (arith_expr -> arith_expr - term .)
    OP_NE           reduce using rule 30 (arith_expr -> arith_expr - term .)
    OP_NNE          reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_IN          reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_NOT         reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_IS          reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_AND         reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_IF          reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_OR          reduce using rule 30 (arith_expr -> arith_expr - term .)
    ,               reduce using rule 30 (arith_expr -> arith_expr - term .)
    ADD_ASN         reduce using rule 30 (arith_expr -> arith_expr - term .)
    SUB_ASN         reduce using rule 30 (arith_expr -> arith_expr - term .)
    MUL_ASN         reduce using rule 30 (arith_expr -> arith_expr - term .)
    DIV_ASN         reduce using rule 30 (arith_expr -> arith_expr - term .)
    MOD_ASN         reduce using rule 30 (arith_expr -> arith_expr - term .)
    AND_ASN         reduce using rule 30 (arith_expr -> arith_expr - term .)
    OR_ASN          reduce using rule 30 (arith_expr -> arith_expr - term .)
    XOR_ASN         reduce using rule 30 (arith_expr -> arith_expr - term .)
    LSHIFT_ASN      reduce using rule 30 (arith_expr -> arith_expr - term .)
    RSHIFT_ASN      reduce using rule 30 (arith_expr -> arith_expr - term .)
    POW_ASN         reduce using rule 30 (arith_expr -> arith_expr - term .)
    FDIV_ASN        reduce using rule 30 (arith_expr -> arith_expr - term .)
    =               reduce using rule 30 (arith_expr -> arith_expr - term .)
    NEWLINE         reduce using rule 30 (arith_expr -> arith_expr - term .)
    ;               reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_FOR         reduce using rule 30 (arith_expr -> arith_expr - term .)
    ]               reduce using rule 30 (arith_expr -> arith_expr - term .)
    )               reduce using rule 30 (arith_expr -> arith_expr - term .)
    INDENT          reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_DEL         reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_PASS        reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_GLOBAL      reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_EXEC        reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_ASSERT      reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_DRAW        reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_BREAK       reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_CONTINUE    reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_RETURN      reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_RAISE       reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_IMPORT      reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_FROM        reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_YIELD       reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_LAMBDA      reduce using rule 30 (arith_expr -> arith_expr - term .)
    ~               reduce using rule 30 (arith_expr -> arith_expr - term .)
    (               reduce using rule 30 (arith_expr -> arith_expr - term .)
    [               reduce using rule 30 (arith_expr -> arith_expr - term .)
    {               reduce using rule 30 (arith_expr -> arith_expr - term .)
    `               reduce using rule 30 (arith_expr -> arith_expr - term .)
    NAME            reduce using rule 30 (arith_expr -> arith_expr - term .)
    NUMBER          reduce using rule 30 (arith_expr -> arith_expr - term .)
    STRING          reduce using rule 30 (arith_expr -> arith_expr - term .)
    }               reduce using rule 30 (arith_expr -> arith_expr - term .)
    :               reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_AS          reduce using rule 30 (arith_expr -> arith_expr - term .)
    TAG_ELSE        reduce using rule 30 (arith_expr -> arith_expr - term .)
    *               shift and go to state 130
    /               shift and go to state 131
    %               shift and go to state 129
    OP_EXACT_DIVISION shift and go to state 132


state 247

    (268) dotted_as_names -> dotted_as_names , . dotted_as_name
    (262) dotted_as_name -> . dotted_name
    (263) dotted_as_name -> . dotted_name TAG_AS NAME
    (270) dotted_name -> . NAME
    (271) dotted_name -> . dotted_name . NAME

    NAME            shift and go to state 109

    dotted_name                    shift and go to state 162
    dotted_as_name                 shift and go to state 311

state 248

    (263) dotted_as_name -> dotted_name TAG_AS . NAME

    NAME            shift and go to state 312


state 249

    (78) atom -> { dictormaker } .

    OP_POWER        reduce using rule 78 (atom -> { dictormaker } .)
    (               reduce using rule 78 (atom -> { dictormaker } .)
    [               reduce using rule 78 (atom -> { dictormaker } .)
    .               reduce using rule 78 (atom -> { dictormaker } .)
    *               reduce using rule 78 (atom -> { dictormaker } .)
    /               reduce using rule 78 (atom -> { dictormaker } .)
    %               reduce using rule 78 (atom -> { dictormaker } .)
    OP_EXACT_DIVISION reduce using rule 78 (atom -> { dictormaker } .)
    +               reduce using rule 78 (atom -> { dictormaker } .)
    -               reduce using rule 78 (atom -> { dictormaker } .)
    OP_LEFT_SHIFT   reduce using rule 78 (atom -> { dictormaker } .)
    OP_RIGHT_SHIFT  reduce using rule 78 (atom -> { dictormaker } .)
    &               reduce using rule 78 (atom -> { dictormaker } .)
    ^               reduce using rule 78 (atom -> { dictormaker } .)
    |               reduce using rule 78 (atom -> { dictormaker } .)
    >               reduce using rule 78 (atom -> { dictormaker } .)
    <               reduce using rule 78 (atom -> { dictormaker } .)
    OP_EQ           reduce using rule 78 (atom -> { dictormaker } .)
    OP_GE           reduce using rule 78 (atom -> { dictormaker } .)
    OP_LE           reduce using rule 78 (atom -> { dictormaker } .)
    OP_NE           reduce using rule 78 (atom -> { dictormaker } .)
    OP_NNE          reduce using rule 78 (atom -> { dictormaker } .)
    TAG_IN          reduce using rule 78 (atom -> { dictormaker } .)
    TAG_NOT         reduce using rule 78 (atom -> { dictormaker } .)
    TAG_IS          reduce using rule 78 (atom -> { dictormaker } .)
    TAG_AND         reduce using rule 78 (atom -> { dictormaker } .)
    TAG_IF          reduce using rule 78 (atom -> { dictormaker } .)
    TAG_OR          reduce using rule 78 (atom -> { dictormaker } .)
    ,               reduce using rule 78 (atom -> { dictormaker } .)
    NEWLINE         reduce using rule 78 (atom -> { dictormaker } .)
    ;               reduce using rule 78 (atom -> { dictormaker } .)
    ADD_ASN         reduce using rule 78 (atom -> { dictormaker } .)
    SUB_ASN         reduce using rule 78 (atom -> { dictormaker } .)
    MUL_ASN         reduce using rule 78 (atom -> { dictormaker } .)
    DIV_ASN         reduce using rule 78 (atom -> { dictormaker } .)
    MOD_ASN         reduce using rule 78 (atom -> { dictormaker } .)
    AND_ASN         reduce using rule 78 (atom -> { dictormaker } .)
    OR_ASN          reduce using rule 78 (atom -> { dictormaker } .)
    XOR_ASN         reduce using rule 78 (atom -> { dictormaker } .)
    LSHIFT_ASN      reduce using rule 78 (atom -> { dictormaker } .)
    RSHIFT_ASN      reduce using rule 78 (atom -> { dictormaker } .)
    POW_ASN         reduce using rule 78 (atom -> { dictormaker } .)
    FDIV_ASN        reduce using rule 78 (atom -> { dictormaker } .)
    =               reduce using rule 78 (atom -> { dictormaker } .)
    TAG_FOR         reduce using rule 78 (atom -> { dictormaker } .)
    )               reduce using rule 78 (atom -> { dictormaker } .)
    `               reduce using rule 78 (atom -> { dictormaker } .)
    INDENT          reduce using rule 78 (atom -> { dictormaker } .)
    TAG_DEL         reduce using rule 78 (atom -> { dictormaker } .)
    TAG_PASS        reduce using rule 78 (atom -> { dictormaker } .)
    TAG_GLOBAL      reduce using rule 78 (atom -> { dictormaker } .)
    TAG_EXEC        reduce using rule 78 (atom -> { dictormaker } .)
    TAG_ASSERT      reduce using rule 78 (atom -> { dictormaker } .)
    TAG_DRAW        reduce using rule 78 (atom -> { dictormaker } .)
    TAG_BREAK       reduce using rule 78 (atom -> { dictormaker } .)
    TAG_CONTINUE    reduce using rule 78 (atom -> { dictormaker } .)
    TAG_RETURN      reduce using rule 78 (atom -> { dictormaker } .)
    TAG_RAISE       reduce using rule 78 (atom -> { dictormaker } .)
    TAG_IMPORT      reduce using rule 78 (atom -> { dictormaker } .)
    TAG_FROM        reduce using rule 78 (atom -> { dictormaker } .)
    TAG_YIELD       reduce using rule 78 (atom -> { dictormaker } .)
    TAG_LAMBDA      reduce using rule 78 (atom -> { dictormaker } .)
    ~               reduce using rule 78 (atom -> { dictormaker } .)
    {               reduce using rule 78 (atom -> { dictormaker } .)
    NAME            reduce using rule 78 (atom -> { dictormaker } .)
    NUMBER          reduce using rule 78 (atom -> { dictormaker } .)
    STRING          reduce using rule 78 (atom -> { dictormaker } .)
    ]               reduce using rule 78 (atom -> { dictormaker } .)
    :               reduce using rule 78 (atom -> { dictormaker } .)
    }               reduce using rule 78 (atom -> { dictormaker } .)
    TAG_AS          reduce using rule 78 (atom -> { dictormaker } .)
    TAG_ELSE        reduce using rule 78 (atom -> { dictormaker } .)


state 250

    (99) setmaker -> test comp_for .

    }               reduce using rule 99 (setmaker -> test comp_for .)


state 251

    (94) dictormaker -> test : . test comp_for
    (90) dictormaker_piece -> test : . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 313
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 252

    (93) dictormaker -> dictormaker_piece , .
    (91) dictormaker_piece -> dictormaker_piece , . test : test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    }               reduce using rule 93 (dictormaker -> dictormaker_piece , .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 314
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 253

    (98) setmaker -> setmaker_piece , .
    (96) setmaker_piece -> setmaker_piece , . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    }               reduce using rule 98 (setmaker -> setmaker_piece , .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 315
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    or_test                        shift and go to state 29
    expr                           shift and go to state 31
    strings                        shift and go to state 82

state 254

    (79) atom -> { setmaker } .

    OP_POWER        reduce using rule 79 (atom -> { setmaker } .)
    (               reduce using rule 79 (atom -> { setmaker } .)
    [               reduce using rule 79 (atom -> { setmaker } .)
    .               reduce using rule 79 (atom -> { setmaker } .)
    *               reduce using rule 79 (atom -> { setmaker } .)
    /               reduce using rule 79 (atom -> { setmaker } .)
    %               reduce using rule 79 (atom -> { setmaker } .)
    OP_EXACT_DIVISION reduce using rule 79 (atom -> { setmaker } .)
    +               reduce using rule 79 (atom -> { setmaker } .)
    -               reduce using rule 79 (atom -> { setmaker } .)
    OP_LEFT_SHIFT   reduce using rule 79 (atom -> { setmaker } .)
    OP_RIGHT_SHIFT  reduce using rule 79 (atom -> { setmaker } .)
    &               reduce using rule 79 (atom -> { setmaker } .)
    ^               reduce using rule 79 (atom -> { setmaker } .)
    |               reduce using rule 79 (atom -> { setmaker } .)
    >               reduce using rule 79 (atom -> { setmaker } .)
    <               reduce using rule 79 (atom -> { setmaker } .)
    OP_EQ           reduce using rule 79 (atom -> { setmaker } .)
    OP_GE           reduce using rule 79 (atom -> { setmaker } .)
    OP_LE           reduce using rule 79 (atom -> { setmaker } .)
    OP_NE           reduce using rule 79 (atom -> { setmaker } .)
    OP_NNE          reduce using rule 79 (atom -> { setmaker } .)
    TAG_IN          reduce using rule 79 (atom -> { setmaker } .)
    TAG_NOT         reduce using rule 79 (atom -> { setmaker } .)
    TAG_IS          reduce using rule 79 (atom -> { setmaker } .)
    TAG_AND         reduce using rule 79 (atom -> { setmaker } .)
    TAG_IF          reduce using rule 79 (atom -> { setmaker } .)
    TAG_OR          reduce using rule 79 (atom -> { setmaker } .)
    ,               reduce using rule 79 (atom -> { setmaker } .)
    NEWLINE         reduce using rule 79 (atom -> { setmaker } .)
    ;               reduce using rule 79 (atom -> { setmaker } .)
    ADD_ASN         reduce using rule 79 (atom -> { setmaker } .)
    SUB_ASN         reduce using rule 79 (atom -> { setmaker } .)
    MUL_ASN         reduce using rule 79 (atom -> { setmaker } .)
    DIV_ASN         reduce using rule 79 (atom -> { setmaker } .)
    MOD_ASN         reduce using rule 79 (atom -> { setmaker } .)
    AND_ASN         reduce using rule 79 (atom -> { setmaker } .)
    OR_ASN          reduce using rule 79 (atom -> { setmaker } .)
    XOR_ASN         reduce using rule 79 (atom -> { setmaker } .)
    LSHIFT_ASN      reduce using rule 79 (atom -> { setmaker } .)
    RSHIFT_ASN      reduce using rule 79 (atom -> { setmaker } .)
    POW_ASN         reduce using rule 79 (atom -> { setmaker } .)
    FDIV_ASN        reduce using rule 79 (atom -> { setmaker } .)
    =               reduce using rule 79 (atom -> { setmaker } .)
    TAG_FOR         reduce using rule 79 (atom -> { setmaker } .)
    )               reduce using rule 79 (atom -> { setmaker } .)
    `               reduce using rule 79 (atom -> { setmaker } .)
    INDENT          reduce using rule 79 (atom -> { setmaker } .)
    TAG_DEL         reduce using rule 79 (atom -> { setmaker } .)
    TAG_PASS        reduce using rule 79 (atom -> { setmaker } .)
    TAG_GLOBAL      reduce using rule 79 (atom -> { setmaker } .)
    TAG_EXEC        reduce using rule 79 (atom -> { setmaker } .)
    TAG_ASSERT      reduce using rule 79 (atom -> { setmaker } .)
    TAG_DRAW        reduce using rule 79 (atom -> { setmaker } .)
    TAG_BREAK       reduce using rule 79 (atom -> { setmaker } .)
    TAG_CONTINUE    reduce using rule 79 (atom -> { setmaker } .)
    TAG_RETURN      reduce using rule 79 (atom -> { setmaker } .)
    TAG_RAISE       reduce using rule 79 (atom -> { setmaker } .)
    TAG_IMPORT      reduce using rule 79 (atom -> { setmaker } .)
    TAG_FROM        reduce using rule 79 (atom -> { setmaker } .)
    TAG_YIELD       reduce using rule 79 (atom -> { setmaker } .)
    TAG_LAMBDA      reduce using rule 79 (atom -> { setmaker } .)
    ~               reduce using rule 79 (atom -> { setmaker } .)
    {               reduce using rule 79 (atom -> { setmaker } .)
    NAME            reduce using rule 79 (atom -> { setmaker } .)
    NUMBER          reduce using rule 79 (atom -> { setmaker } .)
    STRING          reduce using rule 79 (atom -> { setmaker } .)
    ]               reduce using rule 79 (atom -> { setmaker } .)
    :               reduce using rule 79 (atom -> { setmaker } .)
    }               reduce using rule 79 (atom -> { setmaker } .)
    TAG_AS          reduce using rule 79 (atom -> { setmaker } .)
    TAG_ELSE        reduce using rule 79 (atom -> { setmaker } .)


state 255

    (22) xor_expr -> xor_expr ^ and_expr .
    (24) and_expr -> and_expr . & shift_expr

    ^               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    |               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    >               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    <               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    OP_EQ           reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    OP_GE           reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    OP_LE           reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    OP_NE           reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    OP_NNE          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_IN          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_NOT         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_IS          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_AND         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_IF          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_OR          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    ,               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    ADD_ASN         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    SUB_ASN         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    MUL_ASN         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    DIV_ASN         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    MOD_ASN         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    AND_ASN         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    OR_ASN          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    XOR_ASN         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    LSHIFT_ASN      reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    RSHIFT_ASN      reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    POW_ASN         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    FDIV_ASN        reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    =               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    NEWLINE         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    ;               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    ]               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_FOR         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    )               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    }               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    `               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    :               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    INDENT          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_DEL         reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_PASS        reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_GLOBAL      reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_EXEC        reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_ASSERT      reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_DRAW        reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_BREAK       reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_CONTINUE    reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_RETURN      reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_RAISE       reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_IMPORT      reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_FROM        reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_YIELD       reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_LAMBDA      reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    +               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    -               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    ~               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    (               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    [               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    {               reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    NAME            reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    NUMBER          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    STRING          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_AS          reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    TAG_ELSE        reduce using rule 22 (xor_expr -> xor_expr ^ and_expr .)
    &               shift and go to state 184


state 256

    (258) import_from -> TAG_FROM dotted_name TAG_IMPORT . *
    (259) import_from -> TAG_FROM dotted_name TAG_IMPORT . import_as_names
    (264) import_as_names -> . import_as_names_ann
    (265) import_as_names -> . import_as_names_ann ,
    (266) import_as_names_ann -> . import_as_name
    (267) import_as_names_ann -> . import_as_names_ann , import_as_name
    (260) import_as_name -> . NAME
    (261) import_as_name -> . NAME TAG_AS NAME

    *               shift and go to state 318
    NAME            shift and go to state 317

    import_as_names                shift and go to state 320
    import_as_name                 shift and go to state 316
    import_as_names_ann            shift and go to state 319

state 257

    (274) namelist -> namelist , . NAME

    NAME            shift and go to state 321


state 258

    (42) power -> atom OP_POWER factor .

    *               reduce using rule 42 (power -> atom OP_POWER factor .)
    /               reduce using rule 42 (power -> atom OP_POWER factor .)
    %               reduce using rule 42 (power -> atom OP_POWER factor .)
    OP_EXACT_DIVISION reduce using rule 42 (power -> atom OP_POWER factor .)
    +               reduce using rule 42 (power -> atom OP_POWER factor .)
    -               reduce using rule 42 (power -> atom OP_POWER factor .)
    OP_LEFT_SHIFT   reduce using rule 42 (power -> atom OP_POWER factor .)
    OP_RIGHT_SHIFT  reduce using rule 42 (power -> atom OP_POWER factor .)
    &               reduce using rule 42 (power -> atom OP_POWER factor .)
    ^               reduce using rule 42 (power -> atom OP_POWER factor .)
    |               reduce using rule 42 (power -> atom OP_POWER factor .)
    >               reduce using rule 42 (power -> atom OP_POWER factor .)
    <               reduce using rule 42 (power -> atom OP_POWER factor .)
    OP_EQ           reduce using rule 42 (power -> atom OP_POWER factor .)
    OP_GE           reduce using rule 42 (power -> atom OP_POWER factor .)
    OP_LE           reduce using rule 42 (power -> atom OP_POWER factor .)
    OP_NE           reduce using rule 42 (power -> atom OP_POWER factor .)
    OP_NNE          reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_IN          reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_NOT         reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_IS          reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_AND         reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_IF          reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_OR          reduce using rule 42 (power -> atom OP_POWER factor .)
    :               reduce using rule 42 (power -> atom OP_POWER factor .)
    ]               reduce using rule 42 (power -> atom OP_POWER factor .)
    ,               reduce using rule 42 (power -> atom OP_POWER factor .)
    ADD_ASN         reduce using rule 42 (power -> atom OP_POWER factor .)
    SUB_ASN         reduce using rule 42 (power -> atom OP_POWER factor .)
    MUL_ASN         reduce using rule 42 (power -> atom OP_POWER factor .)
    DIV_ASN         reduce using rule 42 (power -> atom OP_POWER factor .)
    MOD_ASN         reduce using rule 42 (power -> atom OP_POWER factor .)
    AND_ASN         reduce using rule 42 (power -> atom OP_POWER factor .)
    OR_ASN          reduce using rule 42 (power -> atom OP_POWER factor .)
    XOR_ASN         reduce using rule 42 (power -> atom OP_POWER factor .)
    LSHIFT_ASN      reduce using rule 42 (power -> atom OP_POWER factor .)
    RSHIFT_ASN      reduce using rule 42 (power -> atom OP_POWER factor .)
    POW_ASN         reduce using rule 42 (power -> atom OP_POWER factor .)
    FDIV_ASN        reduce using rule 42 (power -> atom OP_POWER factor .)
    =               reduce using rule 42 (power -> atom OP_POWER factor .)
    NEWLINE         reduce using rule 42 (power -> atom OP_POWER factor .)
    ;               reduce using rule 42 (power -> atom OP_POWER factor .)
    INDENT          reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_DEL         reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_PASS        reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_GLOBAL      reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_EXEC        reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_ASSERT      reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_DRAW        reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_BREAK       reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_CONTINUE    reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_RETURN      reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_RAISE       reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_IMPORT      reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_FROM        reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_YIELD       reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_LAMBDA      reduce using rule 42 (power -> atom OP_POWER factor .)
    ~               reduce using rule 42 (power -> atom OP_POWER factor .)
    (               reduce using rule 42 (power -> atom OP_POWER factor .)
    [               reduce using rule 42 (power -> atom OP_POWER factor .)
    {               reduce using rule 42 (power -> atom OP_POWER factor .)
    `               reduce using rule 42 (power -> atom OP_POWER factor .)
    NAME            reduce using rule 42 (power -> atom OP_POWER factor .)
    NUMBER          reduce using rule 42 (power -> atom OP_POWER factor .)
    STRING          reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_FOR         reduce using rule 42 (power -> atom OP_POWER factor .)
    )               reduce using rule 42 (power -> atom OP_POWER factor .)
    }               reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_AS          reduce using rule 42 (power -> atom OP_POWER factor .)
    TAG_ELSE        reduce using rule 42 (power -> atom OP_POWER factor .)


state 259

    (50) arglist_piece -> argument .

    ,               reduce using rule 50 (arglist_piece -> argument .)
    )               reduce using rule 50 (arglist_piece -> argument .)


state 260

    (52) arglist -> arglist_piece .
    (53) arglist -> arglist_piece . ,
    (51) arglist_piece -> arglist_piece . , argument

    )               reduce using rule 52 (arglist -> arglist_piece .)
    ,               shift and go to state 322


state 261

    (47) trailer -> ( arglist . )

    )               shift and go to state 323


state 262

    (46) trailer -> ( ) .

    OP_POWER        reduce using rule 46 (trailer -> ( ) .)
    (               reduce using rule 46 (trailer -> ( ) .)
    [               reduce using rule 46 (trailer -> ( ) .)
    .               reduce using rule 46 (trailer -> ( ) .)
    *               reduce using rule 46 (trailer -> ( ) .)
    /               reduce using rule 46 (trailer -> ( ) .)
    %               reduce using rule 46 (trailer -> ( ) .)
    OP_EXACT_DIVISION reduce using rule 46 (trailer -> ( ) .)
    +               reduce using rule 46 (trailer -> ( ) .)
    -               reduce using rule 46 (trailer -> ( ) .)
    OP_LEFT_SHIFT   reduce using rule 46 (trailer -> ( ) .)
    OP_RIGHT_SHIFT  reduce using rule 46 (trailer -> ( ) .)
    &               reduce using rule 46 (trailer -> ( ) .)
    ^               reduce using rule 46 (trailer -> ( ) .)
    |               reduce using rule 46 (trailer -> ( ) .)
    >               reduce using rule 46 (trailer -> ( ) .)
    <               reduce using rule 46 (trailer -> ( ) .)
    OP_EQ           reduce using rule 46 (trailer -> ( ) .)
    OP_GE           reduce using rule 46 (trailer -> ( ) .)
    OP_LE           reduce using rule 46 (trailer -> ( ) .)
    OP_NE           reduce using rule 46 (trailer -> ( ) .)
    OP_NNE          reduce using rule 46 (trailer -> ( ) .)
    TAG_IN          reduce using rule 46 (trailer -> ( ) .)
    TAG_NOT         reduce using rule 46 (trailer -> ( ) .)
    TAG_IS          reduce using rule 46 (trailer -> ( ) .)
    TAG_AND         reduce using rule 46 (trailer -> ( ) .)
    TAG_IF          reduce using rule 46 (trailer -> ( ) .)
    TAG_OR          reduce using rule 46 (trailer -> ( ) .)
    ,               reduce using rule 46 (trailer -> ( ) .)
    ADD_ASN         reduce using rule 46 (trailer -> ( ) .)
    SUB_ASN         reduce using rule 46 (trailer -> ( ) .)
    MUL_ASN         reduce using rule 46 (trailer -> ( ) .)
    DIV_ASN         reduce using rule 46 (trailer -> ( ) .)
    MOD_ASN         reduce using rule 46 (trailer -> ( ) .)
    AND_ASN         reduce using rule 46 (trailer -> ( ) .)
    OR_ASN          reduce using rule 46 (trailer -> ( ) .)
    XOR_ASN         reduce using rule 46 (trailer -> ( ) .)
    LSHIFT_ASN      reduce using rule 46 (trailer -> ( ) .)
    RSHIFT_ASN      reduce using rule 46 (trailer -> ( ) .)
    POW_ASN         reduce using rule 46 (trailer -> ( ) .)
    FDIV_ASN        reduce using rule 46 (trailer -> ( ) .)
    =               reduce using rule 46 (trailer -> ( ) .)
    NEWLINE         reduce using rule 46 (trailer -> ( ) .)
    ;               reduce using rule 46 (trailer -> ( ) .)
    TAG_FOR         reduce using rule 46 (trailer -> ( ) .)
    )               reduce using rule 46 (trailer -> ( ) .)
    `               reduce using rule 46 (trailer -> ( ) .)
    INDENT          reduce using rule 46 (trailer -> ( ) .)
    TAG_DEL         reduce using rule 46 (trailer -> ( ) .)
    TAG_PASS        reduce using rule 46 (trailer -> ( ) .)
    TAG_GLOBAL      reduce using rule 46 (trailer -> ( ) .)
    TAG_EXEC        reduce using rule 46 (trailer -> ( ) .)
    TAG_ASSERT      reduce using rule 46 (trailer -> ( ) .)
    TAG_DRAW        reduce using rule 46 (trailer -> ( ) .)
    TAG_BREAK       reduce using rule 46 (trailer -> ( ) .)
    TAG_CONTINUE    reduce using rule 46 (trailer -> ( ) .)
    TAG_RETURN      reduce using rule 46 (trailer -> ( ) .)
    TAG_RAISE       reduce using rule 46 (trailer -> ( ) .)
    TAG_IMPORT      reduce using rule 46 (trailer -> ( ) .)
    TAG_FROM        reduce using rule 46 (trailer -> ( ) .)
    TAG_YIELD       reduce using rule 46 (trailer -> ( ) .)
    TAG_LAMBDA      reduce using rule 46 (trailer -> ( ) .)
    ~               reduce using rule 46 (trailer -> ( ) .)
    {               reduce using rule 46 (trailer -> ( ) .)
    NAME            reduce using rule 46 (trailer -> ( ) .)
    NUMBER          reduce using rule 46 (trailer -> ( ) .)
    STRING          reduce using rule 46 (trailer -> ( ) .)
    ]               reduce using rule 46 (trailer -> ( ) .)
    :               reduce using rule 46 (trailer -> ( ) .)
    }               reduce using rule 46 (trailer -> ( ) .)
    TAG_AS          reduce using rule 46 (trailer -> ( ) .)
    TAG_ELSE        reduce using rule 46 (trailer -> ( ) .)


state 263

    (54) argument -> test .
    (55) argument -> test . comp_for
    (56) argument -> test . = test
    (104) comp_for -> . TAG_FOR exprlist TAG_IN or_test
    (105) comp_for -> . TAG_FOR exprlist TAG_IN or_test comp_iter

    ,               reduce using rule 54 (argument -> test .)
    )               reduce using rule 54 (argument -> test .)
    =               shift and go to state 325
    TAG_FOR         shift and go to state 200

    comp_for                       shift and go to state 324

state 264

    (49) trailer -> . NAME .

    OP_POWER        reduce using rule 49 (trailer -> . NAME .)
    (               reduce using rule 49 (trailer -> . NAME .)
    [               reduce using rule 49 (trailer -> . NAME .)
    .               reduce using rule 49 (trailer -> . NAME .)
    *               reduce using rule 49 (trailer -> . NAME .)
    /               reduce using rule 49 (trailer -> . NAME .)
    %               reduce using rule 49 (trailer -> . NAME .)
    OP_EXACT_DIVISION reduce using rule 49 (trailer -> . NAME .)
    +               reduce using rule 49 (trailer -> . NAME .)
    -               reduce using rule 49 (trailer -> . NAME .)
    OP_LEFT_SHIFT   reduce using rule 49 (trailer -> . NAME .)
    OP_RIGHT_SHIFT  reduce using rule 49 (trailer -> . NAME .)
    &               reduce using rule 49 (trailer -> . NAME .)
    ^               reduce using rule 49 (trailer -> . NAME .)
    |               reduce using rule 49 (trailer -> . NAME .)
    >               reduce using rule 49 (trailer -> . NAME .)
    <               reduce using rule 49 (trailer -> . NAME .)
    OP_EQ           reduce using rule 49 (trailer -> . NAME .)
    OP_GE           reduce using rule 49 (trailer -> . NAME .)
    OP_LE           reduce using rule 49 (trailer -> . NAME .)
    OP_NE           reduce using rule 49 (trailer -> . NAME .)
    OP_NNE          reduce using rule 49 (trailer -> . NAME .)
    TAG_IN          reduce using rule 49 (trailer -> . NAME .)
    TAG_NOT         reduce using rule 49 (trailer -> . NAME .)
    TAG_IS          reduce using rule 49 (trailer -> . NAME .)
    TAG_AND         reduce using rule 49 (trailer -> . NAME .)
    TAG_IF          reduce using rule 49 (trailer -> . NAME .)
    TAG_OR          reduce using rule 49 (trailer -> . NAME .)
    ,               reduce using rule 49 (trailer -> . NAME .)
    ADD_ASN         reduce using rule 49 (trailer -> . NAME .)
    SUB_ASN         reduce using rule 49 (trailer -> . NAME .)
    MUL_ASN         reduce using rule 49 (trailer -> . NAME .)
    DIV_ASN         reduce using rule 49 (trailer -> . NAME .)
    MOD_ASN         reduce using rule 49 (trailer -> . NAME .)
    AND_ASN         reduce using rule 49 (trailer -> . NAME .)
    OR_ASN          reduce using rule 49 (trailer -> . NAME .)
    XOR_ASN         reduce using rule 49 (trailer -> . NAME .)
    LSHIFT_ASN      reduce using rule 49 (trailer -> . NAME .)
    RSHIFT_ASN      reduce using rule 49 (trailer -> . NAME .)
    POW_ASN         reduce using rule 49 (trailer -> . NAME .)
    FDIV_ASN        reduce using rule 49 (trailer -> . NAME .)
    =               reduce using rule 49 (trailer -> . NAME .)
    NEWLINE         reduce using rule 49 (trailer -> . NAME .)
    ;               reduce using rule 49 (trailer -> . NAME .)
    TAG_FOR         reduce using rule 49 (trailer -> . NAME .)
    )               reduce using rule 49 (trailer -> . NAME .)
    `               reduce using rule 49 (trailer -> . NAME .)
    INDENT          reduce using rule 49 (trailer -> . NAME .)
    TAG_DEL         reduce using rule 49 (trailer -> . NAME .)
    TAG_PASS        reduce using rule 49 (trailer -> . NAME .)
    TAG_GLOBAL      reduce using rule 49 (trailer -> . NAME .)
    TAG_EXEC        reduce using rule 49 (trailer -> . NAME .)
    TAG_ASSERT      reduce using rule 49 (trailer -> . NAME .)
    TAG_DRAW        reduce using rule 49 (trailer -> . NAME .)
    TAG_BREAK       reduce using rule 49 (trailer -> . NAME .)
    TAG_CONTINUE    reduce using rule 49 (trailer -> . NAME .)
    TAG_RETURN      reduce using rule 49 (trailer -> . NAME .)
    TAG_RAISE       reduce using rule 49 (trailer -> . NAME .)
    TAG_IMPORT      reduce using rule 49 (trailer -> . NAME .)
    TAG_FROM        reduce using rule 49 (trailer -> . NAME .)
    TAG_YIELD       reduce using rule 49 (trailer -> . NAME .)
    TAG_LAMBDA      reduce using rule 49 (trailer -> . NAME .)
    ~               reduce using rule 49 (trailer -> . NAME .)
    {               reduce using rule 49 (trailer -> . NAME .)
    NAME            reduce using rule 49 (trailer -> . NAME .)
    NUMBER          reduce using rule 49 (trailer -> . NAME .)
    STRING          reduce using rule 49 (trailer -> . NAME .)
    ]               reduce using rule 49 (trailer -> . NAME .)
    :               reduce using rule 49 (trailer -> . NAME .)
    }               reduce using rule 49 (trailer -> . NAME .)
    TAG_AS          reduce using rule 49 (trailer -> . NAME .)
    TAG_ELSE        reduce using rule 49 (trailer -> . NAME .)


state 265

    (43) power -> atom trailers OP_POWER . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    power                          shift and go to state 40
    factor                         shift and go to state 326
    atom                           shift and go to state 56
    strings                        shift and go to state 82

state 266

    (44) trailers -> trailers trailer .

    OP_POWER        reduce using rule 44 (trailers -> trailers trailer .)
    (               reduce using rule 44 (trailers -> trailers trailer .)
    [               reduce using rule 44 (trailers -> trailers trailer .)
    .               reduce using rule 44 (trailers -> trailers trailer .)
    *               reduce using rule 44 (trailers -> trailers trailer .)
    /               reduce using rule 44 (trailers -> trailers trailer .)
    %               reduce using rule 44 (trailers -> trailers trailer .)
    OP_EXACT_DIVISION reduce using rule 44 (trailers -> trailers trailer .)
    +               reduce using rule 44 (trailers -> trailers trailer .)
    -               reduce using rule 44 (trailers -> trailers trailer .)
    OP_LEFT_SHIFT   reduce using rule 44 (trailers -> trailers trailer .)
    OP_RIGHT_SHIFT  reduce using rule 44 (trailers -> trailers trailer .)
    &               reduce using rule 44 (trailers -> trailers trailer .)
    ^               reduce using rule 44 (trailers -> trailers trailer .)
    |               reduce using rule 44 (trailers -> trailers trailer .)
    >               reduce using rule 44 (trailers -> trailers trailer .)
    <               reduce using rule 44 (trailers -> trailers trailer .)
    OP_EQ           reduce using rule 44 (trailers -> trailers trailer .)
    OP_GE           reduce using rule 44 (trailers -> trailers trailer .)
    OP_LE           reduce using rule 44 (trailers -> trailers trailer .)
    OP_NE           reduce using rule 44 (trailers -> trailers trailer .)
    OP_NNE          reduce using rule 44 (trailers -> trailers trailer .)
    TAG_IN          reduce using rule 44 (trailers -> trailers trailer .)
    TAG_NOT         reduce using rule 44 (trailers -> trailers trailer .)
    TAG_IS          reduce using rule 44 (trailers -> trailers trailer .)
    TAG_AND         reduce using rule 44 (trailers -> trailers trailer .)
    TAG_IF          reduce using rule 44 (trailers -> trailers trailer .)
    TAG_OR          reduce using rule 44 (trailers -> trailers trailer .)
    ,               reduce using rule 44 (trailers -> trailers trailer .)
    ADD_ASN         reduce using rule 44 (trailers -> trailers trailer .)
    SUB_ASN         reduce using rule 44 (trailers -> trailers trailer .)
    MUL_ASN         reduce using rule 44 (trailers -> trailers trailer .)
    DIV_ASN         reduce using rule 44 (trailers -> trailers trailer .)
    MOD_ASN         reduce using rule 44 (trailers -> trailers trailer .)
    AND_ASN         reduce using rule 44 (trailers -> trailers trailer .)
    OR_ASN          reduce using rule 44 (trailers -> trailers trailer .)
    XOR_ASN         reduce using rule 44 (trailers -> trailers trailer .)
    LSHIFT_ASN      reduce using rule 44 (trailers -> trailers trailer .)
    RSHIFT_ASN      reduce using rule 44 (trailers -> trailers trailer .)
    POW_ASN         reduce using rule 44 (trailers -> trailers trailer .)
    FDIV_ASN        reduce using rule 44 (trailers -> trailers trailer .)
    =               reduce using rule 44 (trailers -> trailers trailer .)
    NEWLINE         reduce using rule 44 (trailers -> trailers trailer .)
    ;               reduce using rule 44 (trailers -> trailers trailer .)
    TAG_FOR         reduce using rule 44 (trailers -> trailers trailer .)
    )               reduce using rule 44 (trailers -> trailers trailer .)
    `               reduce using rule 44 (trailers -> trailers trailer .)
    INDENT          reduce using rule 44 (trailers -> trailers trailer .)
    TAG_DEL         reduce using rule 44 (trailers -> trailers trailer .)
    TAG_PASS        reduce using rule 44 (trailers -> trailers trailer .)
    TAG_GLOBAL      reduce using rule 44 (trailers -> trailers trailer .)
    TAG_EXEC        reduce using rule 44 (trailers -> trailers trailer .)
    TAG_ASSERT      reduce using rule 44 (trailers -> trailers trailer .)
    TAG_DRAW        reduce using rule 44 (trailers -> trailers trailer .)
    TAG_BREAK       reduce using rule 44 (trailers -> trailers trailer .)
    TAG_CONTINUE    reduce using rule 44 (trailers -> trailers trailer .)
    TAG_RETURN      reduce using rule 44 (trailers -> trailers trailer .)
    TAG_RAISE       reduce using rule 44 (trailers -> trailers trailer .)
    TAG_IMPORT      reduce using rule 44 (trailers -> trailers trailer .)
    TAG_FROM        reduce using rule 44 (trailers -> trailers trailer .)
    TAG_YIELD       reduce using rule 44 (trailers -> trailers trailer .)
    TAG_LAMBDA      reduce using rule 44 (trailers -> trailers trailer .)
    ~               reduce using rule 44 (trailers -> trailers trailer .)
    {               reduce using rule 44 (trailers -> trailers trailer .)
    NAME            reduce using rule 44 (trailers -> trailers trailer .)
    NUMBER          reduce using rule 44 (trailers -> trailers trailer .)
    STRING          reduce using rule 44 (trailers -> trailers trailer .)
    ]               reduce using rule 44 (trailers -> trailers trailer .)
    :               reduce using rule 44 (trailers -> trailers trailer .)
    }               reduce using rule 44 (trailers -> trailers trailer .)
    TAG_AS          reduce using rule 44 (trailers -> trailers trailer .)
    TAG_ELSE        reduce using rule 44 (trailers -> trailers trailer .)


state 267

    (60) subscript -> . . . .

    .               shift and go to state 327


state 268

    (61) subscript -> test .
    (63) subscript -> test . :
    (65) subscript -> test . : test
    (67) subscript -> test . : sliceop
    (69) subscript -> test . : test sliceop

    ]               reduce using rule 61 (subscript -> test .)
    ,               reduce using rule 61 (subscript -> test .)
    :               shift and go to state 328


state 269

    (59) subscriptlist -> subscript .

    ]               reduce using rule 59 (subscriptlist -> subscript .)
    ,               reduce using rule 59 (subscriptlist -> subscript .)


state 270

    (62) subscript -> : .
    (64) subscript -> : . test
    (66) subscript -> : . sliceop
    (68) subscript -> : . test sliceop
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (70) sliceop -> . :
    (71) sliceop -> . : test
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    ]               reduce using rule 62 (subscript -> : .)
    ,               reduce using rule 62 (subscript -> : .)
    :               shift and go to state 330
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 329
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    sliceop                        shift and go to state 331
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 271

    (48) trailer -> [ subscriptlist . ]
    (57) subscriptlist -> subscriptlist . , subscript
    (58) subscriptlist -> subscriptlist . ,

    ]               shift and go to state 332
    ,               shift and go to state 333


state 272

    (15) classdef -> TAG_CLASS NAME ( . testlist ) : suite
    (16) classdef -> TAG_CLASS NAME ( . ) : suite
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    )               shift and go to state 334
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    testlist_anns                  shift and go to state 35
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 74
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    testlist                       shift and go to state 335
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 273

    (14) classdef -> TAG_CLASS NAME : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    expr_stmt                      shift and go to state 23
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    raise_stmt                     shift and go to state 57
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 336
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 274

    (160) funcdef -> TAG_DEF NAME parameters . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 337
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 275

    (161) parameters -> ( . )
    (162) parameters -> ( . varargslist )
    (142) varargslist -> . varargs_one , varargs_two
    (143) varargslist -> . varargs_two
    (144) varargslist -> . varargs_one
    (145) varargslist -> . varargs_one ,
    (146) varargs_one -> . varargs_one , fpdef
    (147) varargs_one -> . varargs_one , fpdef = test
    (148) varargs_one -> . fpdef
    (149) varargs_one -> . fpdef = test
    (150) varargs_two -> . * NAME
    (151) varargs_two -> . OP_POWER NAME
    (152) varargs_two -> . * NAME , OP_POWER NAME
    (153) fpdef -> . NAME
    (154) fpdef -> . ( fplist )

    )               shift and go to state 338
    *               shift and go to state 100
    OP_POWER        shift and go to state 96
    NAME            shift and go to state 97
    (               shift and go to state 98

    fpdef                          shift and go to state 99
    varargs_two                    shift and go to state 101
    varargslist                    shift and go to state 339
    varargs_one                    shift and go to state 103

state 276

    (24) and_expr -> and_expr & shift_expr .
    (26) shift_expr -> shift_expr . OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> shift_expr . OP_RIGHT_SHIFT arith_expr

    &               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    ^               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    |               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    >               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    <               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    OP_EQ           reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    OP_GE           reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    OP_LE           reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    OP_NE           reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    OP_NNE          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_IN          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_NOT         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_IS          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_AND         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_OR          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_FOR         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_IF          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    ]               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    INDENT          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_DEL         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_PASS        reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_GLOBAL      reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_EXEC        reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_ASSERT      reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_DRAW        reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_BREAK       reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_CONTINUE    reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_RETURN      reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_RAISE       reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_IMPORT      reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_FROM        reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_YIELD       reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_LAMBDA      reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    +               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    -               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    ~               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    (               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    [               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    {               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    `               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    NAME            reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    NUMBER          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    STRING          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    ,               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    ADD_ASN         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    SUB_ASN         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    MUL_ASN         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    DIV_ASN         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    MOD_ASN         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    AND_ASN         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    OR_ASN          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    XOR_ASN         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    LSHIFT_ASN      reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    RSHIFT_ASN      reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    POW_ASN         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    FDIV_ASN        reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    =               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    NEWLINE         reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    ;               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    }               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    :               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    )               reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_AS          reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    TAG_ELSE        reduce using rule 24 (and_expr -> and_expr & shift_expr .)
    OP_LEFT_SHIFT   shift and go to state 88
    OP_RIGHT_SHIFT  shift and go to state 87


state 277

    (124) and_test -> and_test TAG_AND not_test .

    TAG_AND         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_IF          reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_OR          reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    NEWLINE         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    ;               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    `               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    ,               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    :               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    ADD_ASN         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    SUB_ASN         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    MUL_ASN         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    DIV_ASN         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    MOD_ASN         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    AND_ASN         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    OR_ASN          reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    XOR_ASN         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    LSHIFT_ASN      reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    RSHIFT_ASN      reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    POW_ASN         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    FDIV_ASN        reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    =               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_FOR         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    ]               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    )               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    INDENT          reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_DEL         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_PASS        reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_GLOBAL      reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_EXEC        reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_ASSERT      reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_DRAW        reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_BREAK       reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_CONTINUE    reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_RETURN      reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_RAISE       reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_IMPORT      reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_FROM        reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_YIELD       reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_LAMBDA      reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_NOT         reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    +               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    -               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    ~               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    (               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    [               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    {               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    NAME            reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    NUMBER          reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    STRING          reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    }               reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_AS          reduce using rule 124 (and_test -> and_test TAG_AND not_test .)
    TAG_ELSE        reduce using rule 124 (and_test -> and_test TAG_AND not_test .)


state 278

    (277) exec_stmt -> TAG_EXEC expr TAG_IN test .
    (278) exec_stmt -> TAG_EXEC expr TAG_IN test . , test

    NEWLINE         reduce using rule 277 (exec_stmt -> TAG_EXEC expr TAG_IN test .)
    ;               reduce using rule 277 (exec_stmt -> TAG_EXEC expr TAG_IN test .)
    ,               shift and go to state 340


state 279

    (104) comp_for -> TAG_FOR exprlist . TAG_IN or_test
    (105) comp_for -> TAG_FOR exprlist . TAG_IN or_test comp_iter
    (18) exprlist -> exprlist . , expr

    TAG_IN          shift and go to state 341
    ,               shift and go to state 213


state 280

    (154) fpdef -> ( fplist ) .

    =               reduce using rule 154 (fpdef -> ( fplist ) .)
    ,               reduce using rule 154 (fpdef -> ( fplist ) .)
    :               reduce using rule 154 (fpdef -> ( fplist ) .)
    )               reduce using rule 154 (fpdef -> ( fplist ) .)


state 281

    (158) fplist -> fplist_top , .
    (156) fplist_top -> fplist_top , . fpdef
    (153) fpdef -> . NAME
    (154) fpdef -> . ( fplist )

    )               reduce using rule 158 (fplist -> fplist_top , .)
    NAME            shift and go to state 97
    (               shift and go to state 98

    fpdef                          shift and go to state 342

state 282

    (149) varargs_one -> fpdef = test .

    ,               reduce using rule 149 (varargs_one -> fpdef = test .)
    :               reduce using rule 149 (varargs_one -> fpdef = test .)
    )               reduce using rule 149 (varargs_one -> fpdef = test .)


state 283

    (152) varargs_two -> * NAME , . OP_POWER NAME

    OP_POWER        shift and go to state 343


state 284

    (141) lambdef -> TAG_LAMBDA varargslist : test .

    ,               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    INDENT          reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_DEL         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_PASS        reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_GLOBAL      reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_EXEC        reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_ASSERT      reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_DRAW        reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_BREAK       reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_CONTINUE    reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_RETURN      reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_RAISE       reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_IMPORT      reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_FROM        reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_YIELD       reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_LAMBDA      reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_NOT         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    +               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    -               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    ~               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    (               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    [               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    {               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    `               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    NAME            reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    NUMBER          reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    STRING          reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    =               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_FOR         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    )               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    ADD_ASN         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    SUB_ASN         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    MUL_ASN         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    DIV_ASN         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    MOD_ASN         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    AND_ASN         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    OR_ASN          reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    XOR_ASN         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    LSHIFT_ASN      reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    RSHIFT_ASN      reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    POW_ASN         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    FDIV_ASN        reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    NEWLINE         reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    ;               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    ]               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    }               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    :               reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)
    TAG_AS          reduce using rule 141 (lambdef -> TAG_LAMBDA varargslist : test .)


state 285

    (146) varargs_one -> varargs_one , fpdef .
    (147) varargs_one -> varargs_one , fpdef . = test

    ,               reduce using rule 146 (varargs_one -> varargs_one , fpdef .)
    :               reduce using rule 146 (varargs_one -> varargs_one , fpdef .)
    )               reduce using rule 146 (varargs_one -> varargs_one , fpdef .)
    =               shift and go to state 344


state 286

    (142) varargslist -> varargs_one , varargs_two .

    :               reduce using rule 142 (varargslist -> varargs_one , varargs_two .)
    )               reduce using rule 142 (varargslist -> varargs_one , varargs_two .)


state 287

    (253) raise_stmt -> TAG_RAISE test , test .
    (254) raise_stmt -> TAG_RAISE test , test . , test

    NEWLINE         reduce using rule 253 (raise_stmt -> TAG_RAISE test , test .)
    ;               reduce using rule 253 (raise_stmt -> TAG_RAISE test , test .)
    ,               shift and go to state 345


state 288

    (190) for_stmt -> TAG_FOR exprlist TAG_IN testlist . suite
    (191) for_stmt -> TAG_FOR exprlist TAG_IN testlist . suite TAG_ELSE suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    expr_stmt                      shift and go to state 23
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    raise_stmt                     shift and go to state 57
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 346
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 289

    (18) exprlist -> exprlist , expr .
    (20) expr -> expr . | xor_expr

    TAG_IN          reduce using rule 18 (exprlist -> exprlist , expr .)
    ,               reduce using rule 18 (exprlist -> exprlist , expr .)
    NEWLINE         reduce using rule 18 (exprlist -> exprlist , expr .)
    ;               reduce using rule 18 (exprlist -> exprlist , expr .)
    |               shift and go to state 137


state 290

    (9) decorator -> @ dotted_name ( arglist . ) NEWLINE

    )               shift and go to state 347


state 291

    (8) decorator -> @ dotted_name ( ) . NEWLINE

    NEWLINE         shift and go to state 348


state 292

    (271) dotted_name -> dotted_name . NAME .

    TAG_AS          reduce using rule 271 (dotted_name -> dotted_name . NAME .)
    .               reduce using rule 271 (dotted_name -> dotted_name . NAME .)
    ,               reduce using rule 271 (dotted_name -> dotted_name . NAME .)
    NEWLINE         reduce using rule 271 (dotted_name -> dotted_name . NAME .)
    ;               reduce using rule 271 (dotted_name -> dotted_name . NAME .)
    (               reduce using rule 271 (dotted_name -> dotted_name . NAME .)
    TAG_IMPORT      reduce using rule 271 (dotted_name -> dotted_name . NAME .)


state 293

    (206) simple_stmt -> simple_stmt ; small_stmt ; . NEWLINE

    NEWLINE         shift and go to state 349


state 294

    (205) simple_stmt -> simple_stmt ; small_stmt NEWLINE .

    ;               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_ELSE        reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    ENDMARKER       reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    NEWLINE         reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_IF          reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_WHILE       reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_FOR         reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_TRY         reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_DEF         reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_CLASS       reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_DEL         reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_PASS        reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_GLOBAL      reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_EXEC        reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_ASSERT      reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_DRAW        reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_BREAK       reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_CONTINUE    reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_RETURN      reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_RAISE       reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_IMPORT      reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_FROM        reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    @               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_YIELD       reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_LAMBDA      reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_NOT         reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    +               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    -               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    ~               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    (               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    [               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    {               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    `               reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    NAME            reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    NUMBER          reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    STRING          reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    DEDENT          reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_ELIF        reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_FINALLY     reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)
    TAG_EXCEPT      reduce using rule 205 (simple_stmt -> simple_stmt ; small_stmt NEWLINE .)


state 295

    (236) expr_stmt_bottom -> expr_stmt_bottom = yield_expr .

    =               reduce using rule 236 (expr_stmt_bottom -> expr_stmt_bottom = yield_expr .)
    NEWLINE         reduce using rule 236 (expr_stmt_bottom -> expr_stmt_bottom = yield_expr .)
    ;               reduce using rule 236 (expr_stmt_bottom -> expr_stmt_bottom = yield_expr .)


state 296

    (237) expr_stmt_bottom -> expr_stmt_bottom = testlist .

    =               reduce using rule 237 (expr_stmt_bottom -> expr_stmt_bottom = testlist .)
    NEWLINE         reduce using rule 237 (expr_stmt_bottom -> expr_stmt_bottom = testlist .)
    ;               reduce using rule 237 (expr_stmt_bottom -> expr_stmt_bottom = testlist .)


state 297

    (87) testlist1 -> testlist1 , test .

    `               reduce using rule 87 (testlist1 -> testlist1 , test .)
    ,               reduce using rule 87 (testlist1 -> testlist1 , test .)


state 298

    (185) if_stmt -> TAG_IF test suite TAG_ELSE . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 350
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 299

    (203) elif_list -> TAG_ELIF . test : suite
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 351
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 300

    (186) if_stmt -> TAG_IF test suite elif_list .
    (187) if_stmt -> TAG_IF test suite elif_list . TAG_ELSE suite
    (204) elif_list -> elif_list . TAG_ELIF test : suite

    DEDENT          reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_IF          reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_WHILE       reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_FOR         reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_TRY         reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_DEF         reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_CLASS       reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_DEL         reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_PASS        reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_GLOBAL      reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_EXEC        reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_ASSERT      reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_DRAW        reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_BREAK       reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_CONTINUE    reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_RETURN      reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_RAISE       reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_IMPORT      reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_FROM        reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    @               reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_YIELD       reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_LAMBDA      reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_NOT         reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    +               reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    -               reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    ~               reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    (               reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    [               reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    {               reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    `               reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    NAME            reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    NUMBER          reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    STRING          reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    ENDMARKER       reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    NEWLINE         reduce using rule 186 (if_stmt -> TAG_IF test suite elif_list .)
    TAG_ELSE        shift and go to state 352
    TAG_ELIF        shift and go to state 353


state 301

    (164) suite -> INDENT stmts . DEDENT
    (174) stmts -> stmts . stmt
    (175) stmt -> . simple_stmt
    (176) stmt -> . compound_stmt
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (177) compound_stmt -> . if_stmt
    (178) compound_stmt -> . while_stmt
    (179) compound_stmt -> . for_stmt
    (180) compound_stmt -> . try_stmt
    (181) compound_stmt -> . funcdef
    (182) compound_stmt -> . classdef
    (183) compound_stmt -> . decorated
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (184) if_stmt -> . TAG_IF test suite
    (185) if_stmt -> . TAG_IF test suite TAG_ELSE suite
    (186) if_stmt -> . TAG_IF test suite elif_list
    (187) if_stmt -> . TAG_IF test suite elif_list TAG_ELSE suite
    (188) while_stmt -> . TAG_WHILE test suite
    (189) while_stmt -> . TAG_WHILE test suite TAG_ELSE suite
    (190) for_stmt -> . TAG_FOR exprlist TAG_IN testlist suite
    (191) for_stmt -> . TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite
    (192) try_stmt -> . TAG_TRY : suite TAG_FINALLY : suite
    (193) try_stmt -> . TAG_TRY : suite except_clauses
    (194) try_stmt -> . TAG_TRY : suite except_clauses TAG_ELSE : suite
    (195) try_stmt -> . TAG_TRY : suite except_clauses TAG_FINALLY : suite
    (196) try_stmt -> . TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite
    (160) funcdef -> . TAG_DEF NAME parameters suite
    (14) classdef -> . TAG_CLASS NAME : suite
    (15) classdef -> . TAG_CLASS NAME ( testlist ) : suite
    (16) classdef -> . TAG_CLASS NAME ( ) : suite
    (12) decorated -> . decorators classdef
    (13) decorated -> . decorators funcdef
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (10) decorators -> . decorator
    (11) decorators -> . decorators decorator
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (7) decorator -> . @ dotted_name NEWLINE
    (8) decorator -> . @ dotted_name ( ) NEWLINE
    (9) decorator -> . @ dotted_name ( arglist ) NEWLINE
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    DEDENT          shift and go to state 354
    TAG_IF          shift and go to state 28
    TAG_WHILE       shift and go to state 37
    TAG_FOR         shift and go to state 15
    TAG_TRY         shift and go to state 30
    TAG_DEF         shift and go to state 62
    TAG_CLASS       shift and go to state 58
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    @               shift and go to state 16
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    try_stmt                       shift and go to state 6
    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    import_name                    shift and go to state 76
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    atom                           shift and go to state 56
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    compound_stmt                  shift and go to state 39
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 17
    testlist                       shift and go to state 18
    classdef                       shift and go to state 19
    stmt                           shift and go to state 355
    assert_stmt                    shift and go to state 20
    for_stmt                       shift and go to state 21
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    funcdef                        shift and go to state 5
    decorated                      shift and go to state 79
    import_stmt                    shift and go to state 44
    decorator                      shift and go to state 24
    pass_stmt                      shift and go to state 46
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    if_stmt                        shift and go to state 27
    xor_expr                       shift and go to state 52
    decorators                     shift and go to state 38
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    while_stmt                     shift and go to state 73
    expr                           shift and go to state 31
    arith_expr                     shift and go to state 47
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 302

    (173) stmts -> stmt .

    DEDENT          reduce using rule 173 (stmts -> stmt .)
    TAG_IF          reduce using rule 173 (stmts -> stmt .)
    TAG_WHILE       reduce using rule 173 (stmts -> stmt .)
    TAG_FOR         reduce using rule 173 (stmts -> stmt .)
    TAG_TRY         reduce using rule 173 (stmts -> stmt .)
    TAG_DEF         reduce using rule 173 (stmts -> stmt .)
    TAG_CLASS       reduce using rule 173 (stmts -> stmt .)
    TAG_DEL         reduce using rule 173 (stmts -> stmt .)
    TAG_PASS        reduce using rule 173 (stmts -> stmt .)
    TAG_GLOBAL      reduce using rule 173 (stmts -> stmt .)
    TAG_EXEC        reduce using rule 173 (stmts -> stmt .)
    TAG_ASSERT      reduce using rule 173 (stmts -> stmt .)
    TAG_DRAW        reduce using rule 173 (stmts -> stmt .)
    TAG_BREAK       reduce using rule 173 (stmts -> stmt .)
    TAG_CONTINUE    reduce using rule 173 (stmts -> stmt .)
    TAG_RETURN      reduce using rule 173 (stmts -> stmt .)
    TAG_RAISE       reduce using rule 173 (stmts -> stmt .)
    TAG_IMPORT      reduce using rule 173 (stmts -> stmt .)
    TAG_FROM        reduce using rule 173 (stmts -> stmt .)
    @               reduce using rule 173 (stmts -> stmt .)
    TAG_YIELD       reduce using rule 173 (stmts -> stmt .)
    TAG_LAMBDA      reduce using rule 173 (stmts -> stmt .)
    TAG_NOT         reduce using rule 173 (stmts -> stmt .)
    +               reduce using rule 173 (stmts -> stmt .)
    -               reduce using rule 173 (stmts -> stmt .)
    ~               reduce using rule 173 (stmts -> stmt .)
    (               reduce using rule 173 (stmts -> stmt .)
    [               reduce using rule 173 (stmts -> stmt .)
    {               reduce using rule 173 (stmts -> stmt .)
    `               reduce using rule 173 (stmts -> stmt .)
    NAME            reduce using rule 173 (stmts -> stmt .)
    NUMBER          reduce using rule 173 (stmts -> stmt .)
    STRING          reduce using rule 173 (stmts -> stmt .)


state 303

    (119) test -> or_test TAG_IF or_test TAG_ELSE . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 356
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 304

    (199) except_clause -> TAG_EXCEPT .
    (200) except_clause -> TAG_EXCEPT . test
    (201) except_clause -> TAG_EXCEPT . test TAG_AS test
    (202) except_clause -> TAG_EXCEPT . test , test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    :               reduce using rule 199 (except_clause -> TAG_EXCEPT .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 357
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 305

    (193) try_stmt -> TAG_TRY : suite except_clauses .
    (194) try_stmt -> TAG_TRY : suite except_clauses . TAG_ELSE : suite
    (195) try_stmt -> TAG_TRY : suite except_clauses . TAG_FINALLY : suite
    (196) try_stmt -> TAG_TRY : suite except_clauses . TAG_ELSE : suite TAG_FINALLY : suite
    (197) except_clauses -> except_clauses . except_clause : suite
    (199) except_clause -> . TAG_EXCEPT
    (200) except_clause -> . TAG_EXCEPT test
    (201) except_clause -> . TAG_EXCEPT test TAG_AS test
    (202) except_clause -> . TAG_EXCEPT test , test

    DEDENT          reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_IF          reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_WHILE       reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_FOR         reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_TRY         reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_DEF         reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_CLASS       reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_DEL         reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_PASS        reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_GLOBAL      reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_EXEC        reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_ASSERT      reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_DRAW        reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_BREAK       reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_CONTINUE    reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_RETURN      reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_RAISE       reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_IMPORT      reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_FROM        reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    @               reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_YIELD       reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_LAMBDA      reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_NOT         reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    +               reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    -               reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    ~               reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    (               reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    [               reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    {               reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    `               reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    NAME            reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    NUMBER          reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    STRING          reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    ENDMARKER       reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    NEWLINE         reduce using rule 193 (try_stmt -> TAG_TRY : suite except_clauses .)
    TAG_ELSE        shift and go to state 358
    TAG_FINALLY     shift and go to state 359
    TAG_EXCEPT      shift and go to state 304

    except_clause                  shift and go to state 360

state 306

    (198) except_clauses -> except_clause . : suite

    :               shift and go to state 361


state 307

    (192) try_stmt -> TAG_TRY : suite TAG_FINALLY . : suite

    :               shift and go to state 362


state 308

    (189) while_stmt -> TAG_WHILE test suite TAG_ELSE . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 363
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 309

    (280) assert_stmt -> TAG_ASSERT test , test .

    NEWLINE         reduce using rule 280 (assert_stmt -> TAG_ASSERT test , test .)
    ;               reduce using rule 280 (assert_stmt -> TAG_ASSERT test , test .)


state 310

    (110) list_for -> TAG_FOR exprlist . TAG_IN testlist_safe
    (111) list_for -> TAG_FOR exprlist . TAG_IN testlist_safe list_iter
    (18) exprlist -> exprlist . , expr

    TAG_IN          shift and go to state 364
    ,               shift and go to state 213


state 311

    (268) dotted_as_names -> dotted_as_names , dotted_as_name .

    ,               reduce using rule 268 (dotted_as_names -> dotted_as_names , dotted_as_name .)
    NEWLINE         reduce using rule 268 (dotted_as_names -> dotted_as_names , dotted_as_name .)
    ;               reduce using rule 268 (dotted_as_names -> dotted_as_names , dotted_as_name .)


state 312

    (263) dotted_as_name -> dotted_name TAG_AS NAME .

    ,               reduce using rule 263 (dotted_as_name -> dotted_name TAG_AS NAME .)
    NEWLINE         reduce using rule 263 (dotted_as_name -> dotted_name TAG_AS NAME .)
    ;               reduce using rule 263 (dotted_as_name -> dotted_name TAG_AS NAME .)


state 313

    (94) dictormaker -> test : test . comp_for
    (90) dictormaker_piece -> test : test .
    (104) comp_for -> . TAG_FOR exprlist TAG_IN or_test
    (105) comp_for -> . TAG_FOR exprlist TAG_IN or_test comp_iter

    ,               reduce using rule 90 (dictormaker_piece -> test : test .)
    }               reduce using rule 90 (dictormaker_piece -> test : test .)
    TAG_FOR         shift and go to state 200

    comp_for                       shift and go to state 365

state 314

    (91) dictormaker_piece -> dictormaker_piece , test . : test

    :               shift and go to state 366


state 315

    (96) setmaker_piece -> setmaker_piece , test .

    ,               reduce using rule 96 (setmaker_piece -> setmaker_piece , test .)
    }               reduce using rule 96 (setmaker_piece -> setmaker_piece , test .)


state 316

    (266) import_as_names_ann -> import_as_name .

    ,               reduce using rule 266 (import_as_names_ann -> import_as_name .)
    NEWLINE         reduce using rule 266 (import_as_names_ann -> import_as_name .)
    ;               reduce using rule 266 (import_as_names_ann -> import_as_name .)


state 317

    (260) import_as_name -> NAME .
    (261) import_as_name -> NAME . TAG_AS NAME

    ,               reduce using rule 260 (import_as_name -> NAME .)
    NEWLINE         reduce using rule 260 (import_as_name -> NAME .)
    ;               reduce using rule 260 (import_as_name -> NAME .)
    TAG_AS          shift and go to state 367


state 318

    (258) import_from -> TAG_FROM dotted_name TAG_IMPORT * .

    NEWLINE         reduce using rule 258 (import_from -> TAG_FROM dotted_name TAG_IMPORT * .)
    ;               reduce using rule 258 (import_from -> TAG_FROM dotted_name TAG_IMPORT * .)


state 319

    (264) import_as_names -> import_as_names_ann .
    (265) import_as_names -> import_as_names_ann . ,
    (267) import_as_names_ann -> import_as_names_ann . , import_as_name

    NEWLINE         reduce using rule 264 (import_as_names -> import_as_names_ann .)
    ;               reduce using rule 264 (import_as_names -> import_as_names_ann .)
    ,               shift and go to state 368


state 320

    (259) import_from -> TAG_FROM dotted_name TAG_IMPORT import_as_names .

    NEWLINE         reduce using rule 259 (import_from -> TAG_FROM dotted_name TAG_IMPORT import_as_names .)
    ;               reduce using rule 259 (import_from -> TAG_FROM dotted_name TAG_IMPORT import_as_names .)


state 321

    (274) namelist -> namelist , NAME .

    ,               reduce using rule 274 (namelist -> namelist , NAME .)
    NEWLINE         reduce using rule 274 (namelist -> namelist , NAME .)
    ;               reduce using rule 274 (namelist -> namelist , NAME .)


state 322

    (53) arglist -> arglist_piece , .
    (51) arglist_piece -> arglist_piece , . argument
    (54) argument -> . test
    (55) argument -> . test comp_for
    (56) argument -> . test = test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    )               reduce using rule 53 (arglist -> arglist_piece , .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    argument                       shift and go to state 369
    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 263
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 323

    (47) trailer -> ( arglist ) .

    OP_POWER        reduce using rule 47 (trailer -> ( arglist ) .)
    (               reduce using rule 47 (trailer -> ( arglist ) .)
    [               reduce using rule 47 (trailer -> ( arglist ) .)
    .               reduce using rule 47 (trailer -> ( arglist ) .)
    *               reduce using rule 47 (trailer -> ( arglist ) .)
    /               reduce using rule 47 (trailer -> ( arglist ) .)
    %               reduce using rule 47 (trailer -> ( arglist ) .)
    OP_EXACT_DIVISION reduce using rule 47 (trailer -> ( arglist ) .)
    +               reduce using rule 47 (trailer -> ( arglist ) .)
    -               reduce using rule 47 (trailer -> ( arglist ) .)
    OP_LEFT_SHIFT   reduce using rule 47 (trailer -> ( arglist ) .)
    OP_RIGHT_SHIFT  reduce using rule 47 (trailer -> ( arglist ) .)
    &               reduce using rule 47 (trailer -> ( arglist ) .)
    ^               reduce using rule 47 (trailer -> ( arglist ) .)
    |               reduce using rule 47 (trailer -> ( arglist ) .)
    >               reduce using rule 47 (trailer -> ( arglist ) .)
    <               reduce using rule 47 (trailer -> ( arglist ) .)
    OP_EQ           reduce using rule 47 (trailer -> ( arglist ) .)
    OP_GE           reduce using rule 47 (trailer -> ( arglist ) .)
    OP_LE           reduce using rule 47 (trailer -> ( arglist ) .)
    OP_NE           reduce using rule 47 (trailer -> ( arglist ) .)
    OP_NNE          reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_IN          reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_NOT         reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_IS          reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_AND         reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_IF          reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_OR          reduce using rule 47 (trailer -> ( arglist ) .)
    ,               reduce using rule 47 (trailer -> ( arglist ) .)
    ADD_ASN         reduce using rule 47 (trailer -> ( arglist ) .)
    SUB_ASN         reduce using rule 47 (trailer -> ( arglist ) .)
    MUL_ASN         reduce using rule 47 (trailer -> ( arglist ) .)
    DIV_ASN         reduce using rule 47 (trailer -> ( arglist ) .)
    MOD_ASN         reduce using rule 47 (trailer -> ( arglist ) .)
    AND_ASN         reduce using rule 47 (trailer -> ( arglist ) .)
    OR_ASN          reduce using rule 47 (trailer -> ( arglist ) .)
    XOR_ASN         reduce using rule 47 (trailer -> ( arglist ) .)
    LSHIFT_ASN      reduce using rule 47 (trailer -> ( arglist ) .)
    RSHIFT_ASN      reduce using rule 47 (trailer -> ( arglist ) .)
    POW_ASN         reduce using rule 47 (trailer -> ( arglist ) .)
    FDIV_ASN        reduce using rule 47 (trailer -> ( arglist ) .)
    =               reduce using rule 47 (trailer -> ( arglist ) .)
    NEWLINE         reduce using rule 47 (trailer -> ( arglist ) .)
    ;               reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_FOR         reduce using rule 47 (trailer -> ( arglist ) .)
    )               reduce using rule 47 (trailer -> ( arglist ) .)
    `               reduce using rule 47 (trailer -> ( arglist ) .)
    INDENT          reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_DEL         reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_PASS        reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_GLOBAL      reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_EXEC        reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_ASSERT      reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_DRAW        reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_BREAK       reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_CONTINUE    reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_RETURN      reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_RAISE       reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_IMPORT      reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_FROM        reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_YIELD       reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_LAMBDA      reduce using rule 47 (trailer -> ( arglist ) .)
    ~               reduce using rule 47 (trailer -> ( arglist ) .)
    {               reduce using rule 47 (trailer -> ( arglist ) .)
    NAME            reduce using rule 47 (trailer -> ( arglist ) .)
    NUMBER          reduce using rule 47 (trailer -> ( arglist ) .)
    STRING          reduce using rule 47 (trailer -> ( arglist ) .)
    ]               reduce using rule 47 (trailer -> ( arglist ) .)
    :               reduce using rule 47 (trailer -> ( arglist ) .)
    }               reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_AS          reduce using rule 47 (trailer -> ( arglist ) .)
    TAG_ELSE        reduce using rule 47 (trailer -> ( arglist ) .)


state 324

    (55) argument -> test comp_for .

    ,               reduce using rule 55 (argument -> test comp_for .)
    )               reduce using rule 55 (argument -> test comp_for .)


state 325

    (56) argument -> test = . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 370
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 326

    (43) power -> atom trailers OP_POWER factor .

    *               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    /               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    %               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OP_EXACT_DIVISION reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    +               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    -               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OP_LEFT_SHIFT   reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OP_RIGHT_SHIFT  reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    &               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    ^               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    |               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    >               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    <               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OP_EQ           reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OP_GE           reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OP_LE           reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OP_NE           reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OP_NNE          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_IN          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_NOT         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_IS          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_AND         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_IF          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_OR          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    :               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    ]               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    ,               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    ADD_ASN         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    SUB_ASN         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    MUL_ASN         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    DIV_ASN         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    MOD_ASN         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    AND_ASN         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    OR_ASN          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    XOR_ASN         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    LSHIFT_ASN      reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    RSHIFT_ASN      reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    POW_ASN         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    FDIV_ASN        reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    =               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    NEWLINE         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    ;               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    INDENT          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_DEL         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_PASS        reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_GLOBAL      reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_EXEC        reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_ASSERT      reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_DRAW        reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_BREAK       reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_CONTINUE    reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_RETURN      reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_RAISE       reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_IMPORT      reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_FROM        reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_YIELD       reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_LAMBDA      reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    ~               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    (               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    [               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    {               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    `               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    NAME            reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    NUMBER          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    STRING          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_FOR         reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    )               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    }               reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_AS          reduce using rule 43 (power -> atom trailers OP_POWER factor .)
    TAG_ELSE        reduce using rule 43 (power -> atom trailers OP_POWER factor .)


state 327

    (60) subscript -> . . . .

    .               shift and go to state 371


state 328

    (63) subscript -> test : .
    (65) subscript -> test : . test
    (67) subscript -> test : . sliceop
    (69) subscript -> test : . test sliceop
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (70) sliceop -> . :
    (71) sliceop -> . : test
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    ]               reduce using rule 63 (subscript -> test : .)
    ,               reduce using rule 63 (subscript -> test : .)
    :               shift and go to state 330
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 372
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    sliceop                        shift and go to state 373
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 329

    (64) subscript -> : test .
    (68) subscript -> : test . sliceop
    (70) sliceop -> . :
    (71) sliceop -> . : test

    ]               reduce using rule 64 (subscript -> : test .)
    ,               reduce using rule 64 (subscript -> : test .)
    :               shift and go to state 330

    sliceop                        shift and go to state 374

state 330

    (70) sliceop -> : .
    (71) sliceop -> : . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    ]               reduce using rule 70 (sliceop -> : .)
    ,               reduce using rule 70 (sliceop -> : .)
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 375
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 331

    (66) subscript -> : sliceop .

    ]               reduce using rule 66 (subscript -> : sliceop .)
    ,               reduce using rule 66 (subscript -> : sliceop .)


state 332

    (48) trailer -> [ subscriptlist ] .

    OP_POWER        reduce using rule 48 (trailer -> [ subscriptlist ] .)
    (               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    [               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    .               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    *               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    /               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    %               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OP_EXACT_DIVISION reduce using rule 48 (trailer -> [ subscriptlist ] .)
    +               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    -               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OP_LEFT_SHIFT   reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OP_RIGHT_SHIFT  reduce using rule 48 (trailer -> [ subscriptlist ] .)
    &               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    ^               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    |               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    >               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    <               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OP_EQ           reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OP_GE           reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OP_LE           reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OP_NE           reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OP_NNE          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_IN          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_NOT         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_IS          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_AND         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_IF          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_OR          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    ,               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    ADD_ASN         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    SUB_ASN         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    MUL_ASN         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    DIV_ASN         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    MOD_ASN         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    AND_ASN         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    OR_ASN          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    XOR_ASN         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    LSHIFT_ASN      reduce using rule 48 (trailer -> [ subscriptlist ] .)
    RSHIFT_ASN      reduce using rule 48 (trailer -> [ subscriptlist ] .)
    POW_ASN         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    FDIV_ASN        reduce using rule 48 (trailer -> [ subscriptlist ] .)
    =               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    NEWLINE         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    ;               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_FOR         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    )               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    `               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    INDENT          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_DEL         reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_PASS        reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_GLOBAL      reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_EXEC        reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_ASSERT      reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_DRAW        reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_BREAK       reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_CONTINUE    reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_RETURN      reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_RAISE       reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_IMPORT      reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_FROM        reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_YIELD       reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_LAMBDA      reduce using rule 48 (trailer -> [ subscriptlist ] .)
    ~               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    {               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    NAME            reduce using rule 48 (trailer -> [ subscriptlist ] .)
    NUMBER          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    STRING          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    ]               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    :               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    }               reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_AS          reduce using rule 48 (trailer -> [ subscriptlist ] .)
    TAG_ELSE        reduce using rule 48 (trailer -> [ subscriptlist ] .)


state 333

    (57) subscriptlist -> subscriptlist , . subscript
    (58) subscriptlist -> subscriptlist , .
    (60) subscript -> . . . .
    (61) subscript -> . test
    (62) subscript -> . :
    (63) subscript -> . test :
    (64) subscript -> . : test
    (65) subscript -> . test : test
    (66) subscript -> . : sliceop
    (67) subscript -> . test : sliceop
    (68) subscript -> . : test sliceop
    (69) subscript -> . test : test sliceop
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    ]               reduce using rule 58 (subscriptlist -> subscriptlist , .)
    ,               reduce using rule 58 (subscriptlist -> subscriptlist , .)
    .               shift and go to state 267
    :               shift and go to state 270
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 268
    subscript                      shift and go to state 376
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 334

    (16) classdef -> TAG_CLASS NAME ( ) . : suite

    :               shift and go to state 377


state 335

    (15) classdef -> TAG_CLASS NAME ( testlist . ) : suite

    )               shift and go to state 378


state 336

    (14) classdef -> TAG_CLASS NAME : suite .

    ENDMARKER       reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    NEWLINE         reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_IF          reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_WHILE       reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_FOR         reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_TRY         reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_DEF         reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_CLASS       reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_DEL         reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_PASS        reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_GLOBAL      reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_EXEC        reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_ASSERT      reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_DRAW        reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_BREAK       reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_CONTINUE    reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_RETURN      reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_RAISE       reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_IMPORT      reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_FROM        reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    @               reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_YIELD       reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_LAMBDA      reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    TAG_NOT         reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    +               reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    -               reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    ~               reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    (               reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    [               reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    {               reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    `               reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    NAME            reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    NUMBER          reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    STRING          reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)
    DEDENT          reduce using rule 14 (classdef -> TAG_CLASS NAME : suite .)


state 337

    (160) funcdef -> TAG_DEF NAME parameters suite .

    DEDENT          reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_IF          reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_WHILE       reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_FOR         reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_TRY         reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_DEF         reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_CLASS       reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_DEL         reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_PASS        reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_GLOBAL      reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_EXEC        reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_ASSERT      reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_DRAW        reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_BREAK       reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_CONTINUE    reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_RETURN      reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_RAISE       reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_IMPORT      reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_FROM        reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    @               reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_YIELD       reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_LAMBDA      reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    TAG_NOT         reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    +               reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    -               reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    ~               reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    (               reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    [               reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    {               reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    `               reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    NAME            reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    NUMBER          reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    STRING          reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    ENDMARKER       reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)
    NEWLINE         reduce using rule 160 (funcdef -> TAG_DEF NAME parameters suite .)


state 338

    (161) parameters -> ( ) .

    INDENT          reduce using rule 161 (parameters -> ( ) .)
    TAG_DEL         reduce using rule 161 (parameters -> ( ) .)
    TAG_PASS        reduce using rule 161 (parameters -> ( ) .)
    TAG_GLOBAL      reduce using rule 161 (parameters -> ( ) .)
    TAG_EXEC        reduce using rule 161 (parameters -> ( ) .)
    TAG_ASSERT      reduce using rule 161 (parameters -> ( ) .)
    TAG_DRAW        reduce using rule 161 (parameters -> ( ) .)
    TAG_BREAK       reduce using rule 161 (parameters -> ( ) .)
    TAG_CONTINUE    reduce using rule 161 (parameters -> ( ) .)
    TAG_RETURN      reduce using rule 161 (parameters -> ( ) .)
    TAG_RAISE       reduce using rule 161 (parameters -> ( ) .)
    TAG_IMPORT      reduce using rule 161 (parameters -> ( ) .)
    TAG_FROM        reduce using rule 161 (parameters -> ( ) .)
    TAG_YIELD       reduce using rule 161 (parameters -> ( ) .)
    TAG_LAMBDA      reduce using rule 161 (parameters -> ( ) .)
    TAG_NOT         reduce using rule 161 (parameters -> ( ) .)
    +               reduce using rule 161 (parameters -> ( ) .)
    -               reduce using rule 161 (parameters -> ( ) .)
    ~               reduce using rule 161 (parameters -> ( ) .)
    (               reduce using rule 161 (parameters -> ( ) .)
    [               reduce using rule 161 (parameters -> ( ) .)
    {               reduce using rule 161 (parameters -> ( ) .)
    `               reduce using rule 161 (parameters -> ( ) .)
    NAME            reduce using rule 161 (parameters -> ( ) .)
    NUMBER          reduce using rule 161 (parameters -> ( ) .)
    STRING          reduce using rule 161 (parameters -> ( ) .)


state 339

    (162) parameters -> ( varargslist . )

    )               shift and go to state 379


state 340

    (278) exec_stmt -> TAG_EXEC expr TAG_IN test , . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 380
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 341

    (104) comp_for -> TAG_FOR exprlist TAG_IN . or_test
    (105) comp_for -> TAG_FOR exprlist TAG_IN . or_test comp_iter
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 381
    strings                        shift and go to state 82

state 342

    (156) fplist_top -> fplist_top , fpdef .

    ,               reduce using rule 156 (fplist_top -> fplist_top , fpdef .)
    )               reduce using rule 156 (fplist_top -> fplist_top , fpdef .)


state 343

    (152) varargs_two -> * NAME , OP_POWER . NAME

    NAME            shift and go to state 382


state 344

    (147) varargs_one -> varargs_one , fpdef = . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 383
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 345

    (254) raise_stmt -> TAG_RAISE test , test , . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 384
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 346

    (190) for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .
    (191) for_stmt -> TAG_FOR exprlist TAG_IN testlist suite . TAG_ELSE suite

    ENDMARKER       reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    NEWLINE         reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_IF          reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_WHILE       reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_FOR         reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_TRY         reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_DEF         reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_CLASS       reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_DEL         reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_PASS        reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_GLOBAL      reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_EXEC        reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_ASSERT      reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_DRAW        reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_BREAK       reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_CONTINUE    reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_RETURN      reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_RAISE       reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_IMPORT      reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_FROM        reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    @               reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_YIELD       reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_LAMBDA      reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_NOT         reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    +               reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    -               reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    ~               reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    (               reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    [               reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    {               reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    `               reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    NAME            reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    NUMBER          reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    STRING          reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    DEDENT          reduce using rule 190 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite .)
    TAG_ELSE        shift and go to state 385


state 347

    (9) decorator -> @ dotted_name ( arglist ) . NEWLINE

    NEWLINE         shift and go to state 386


state 348

    (8) decorator -> @ dotted_name ( ) NEWLINE .

    TAG_CLASS       reduce using rule 8 (decorator -> @ dotted_name ( ) NEWLINE .)
    TAG_DEF         reduce using rule 8 (decorator -> @ dotted_name ( ) NEWLINE .)
    @               reduce using rule 8 (decorator -> @ dotted_name ( ) NEWLINE .)


state 349

    (206) simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .

    ;               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_ELSE        reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    ENDMARKER       reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    NEWLINE         reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_IF          reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_WHILE       reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_FOR         reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_TRY         reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_DEF         reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_CLASS       reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_DEL         reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_PASS        reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_GLOBAL      reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_EXEC        reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_ASSERT      reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_DRAW        reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_BREAK       reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_CONTINUE    reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_RETURN      reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_RAISE       reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_IMPORT      reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_FROM        reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    @               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_YIELD       reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_LAMBDA      reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_NOT         reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    +               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    -               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    ~               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    (               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    [               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    {               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    `               reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    NAME            reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    NUMBER          reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    STRING          reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    DEDENT          reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_ELIF        reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_FINALLY     reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)
    TAG_EXCEPT      reduce using rule 206 (simple_stmt -> simple_stmt ; small_stmt ; NEWLINE .)


state 350

    (185) if_stmt -> TAG_IF test suite TAG_ELSE suite .

    DEDENT          reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_IF          reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_WHILE       reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_FOR         reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_TRY         reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_DEF         reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_CLASS       reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_DEL         reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_PASS        reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_GLOBAL      reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_EXEC        reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_ASSERT      reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_DRAW        reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_BREAK       reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_CONTINUE    reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_RETURN      reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_RAISE       reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_IMPORT      reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_FROM        reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    @               reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_YIELD       reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_LAMBDA      reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    TAG_NOT         reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    +               reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    -               reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    ~               reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    (               reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    [               reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    {               reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    `               reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    NAME            reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    NUMBER          reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    STRING          reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    ENDMARKER       reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)
    NEWLINE         reduce using rule 185 (if_stmt -> TAG_IF test suite TAG_ELSE suite .)


state 351

    (203) elif_list -> TAG_ELIF test . : suite

    :               shift and go to state 387


state 352

    (187) if_stmt -> TAG_IF test suite elif_list TAG_ELSE . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 388
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    import_name                    shift and go to state 76
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    expr                           shift and go to state 31
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 353

    (204) elif_list -> elif_list TAG_ELIF . test : suite
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 389
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 354

    (164) suite -> INDENT stmts DEDENT .

    ENDMARKER       reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    NEWLINE         reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_IF          reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_WHILE       reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_FOR         reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_TRY         reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_DEF         reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_CLASS       reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_DEL         reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_PASS        reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_GLOBAL      reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_EXEC        reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_ASSERT      reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_DRAW        reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_BREAK       reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_CONTINUE    reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_RETURN      reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_RAISE       reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_IMPORT      reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_FROM        reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    @               reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_YIELD       reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_LAMBDA      reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_NOT         reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    +               reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    -               reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    ~               reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    (               reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    [               reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    {               reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    `               reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    NAME            reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    NUMBER          reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    STRING          reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    DEDENT          reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_ELSE        reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_ELIF        reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_FINALLY     reduce using rule 164 (suite -> INDENT stmts DEDENT .)
    TAG_EXCEPT      reduce using rule 164 (suite -> INDENT stmts DEDENT .)


state 355

    (174) stmts -> stmts stmt .

    DEDENT          reduce using rule 174 (stmts -> stmts stmt .)
    TAG_IF          reduce using rule 174 (stmts -> stmts stmt .)
    TAG_WHILE       reduce using rule 174 (stmts -> stmts stmt .)
    TAG_FOR         reduce using rule 174 (stmts -> stmts stmt .)
    TAG_TRY         reduce using rule 174 (stmts -> stmts stmt .)
    TAG_DEF         reduce using rule 174 (stmts -> stmts stmt .)
    TAG_CLASS       reduce using rule 174 (stmts -> stmts stmt .)
    TAG_DEL         reduce using rule 174 (stmts -> stmts stmt .)
    TAG_PASS        reduce using rule 174 (stmts -> stmts stmt .)
    TAG_GLOBAL      reduce using rule 174 (stmts -> stmts stmt .)
    TAG_EXEC        reduce using rule 174 (stmts -> stmts stmt .)
    TAG_ASSERT      reduce using rule 174 (stmts -> stmts stmt .)
    TAG_DRAW        reduce using rule 174 (stmts -> stmts stmt .)
    TAG_BREAK       reduce using rule 174 (stmts -> stmts stmt .)
    TAG_CONTINUE    reduce using rule 174 (stmts -> stmts stmt .)
    TAG_RETURN      reduce using rule 174 (stmts -> stmts stmt .)
    TAG_RAISE       reduce using rule 174 (stmts -> stmts stmt .)
    TAG_IMPORT      reduce using rule 174 (stmts -> stmts stmt .)
    TAG_FROM        reduce using rule 174 (stmts -> stmts stmt .)
    @               reduce using rule 174 (stmts -> stmts stmt .)
    TAG_YIELD       reduce using rule 174 (stmts -> stmts stmt .)
    TAG_LAMBDA      reduce using rule 174 (stmts -> stmts stmt .)
    TAG_NOT         reduce using rule 174 (stmts -> stmts stmt .)
    +               reduce using rule 174 (stmts -> stmts stmt .)
    -               reduce using rule 174 (stmts -> stmts stmt .)
    ~               reduce using rule 174 (stmts -> stmts stmt .)
    (               reduce using rule 174 (stmts -> stmts stmt .)
    [               reduce using rule 174 (stmts -> stmts stmt .)
    {               reduce using rule 174 (stmts -> stmts stmt .)
    `               reduce using rule 174 (stmts -> stmts stmt .)
    NAME            reduce using rule 174 (stmts -> stmts stmt .)
    NUMBER          reduce using rule 174 (stmts -> stmts stmt .)
    STRING          reduce using rule 174 (stmts -> stmts stmt .)


state 356

    (119) test -> or_test TAG_IF or_test TAG_ELSE test .

    ,               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    INDENT          reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_DEL         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_PASS        reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_GLOBAL      reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_EXEC        reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_ASSERT      reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_DRAW        reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_BREAK       reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_CONTINUE    reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_RETURN      reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_RAISE       reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_IMPORT      reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_FROM        reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_YIELD       reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_LAMBDA      reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_NOT         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    +               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    -               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    ~               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    (               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    [               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    {               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    `               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    NAME            reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    NUMBER          reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    STRING          reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    ADD_ASN         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    SUB_ASN         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    MUL_ASN         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    DIV_ASN         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    MOD_ASN         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    AND_ASN         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    OR_ASN          reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    XOR_ASN         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    LSHIFT_ASN      reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    RSHIFT_ASN      reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    POW_ASN         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    FDIV_ASN        reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    =               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    NEWLINE         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    ;               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    :               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    ]               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    )               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_FOR         reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    }               reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)
    TAG_AS          reduce using rule 119 (test -> or_test TAG_IF or_test TAG_ELSE test .)


state 357

    (200) except_clause -> TAG_EXCEPT test .
    (201) except_clause -> TAG_EXCEPT test . TAG_AS test
    (202) except_clause -> TAG_EXCEPT test . , test

    :               reduce using rule 200 (except_clause -> TAG_EXCEPT test .)
    TAG_AS          shift and go to state 390
    ,               shift and go to state 391


state 358

    (194) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE . : suite
    (196) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE . : suite TAG_FINALLY : suite

    :               shift and go to state 392


state 359

    (195) try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY . : suite

    :               shift and go to state 393


state 360

    (197) except_clauses -> except_clauses except_clause . : suite

    :               shift and go to state 394


state 361

    (198) except_clauses -> except_clause : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 395
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 362

    (192) try_stmt -> TAG_TRY : suite TAG_FINALLY : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    expr_stmt                      shift and go to state 23
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    raise_stmt                     shift and go to state 57
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 396
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 363

    (189) while_stmt -> TAG_WHILE test suite TAG_ELSE suite .

    ENDMARKER       reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    NEWLINE         reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_IF          reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_WHILE       reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_FOR         reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_TRY         reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_DEF         reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_CLASS       reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_DEL         reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_PASS        reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_GLOBAL      reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_EXEC        reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_ASSERT      reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_DRAW        reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_BREAK       reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_CONTINUE    reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_RETURN      reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_RAISE       reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_IMPORT      reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_FROM        reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    @               reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_YIELD       reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_LAMBDA      reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    TAG_NOT         reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    +               reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    -               reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    ~               reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    (               reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    [               reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    {               reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    `               reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    NAME            reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    NUMBER          reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    STRING          reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)
    DEDENT          reduce using rule 189 (while_stmt -> TAG_WHILE test suite TAG_ELSE suite .)


state 364

    (110) list_for -> TAG_FOR exprlist TAG_IN . testlist_safe
    (111) list_for -> TAG_FOR exprlist TAG_IN . testlist_safe list_iter
    (167) testlist_safe -> . testlist_safe_piece
    (168) testlist_safe -> . testlist_safe_piece ,
    (165) testlist_safe_piece -> . old_test
    (166) testlist_safe_piece -> . testlist_safe_piece , old_test
    (169) old_test -> . or_test
    (170) old_test -> . old_lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (171) old_lambdef -> . TAG_LAMBDA : old_test
    (172) old_lambdef -> . TAG_LAMBDA varargslist : old_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 399
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    old_test                       shift and go to state 397
    testlist_safe_piece            shift and go to state 398
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    testlist_safe                  shift and go to state 400
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    old_lambdef                    shift and go to state 401
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 402
    strings                        shift and go to state 82

state 365

    (94) dictormaker -> test : test comp_for .

    }               reduce using rule 94 (dictormaker -> test : test comp_for .)


state 366

    (91) dictormaker_piece -> dictormaker_piece , test : . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 403
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 367

    (261) import_as_name -> NAME TAG_AS . NAME

    NAME            shift and go to state 404


state 368

    (265) import_as_names -> import_as_names_ann , .
    (267) import_as_names_ann -> import_as_names_ann , . import_as_name
    (260) import_as_name -> . NAME
    (261) import_as_name -> . NAME TAG_AS NAME

    NEWLINE         reduce using rule 265 (import_as_names -> import_as_names_ann , .)
    ;               reduce using rule 265 (import_as_names -> import_as_names_ann , .)
    NAME            shift and go to state 317

    import_as_name                 shift and go to state 405

state 369

    (51) arglist_piece -> arglist_piece , argument .

    ,               reduce using rule 51 (arglist_piece -> arglist_piece , argument .)
    )               reduce using rule 51 (arglist_piece -> arglist_piece , argument .)


state 370

    (56) argument -> test = test .

    ,               reduce using rule 56 (argument -> test = test .)
    )               reduce using rule 56 (argument -> test = test .)


state 371

    (60) subscript -> . . . .

    ]               reduce using rule 60 (subscript -> . . . .)
    ,               reduce using rule 60 (subscript -> . . . .)


state 372

    (65) subscript -> test : test .
    (69) subscript -> test : test . sliceop
    (70) sliceop -> . :
    (71) sliceop -> . : test

    ]               reduce using rule 65 (subscript -> test : test .)
    ,               reduce using rule 65 (subscript -> test : test .)
    :               shift and go to state 330

    sliceop                        shift and go to state 406

state 373

    (67) subscript -> test : sliceop .

    ]               reduce using rule 67 (subscript -> test : sliceop .)
    ,               reduce using rule 67 (subscript -> test : sliceop .)


state 374

    (68) subscript -> : test sliceop .

    ]               reduce using rule 68 (subscript -> : test sliceop .)
    ,               reduce using rule 68 (subscript -> : test sliceop .)


state 375

    (71) sliceop -> : test .

    ]               reduce using rule 71 (sliceop -> : test .)
    ,               reduce using rule 71 (sliceop -> : test .)


state 376

    (57) subscriptlist -> subscriptlist , subscript .

    ]               reduce using rule 57 (subscriptlist -> subscriptlist , subscript .)
    ,               reduce using rule 57 (subscriptlist -> subscriptlist , subscript .)


state 377

    (16) classdef -> TAG_CLASS NAME ( ) : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    expr_stmt                      shift and go to state 23
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    raise_stmt                     shift and go to state 57
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 407
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 378

    (15) classdef -> TAG_CLASS NAME ( testlist ) . : suite

    :               shift and go to state 408


state 379

    (162) parameters -> ( varargslist ) .

    INDENT          reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_DEL         reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_PASS        reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_GLOBAL      reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_EXEC        reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_ASSERT      reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_DRAW        reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_BREAK       reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_CONTINUE    reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_RETURN      reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_RAISE       reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_IMPORT      reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_FROM        reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_YIELD       reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_LAMBDA      reduce using rule 162 (parameters -> ( varargslist ) .)
    TAG_NOT         reduce using rule 162 (parameters -> ( varargslist ) .)
    +               reduce using rule 162 (parameters -> ( varargslist ) .)
    -               reduce using rule 162 (parameters -> ( varargslist ) .)
    ~               reduce using rule 162 (parameters -> ( varargslist ) .)
    (               reduce using rule 162 (parameters -> ( varargslist ) .)
    [               reduce using rule 162 (parameters -> ( varargslist ) .)
    {               reduce using rule 162 (parameters -> ( varargslist ) .)
    `               reduce using rule 162 (parameters -> ( varargslist ) .)
    NAME            reduce using rule 162 (parameters -> ( varargslist ) .)
    NUMBER          reduce using rule 162 (parameters -> ( varargslist ) .)
    STRING          reduce using rule 162 (parameters -> ( varargslist ) .)


state 380

    (278) exec_stmt -> TAG_EXEC expr TAG_IN test , test .

    NEWLINE         reduce using rule 278 (exec_stmt -> TAG_EXEC expr TAG_IN test , test .)
    ;               reduce using rule 278 (exec_stmt -> TAG_EXEC expr TAG_IN test , test .)


state 381

    (104) comp_for -> TAG_FOR exprlist TAG_IN or_test .
    (105) comp_for -> TAG_FOR exprlist TAG_IN or_test . comp_iter
    (122) or_test -> or_test . TAG_OR and_test
    (102) comp_iter -> . comp_for
    (103) comp_iter -> . comp_if
    (104) comp_for -> . TAG_FOR exprlist TAG_IN or_test
    (105) comp_for -> . TAG_FOR exprlist TAG_IN or_test comp_iter
    (106) comp_if -> . TAG_IF old_test
    (107) comp_if -> . TAG_IF old_test comp_iter

    }               reduce using rule 104 (comp_for -> TAG_FOR exprlist TAG_IN or_test .)
    ,               reduce using rule 104 (comp_for -> TAG_FOR exprlist TAG_IN or_test .)
    )               reduce using rule 104 (comp_for -> TAG_FOR exprlist TAG_IN or_test .)
    TAG_OR          shift and go to state 135
    TAG_FOR         shift and go to state 200
    TAG_IF          shift and go to state 410

    comp_if                        shift and go to state 409
    comp_for                       shift and go to state 411
    comp_iter                      shift and go to state 412

state 382

    (152) varargs_two -> * NAME , OP_POWER NAME .

    :               reduce using rule 152 (varargs_two -> * NAME , OP_POWER NAME .)
    )               reduce using rule 152 (varargs_two -> * NAME , OP_POWER NAME .)


state 383

    (147) varargs_one -> varargs_one , fpdef = test .

    ,               reduce using rule 147 (varargs_one -> varargs_one , fpdef = test .)
    :               reduce using rule 147 (varargs_one -> varargs_one , fpdef = test .)
    )               reduce using rule 147 (varargs_one -> varargs_one , fpdef = test .)


state 384

    (254) raise_stmt -> TAG_RAISE test , test , test .

    NEWLINE         reduce using rule 254 (raise_stmt -> TAG_RAISE test , test , test .)
    ;               reduce using rule 254 (raise_stmt -> TAG_RAISE test , test , test .)


state 385

    (191) for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    expr_stmt                      shift and go to state 23
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    raise_stmt                     shift and go to state 57
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 413
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 386

    (9) decorator -> @ dotted_name ( arglist ) NEWLINE .

    TAG_CLASS       reduce using rule 9 (decorator -> @ dotted_name ( arglist ) NEWLINE .)
    TAG_DEF         reduce using rule 9 (decorator -> @ dotted_name ( arglist ) NEWLINE .)
    @               reduce using rule 9 (decorator -> @ dotted_name ( arglist ) NEWLINE .)


state 387

    (203) elif_list -> TAG_ELIF test : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 414
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 388

    (187) if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .

    DEDENT          reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_IF          reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_WHILE       reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_FOR         reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_TRY         reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_DEF         reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_CLASS       reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_DEL         reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_PASS        reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_GLOBAL      reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_EXEC        reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_ASSERT      reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_DRAW        reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_BREAK       reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_CONTINUE    reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_RETURN      reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_RAISE       reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_IMPORT      reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_FROM        reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    @               reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_YIELD       reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_LAMBDA      reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    TAG_NOT         reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    +               reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    -               reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    ~               reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    (               reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    [               reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    {               reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    `               reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    NAME            reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    NUMBER          reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    STRING          reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    ENDMARKER       reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)
    NEWLINE         reduce using rule 187 (if_stmt -> TAG_IF test suite elif_list TAG_ELSE suite .)


state 389

    (204) elif_list -> elif_list TAG_ELIF test . : suite

    :               shift and go to state 415


state 390

    (201) except_clause -> TAG_EXCEPT test TAG_AS . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 416
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 391

    (202) except_clause -> TAG_EXCEPT test , . test
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    test                           shift and go to state 417
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    lambdef                        shift and go to state 22
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    strings                        shift and go to state 82

state 392

    (194) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : . suite
    (196) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : . suite TAG_FINALLY : suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 418
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 393

    (195) try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 419
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 394

    (197) except_clauses -> except_clauses except_clause : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 420
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 395

    (198) except_clauses -> except_clause : suite .

    TAG_ELSE        reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_FINALLY     reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_EXCEPT      reduce using rule 198 (except_clauses -> except_clause : suite .)
    ENDMARKER       reduce using rule 198 (except_clauses -> except_clause : suite .)
    NEWLINE         reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_IF          reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_WHILE       reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_FOR         reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_TRY         reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_DEF         reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_CLASS       reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_DEL         reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_PASS        reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_GLOBAL      reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_EXEC        reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_ASSERT      reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_DRAW        reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_BREAK       reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_CONTINUE    reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_RETURN      reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_RAISE       reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_IMPORT      reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_FROM        reduce using rule 198 (except_clauses -> except_clause : suite .)
    @               reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_YIELD       reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_LAMBDA      reduce using rule 198 (except_clauses -> except_clause : suite .)
    TAG_NOT         reduce using rule 198 (except_clauses -> except_clause : suite .)
    +               reduce using rule 198 (except_clauses -> except_clause : suite .)
    -               reduce using rule 198 (except_clauses -> except_clause : suite .)
    ~               reduce using rule 198 (except_clauses -> except_clause : suite .)
    (               reduce using rule 198 (except_clauses -> except_clause : suite .)
    [               reduce using rule 198 (except_clauses -> except_clause : suite .)
    {               reduce using rule 198 (except_clauses -> except_clause : suite .)
    `               reduce using rule 198 (except_clauses -> except_clause : suite .)
    NAME            reduce using rule 198 (except_clauses -> except_clause : suite .)
    NUMBER          reduce using rule 198 (except_clauses -> except_clause : suite .)
    STRING          reduce using rule 198 (except_clauses -> except_clause : suite .)
    DEDENT          reduce using rule 198 (except_clauses -> except_clause : suite .)


state 396

    (192) try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .

    DEDENT          reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_IF          reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_WHILE       reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_FOR         reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_TRY         reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_DEF         reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_CLASS       reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_DEL         reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_PASS        reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_GLOBAL      reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_EXEC        reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_ASSERT      reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_DRAW        reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_BREAK       reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_CONTINUE    reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_RETURN      reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_RAISE       reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_IMPORT      reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_FROM        reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    @               reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_YIELD       reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_LAMBDA      reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    TAG_NOT         reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    +               reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    -               reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    ~               reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    (               reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    [               reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    {               reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    `               reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    NAME            reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    NUMBER          reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    STRING          reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    ENDMARKER       reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)
    NEWLINE         reduce using rule 192 (try_stmt -> TAG_TRY : suite TAG_FINALLY : suite .)


state 397

    (165) testlist_safe_piece -> old_test .

    ,               reduce using rule 165 (testlist_safe_piece -> old_test .)
    TAG_FOR         reduce using rule 165 (testlist_safe_piece -> old_test .)
    TAG_IF          reduce using rule 165 (testlist_safe_piece -> old_test .)
    ]               reduce using rule 165 (testlist_safe_piece -> old_test .)


state 398

    (167) testlist_safe -> testlist_safe_piece .
    (168) testlist_safe -> testlist_safe_piece . ,
    (166) testlist_safe_piece -> testlist_safe_piece . , old_test

    TAG_FOR         reduce using rule 167 (testlist_safe -> testlist_safe_piece .)
    TAG_IF          reduce using rule 167 (testlist_safe -> testlist_safe_piece .)
    ]               reduce using rule 167 (testlist_safe -> testlist_safe_piece .)
    ,               shift and go to state 421


state 399

    (171) old_lambdef -> TAG_LAMBDA . : old_test
    (172) old_lambdef -> TAG_LAMBDA . varargslist : old_test
    (142) varargslist -> . varargs_one , varargs_two
    (143) varargslist -> . varargs_two
    (144) varargslist -> . varargs_one
    (145) varargslist -> . varargs_one ,
    (146) varargs_one -> . varargs_one , fpdef
    (147) varargs_one -> . varargs_one , fpdef = test
    (148) varargs_one -> . fpdef
    (149) varargs_one -> . fpdef = test
    (150) varargs_two -> . * NAME
    (151) varargs_two -> . OP_POWER NAME
    (152) varargs_two -> . * NAME , OP_POWER NAME
    (153) fpdef -> . NAME
    (154) fpdef -> . ( fplist )

    :               shift and go to state 423
    *               shift and go to state 100
    OP_POWER        shift and go to state 96
    NAME            shift and go to state 97
    (               shift and go to state 98

    fpdef                          shift and go to state 99
    varargs_two                    shift and go to state 101
    varargslist                    shift and go to state 422
    varargs_one                    shift and go to state 103

state 400

    (110) list_for -> TAG_FOR exprlist TAG_IN testlist_safe .
    (111) list_for -> TAG_FOR exprlist TAG_IN testlist_safe . list_iter
    (108) list_iter -> . list_for
    (109) list_iter -> . list_if
    (110) list_for -> . TAG_FOR exprlist TAG_IN testlist_safe
    (111) list_for -> . TAG_FOR exprlist TAG_IN testlist_safe list_iter
    (112) list_if -> . TAG_IF old_test
    (113) list_if -> . TAG_IF old_test list_iter

    ]               reduce using rule 110 (list_for -> TAG_FOR exprlist TAG_IN testlist_safe .)
    TAG_FOR         shift and go to state 241
    TAG_IF          shift and go to state 424

    list_iter                      shift and go to state 425
    list_if                        shift and go to state 426
    list_for                       shift and go to state 427

state 401

    (170) old_test -> old_lambdef .

    ,               reduce using rule 170 (old_test -> old_lambdef .)
    TAG_FOR         reduce using rule 170 (old_test -> old_lambdef .)
    TAG_IF          reduce using rule 170 (old_test -> old_lambdef .)
    ]               reduce using rule 170 (old_test -> old_lambdef .)
    )               reduce using rule 170 (old_test -> old_lambdef .)
    }               reduce using rule 170 (old_test -> old_lambdef .)


state 402

    (169) old_test -> or_test .
    (122) or_test -> or_test . TAG_OR and_test

    ,               reduce using rule 169 (old_test -> or_test .)
    TAG_FOR         reduce using rule 169 (old_test -> or_test .)
    TAG_IF          reduce using rule 169 (old_test -> or_test .)
    ]               reduce using rule 169 (old_test -> or_test .)
    )               reduce using rule 169 (old_test -> or_test .)
    }               reduce using rule 169 (old_test -> or_test .)
    TAG_OR          shift and go to state 135


state 403

    (91) dictormaker_piece -> dictormaker_piece , test : test .

    ,               reduce using rule 91 (dictormaker_piece -> dictormaker_piece , test : test .)
    }               reduce using rule 91 (dictormaker_piece -> dictormaker_piece , test : test .)


state 404

    (261) import_as_name -> NAME TAG_AS NAME .

    ,               reduce using rule 261 (import_as_name -> NAME TAG_AS NAME .)
    NEWLINE         reduce using rule 261 (import_as_name -> NAME TAG_AS NAME .)
    ;               reduce using rule 261 (import_as_name -> NAME TAG_AS NAME .)


state 405

    (267) import_as_names_ann -> import_as_names_ann , import_as_name .

    ,               reduce using rule 267 (import_as_names_ann -> import_as_names_ann , import_as_name .)
    NEWLINE         reduce using rule 267 (import_as_names_ann -> import_as_names_ann , import_as_name .)
    ;               reduce using rule 267 (import_as_names_ann -> import_as_names_ann , import_as_name .)


state 406

    (69) subscript -> test : test sliceop .

    ]               reduce using rule 69 (subscript -> test : test sliceop .)
    ,               reduce using rule 69 (subscript -> test : test sliceop .)


state 407

    (16) classdef -> TAG_CLASS NAME ( ) : suite .

    ENDMARKER       reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    NEWLINE         reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_IF          reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_WHILE       reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_FOR         reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_TRY         reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_DEF         reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_CLASS       reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_DEL         reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_PASS        reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_GLOBAL      reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_EXEC        reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_ASSERT      reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_DRAW        reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_BREAK       reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_CONTINUE    reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_RETURN      reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_RAISE       reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_IMPORT      reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_FROM        reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    @               reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_YIELD       reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_LAMBDA      reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    TAG_NOT         reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    +               reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    -               reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    ~               reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    (               reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    [               reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    {               reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    `               reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    NAME            reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    NUMBER          reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    STRING          reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)
    DEDENT          reduce using rule 16 (classdef -> TAG_CLASS NAME ( ) : suite .)


state 408

    (15) classdef -> TAG_CLASS NAME ( testlist ) : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    expr_stmt                      shift and go to state 23
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    raise_stmt                     shift and go to state 57
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 428
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 409

    (103) comp_iter -> comp_if .

    )               reduce using rule 103 (comp_iter -> comp_if .)
    }               reduce using rule 103 (comp_iter -> comp_if .)
    ,               reduce using rule 103 (comp_iter -> comp_if .)


state 410

    (106) comp_if -> TAG_IF . old_test
    (107) comp_if -> TAG_IF . old_test comp_iter
    (169) old_test -> . or_test
    (170) old_test -> . old_lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (171) old_lambdef -> . TAG_LAMBDA : old_test
    (172) old_lambdef -> . TAG_LAMBDA varargslist : old_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 399
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    old_test                       shift and go to state 429
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    old_lambdef                    shift and go to state 401
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 402
    strings                        shift and go to state 82

state 411

    (102) comp_iter -> comp_for .

    )               reduce using rule 102 (comp_iter -> comp_for .)
    }               reduce using rule 102 (comp_iter -> comp_for .)
    ,               reduce using rule 102 (comp_iter -> comp_for .)


state 412

    (105) comp_for -> TAG_FOR exprlist TAG_IN or_test comp_iter .

    }               reduce using rule 105 (comp_for -> TAG_FOR exprlist TAG_IN or_test comp_iter .)
    ,               reduce using rule 105 (comp_for -> TAG_FOR exprlist TAG_IN or_test comp_iter .)
    )               reduce using rule 105 (comp_for -> TAG_FOR exprlist TAG_IN or_test comp_iter .)


state 413

    (191) for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .

    ENDMARKER       reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    NEWLINE         reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_IF          reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_WHILE       reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_FOR         reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_TRY         reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_DEF         reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_CLASS       reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_DEL         reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_PASS        reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_GLOBAL      reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_EXEC        reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_ASSERT      reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_DRAW        reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_BREAK       reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_CONTINUE    reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_RETURN      reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_RAISE       reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_IMPORT      reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_FROM        reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    @               reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_YIELD       reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_LAMBDA      reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    TAG_NOT         reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    +               reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    -               reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    ~               reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    (               reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    [               reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    {               reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    `               reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    NAME            reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    NUMBER          reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    STRING          reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)
    DEDENT          reduce using rule 191 (for_stmt -> TAG_FOR exprlist TAG_IN testlist suite TAG_ELSE suite .)


state 414

    (203) elif_list -> TAG_ELIF test : suite .

    TAG_ELSE        reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_ELIF        reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    ENDMARKER       reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    NEWLINE         reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_IF          reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_WHILE       reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_FOR         reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_TRY         reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_DEF         reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_CLASS       reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_DEL         reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_PASS        reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_GLOBAL      reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_EXEC        reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_ASSERT      reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_DRAW        reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_BREAK       reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_CONTINUE    reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_RETURN      reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_RAISE       reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_IMPORT      reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_FROM        reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    @               reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_YIELD       reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_LAMBDA      reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    TAG_NOT         reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    +               reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    -               reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    ~               reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    (               reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    [               reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    {               reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    `               reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    NAME            reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    NUMBER          reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    STRING          reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)
    DEDENT          reduce using rule 203 (elif_list -> TAG_ELIF test : suite .)


state 415

    (204) elif_list -> elif_list TAG_ELIF test : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 430
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    import_name                    shift and go to state 76
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    expr                           shift and go to state 31
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 416

    (201) except_clause -> TAG_EXCEPT test TAG_AS test .

    :               reduce using rule 201 (except_clause -> TAG_EXCEPT test TAG_AS test .)


state 417

    (202) except_clause -> TAG_EXCEPT test , test .

    :               reduce using rule 202 (except_clause -> TAG_EXCEPT test , test .)


state 418

    (194) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .
    (196) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite . TAG_FINALLY : suite

    DEDENT          reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_IF          reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_WHILE       reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_FOR         reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_TRY         reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_DEF         reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_CLASS       reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_DEL         reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_PASS        reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_GLOBAL      reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_EXEC        reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_ASSERT      reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_DRAW        reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_BREAK       reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_CONTINUE    reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_RETURN      reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_RAISE       reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_IMPORT      reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_FROM        reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    @               reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_YIELD       reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_LAMBDA      reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_NOT         reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    +               reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    -               reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    ~               reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    (               reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    [               reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    {               reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    `               reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    NAME            reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    NUMBER          reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    STRING          reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    ENDMARKER       reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    NEWLINE         reduce using rule 194 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite .)
    TAG_FINALLY     shift and go to state 431


state 419

    (195) try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .

    DEDENT          reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_IF          reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_WHILE       reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_FOR         reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_TRY         reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_DEF         reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_CLASS       reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_DEL         reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_PASS        reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_GLOBAL      reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_EXEC        reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_ASSERT      reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_DRAW        reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_BREAK       reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_CONTINUE    reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_RETURN      reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_RAISE       reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_IMPORT      reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_FROM        reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    @               reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_YIELD       reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_LAMBDA      reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    TAG_NOT         reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    +               reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    -               reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    ~               reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    (               reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    [               reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    {               reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    `               reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    NAME            reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    NUMBER          reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    STRING          reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    ENDMARKER       reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)
    NEWLINE         reduce using rule 195 (try_stmt -> TAG_TRY : suite except_clauses TAG_FINALLY : suite .)


state 420

    (197) except_clauses -> except_clauses except_clause : suite .

    TAG_ELSE        reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_FINALLY     reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_EXCEPT      reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    ENDMARKER       reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    NEWLINE         reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_IF          reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_WHILE       reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_FOR         reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_TRY         reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_DEF         reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_CLASS       reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_DEL         reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_PASS        reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_GLOBAL      reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_EXEC        reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_ASSERT      reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_DRAW        reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_BREAK       reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_CONTINUE    reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_RETURN      reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_RAISE       reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_IMPORT      reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_FROM        reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    @               reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_YIELD       reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_LAMBDA      reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    TAG_NOT         reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    +               reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    -               reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    ~               reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    (               reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    [               reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    {               reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    `               reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    NAME            reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    NUMBER          reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    STRING          reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)
    DEDENT          reduce using rule 197 (except_clauses -> except_clauses except_clause : suite .)


state 421

    (168) testlist_safe -> testlist_safe_piece , .
    (166) testlist_safe_piece -> testlist_safe_piece , . old_test
    (169) old_test -> . or_test
    (170) old_test -> . old_lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (171) old_lambdef -> . TAG_LAMBDA : old_test
    (172) old_lambdef -> . TAG_LAMBDA varargslist : old_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_FOR         reduce using rule 168 (testlist_safe -> testlist_safe_piece , .)
    TAG_IF          reduce using rule 168 (testlist_safe -> testlist_safe_piece , .)
    ]               reduce using rule 168 (testlist_safe -> testlist_safe_piece , .)
    TAG_LAMBDA      shift and go to state 399
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    old_test                       shift and go to state 432
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    old_lambdef                    shift and go to state 401
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 402
    strings                        shift and go to state 82

state 422

    (172) old_lambdef -> TAG_LAMBDA varargslist . : old_test

    :               shift and go to state 433


state 423

    (171) old_lambdef -> TAG_LAMBDA : . old_test
    (169) old_test -> . or_test
    (170) old_test -> . old_lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (171) old_lambdef -> . TAG_LAMBDA : old_test
    (172) old_lambdef -> . TAG_LAMBDA varargslist : old_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 399
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    old_test                       shift and go to state 434
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    old_lambdef                    shift and go to state 401
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 402
    strings                        shift and go to state 82

state 424

    (112) list_if -> TAG_IF . old_test
    (113) list_if -> TAG_IF . old_test list_iter
    (169) old_test -> . or_test
    (170) old_test -> . old_lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (171) old_lambdef -> . TAG_LAMBDA : old_test
    (172) old_lambdef -> . TAG_LAMBDA varargslist : old_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 399
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    old_test                       shift and go to state 435
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    old_lambdef                    shift and go to state 401
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 402
    strings                        shift and go to state 82

state 425

    (111) list_for -> TAG_FOR exprlist TAG_IN testlist_safe list_iter .

    ]               reduce using rule 111 (list_for -> TAG_FOR exprlist TAG_IN testlist_safe list_iter .)


state 426

    (109) list_iter -> list_if .

    ]               reduce using rule 109 (list_iter -> list_if .)


state 427

    (108) list_iter -> list_for .

    ]               reduce using rule 108 (list_iter -> list_for .)


state 428

    (15) classdef -> TAG_CLASS NAME ( testlist ) : suite .

    ENDMARKER       reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    NEWLINE         reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_IF          reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_WHILE       reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_FOR         reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_TRY         reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_DEF         reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_CLASS       reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_DEL         reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_PASS        reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_GLOBAL      reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_EXEC        reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_ASSERT      reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_DRAW        reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_BREAK       reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_CONTINUE    reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_RETURN      reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_RAISE       reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_IMPORT      reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_FROM        reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    @               reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_YIELD       reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_LAMBDA      reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    TAG_NOT         reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    +               reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    -               reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    ~               reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    (               reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    [               reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    {               reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    `               reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    NAME            reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    NUMBER          reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    STRING          reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)
    DEDENT          reduce using rule 15 (classdef -> TAG_CLASS NAME ( testlist ) : suite .)


state 429

    (106) comp_if -> TAG_IF old_test .
    (107) comp_if -> TAG_IF old_test . comp_iter
    (102) comp_iter -> . comp_for
    (103) comp_iter -> . comp_if
    (104) comp_for -> . TAG_FOR exprlist TAG_IN or_test
    (105) comp_for -> . TAG_FOR exprlist TAG_IN or_test comp_iter
    (106) comp_if -> . TAG_IF old_test
    (107) comp_if -> . TAG_IF old_test comp_iter

    )               reduce using rule 106 (comp_if -> TAG_IF old_test .)
    }               reduce using rule 106 (comp_if -> TAG_IF old_test .)
    ,               reduce using rule 106 (comp_if -> TAG_IF old_test .)
    TAG_FOR         shift and go to state 200
    TAG_IF          shift and go to state 410

    comp_if                        shift and go to state 409
    comp_for                       shift and go to state 411
    comp_iter                      shift and go to state 436

state 430

    (204) elif_list -> elif_list TAG_ELIF test : suite .

    TAG_ELSE        reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_ELIF        reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    ENDMARKER       reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    NEWLINE         reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_IF          reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_WHILE       reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_FOR         reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_TRY         reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_DEF         reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_CLASS       reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_DEL         reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_PASS        reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_GLOBAL      reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_EXEC        reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_ASSERT      reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_DRAW        reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_BREAK       reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_CONTINUE    reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_RETURN      reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_RAISE       reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_IMPORT      reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_FROM        reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    @               reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_YIELD       reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_LAMBDA      reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    TAG_NOT         reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    +               reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    -               reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    ~               reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    (               reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    [               reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    {               reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    `               reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    NAME            reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    NUMBER          reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    STRING          reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)
    DEDENT          reduce using rule 204 (elif_list -> elif_list TAG_ELIF test : suite .)


state 431

    (196) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY . : suite

    :               shift and go to state 437


state 432

    (166) testlist_safe_piece -> testlist_safe_piece , old_test .

    ,               reduce using rule 166 (testlist_safe_piece -> testlist_safe_piece , old_test .)
    TAG_FOR         reduce using rule 166 (testlist_safe_piece -> testlist_safe_piece , old_test .)
    TAG_IF          reduce using rule 166 (testlist_safe_piece -> testlist_safe_piece , old_test .)
    ]               reduce using rule 166 (testlist_safe_piece -> testlist_safe_piece , old_test .)


state 433

    (172) old_lambdef -> TAG_LAMBDA varargslist : . old_test
    (169) old_test -> . or_test
    (170) old_test -> . old_lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (171) old_lambdef -> . TAG_LAMBDA : old_test
    (172) old_lambdef -> . TAG_LAMBDA varargslist : old_test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    TAG_LAMBDA      shift and go to state 399
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    not_test                       shift and go to state 68
    old_test                       shift and go to state 438
    shift_expr                     shift and go to state 3
    factor                         shift and go to state 13
    and_expr                       shift and go to state 63
    power                          shift and go to state 40
    and_test                       shift and go to state 78
    atom                           shift and go to state 56
    xor_expr                       shift and go to state 52
    old_lambdef                    shift and go to state 401
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    arith_expr                     shift and go to state 47
    expr                           shift and go to state 31
    or_test                        shift and go to state 402
    strings                        shift and go to state 82

state 434

    (171) old_lambdef -> TAG_LAMBDA : old_test .

    TAG_FOR         reduce using rule 171 (old_lambdef -> TAG_LAMBDA : old_test .)
    TAG_IF          reduce using rule 171 (old_lambdef -> TAG_LAMBDA : old_test .)
    )               reduce using rule 171 (old_lambdef -> TAG_LAMBDA : old_test .)
    }               reduce using rule 171 (old_lambdef -> TAG_LAMBDA : old_test .)
    ,               reduce using rule 171 (old_lambdef -> TAG_LAMBDA : old_test .)
    ]               reduce using rule 171 (old_lambdef -> TAG_LAMBDA : old_test .)


state 435

    (112) list_if -> TAG_IF old_test .
    (113) list_if -> TAG_IF old_test . list_iter
    (108) list_iter -> . list_for
    (109) list_iter -> . list_if
    (110) list_for -> . TAG_FOR exprlist TAG_IN testlist_safe
    (111) list_for -> . TAG_FOR exprlist TAG_IN testlist_safe list_iter
    (112) list_if -> . TAG_IF old_test
    (113) list_if -> . TAG_IF old_test list_iter

    ]               reduce using rule 112 (list_if -> TAG_IF old_test .)
    TAG_FOR         shift and go to state 241
    TAG_IF          shift and go to state 424

    list_iter                      shift and go to state 439
    list_if                        shift and go to state 426
    list_for                       shift and go to state 427

state 436

    (107) comp_if -> TAG_IF old_test comp_iter .

    )               reduce using rule 107 (comp_if -> TAG_IF old_test comp_iter .)
    }               reduce using rule 107 (comp_if -> TAG_IF old_test comp_iter .)
    ,               reduce using rule 107 (comp_if -> TAG_IF old_test comp_iter .)


state 437

    (196) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : . suite
    (163) suite -> . simple_stmt
    (164) suite -> . INDENT stmts DEDENT
    (205) simple_stmt -> . simple_stmt ; small_stmt NEWLINE
    (206) simple_stmt -> . simple_stmt ; small_stmt ; NEWLINE
    (207) simple_stmt -> . small_stmt NEWLINE
    (208) simple_stmt -> . small_stmt ; NEWLINE
    (209) small_stmt -> . expr_stmt
    (210) small_stmt -> . del_stmt
    (211) small_stmt -> . pass_stmt
    (212) small_stmt -> . flow_stmt
    (213) small_stmt -> . import_stmt
    (214) small_stmt -> . global_stmt
    (215) small_stmt -> . exec_stmt
    (216) small_stmt -> . assert_stmt
    (217) small_stmt -> . draw_stmt
    (218) expr_stmt -> . testlist augassign yield_expr
    (219) expr_stmt -> . testlist augassign testlist
    (220) expr_stmt -> . testlist expr_stmt_bottom
    (221) expr_stmt -> . testlist
    (240) del_stmt -> . TAG_DEL exprlist
    (241) pass_stmt -> . TAG_PASS
    (242) flow_stmt -> . break_stmt
    (243) flow_stmt -> . continue_stmt
    (244) flow_stmt -> . return_stmt
    (245) flow_stmt -> . raise_stmt
    (246) flow_stmt -> . yield_stmt
    (255) import_stmt -> . import_name
    (256) import_stmt -> . import_from
    (272) global_stmt -> . TAG_GLOBAL namelist
    (276) exec_stmt -> . TAG_EXEC expr
    (277) exec_stmt -> . TAG_EXEC expr TAG_IN test
    (278) exec_stmt -> . TAG_EXEC expr TAG_IN test , test
    (279) assert_stmt -> . TAG_ASSERT test
    (280) assert_stmt -> . TAG_ASSERT test , test
    (238) draw_stmt -> . TAG_DRAW
    (239) draw_stmt -> . TAG_DRAW testlist
    (114) testlist -> . testlist_anns
    (115) testlist -> . testlist_anns ,
    (247) break_stmt -> . TAG_BREAK
    (248) continue_stmt -> . TAG_CONTINUE
    (249) return_stmt -> . TAG_RETURN
    (250) return_stmt -> . TAG_RETURN testlist
    (251) raise_stmt -> . TAG_RAISE
    (252) raise_stmt -> . TAG_RAISE test
    (253) raise_stmt -> . TAG_RAISE test , test
    (254) raise_stmt -> . TAG_RAISE test , test , test
    (275) yield_stmt -> . yield_expr
    (257) import_name -> . TAG_IMPORT dotted_as_names
    (258) import_from -> . TAG_FROM dotted_name TAG_IMPORT *
    (259) import_from -> . TAG_FROM dotted_name TAG_IMPORT import_as_names
    (116) testlist_anns -> . testlist_anns , test
    (117) testlist_anns -> . test
    (281) yield_expr -> . TAG_YIELD
    (282) yield_expr -> . TAG_YIELD testlist
    (118) test -> . or_test
    (119) test -> . or_test TAG_IF or_test TAG_ELSE test
    (120) test -> . lambdef
    (121) or_test -> . and_test
    (122) or_test -> . or_test TAG_OR and_test
    (140) lambdef -> . TAG_LAMBDA : test
    (141) lambdef -> . TAG_LAMBDA varargslist : test
    (123) and_test -> . not_test
    (124) and_test -> . and_test TAG_AND not_test
    (125) not_test -> . TAG_NOT not_test
    (126) not_test -> . comparison
    (127) comparison -> . expr
    (128) comparison -> . comparison comp_op expr
    (19) expr -> . xor_expr
    (20) expr -> . expr | xor_expr
    (21) xor_expr -> . and_expr
    (22) xor_expr -> . xor_expr ^ and_expr
    (23) and_expr -> . shift_expr
    (24) and_expr -> . and_expr & shift_expr
    (25) shift_expr -> . arith_expr
    (26) shift_expr -> . shift_expr OP_LEFT_SHIFT arith_expr
    (27) shift_expr -> . shift_expr OP_RIGHT_SHIFT arith_expr
    (28) arith_expr -> . term
    (29) arith_expr -> . arith_expr + term
    (30) arith_expr -> . arith_expr - term
    (31) term -> . term * factor
    (32) term -> . term / factor
    (33) term -> . term % factor
    (34) term -> . term OP_EXACT_DIVISION factor
    (35) term -> . factor
    (36) factor -> . + factor
    (37) factor -> . - factor
    (38) factor -> . ~ factor
    (39) factor -> . power
    (40) power -> . atom
    (41) power -> . atom trailers
    (42) power -> . atom OP_POWER factor
    (43) power -> . atom trailers OP_POWER factor
    (72) atom -> . ( )
    (73) atom -> . ( yield_expr )
    (74) atom -> . ( testlist_comp )
    (75) atom -> . [ ]
    (76) atom -> . [ listmaker ]
    (77) atom -> . { }
    (78) atom -> . { dictormaker }
    (79) atom -> . { setmaker }
    (80) atom -> . ` testlist1 `
    (81) atom -> . NAME
    (82) atom -> . NUMBER
    (83) atom -> . strings
    (84) strings -> . strings STRING
    (85) strings -> . STRING

    INDENT          shift and go to state 231
    TAG_DEL         shift and go to state 61
    TAG_PASS        shift and go to state 32
    TAG_GLOBAL      shift and go to state 55
    TAG_EXEC        shift and go to state 8
    TAG_ASSERT      shift and go to state 41
    TAG_DRAW        shift and go to state 12
    TAG_BREAK       shift and go to state 69
    TAG_CONTINUE    shift and go to state 66
    TAG_RETURN      shift and go to state 51
    TAG_RAISE       shift and go to state 14
    TAG_IMPORT      shift and go to state 48
    TAG_FROM        shift and go to state 53
    TAG_YIELD       shift and go to state 81
    TAG_LAMBDA      shift and go to state 11
    TAG_NOT         shift and go to state 7
    +               shift and go to state 84
    -               shift and go to state 72
    ~               shift and go to state 65
    (               shift and go to state 9
    [               shift and go to state 43
    {               shift and go to state 49
    `               shift and go to state 25
    NAME            shift and go to state 59
    NUMBER          shift and go to state 67
    STRING          shift and go to state 33

    small_stmt                     shift and go to state 2
    shift_expr                     shift and go to state 3
    import_from                    shift and go to state 4
    arith_expr                     shift and go to state 47
    return_stmt                    shift and go to state 50
    not_test                       shift and go to state 68
    flow_stmt                      shift and go to state 34
    draw_stmt                      shift and go to state 71
    expr_stmt                      shift and go to state 23
    continue_stmt                  shift and go to state 54
    testlist_anns                  shift and go to state 35
    exec_stmt                      shift and go to state 36
    factor                         shift and go to state 13
    test                           shift and go to state 74
    global_stmt                    shift and go to state 75
    import_name                    shift and go to state 76
    and_expr                       shift and go to state 63
    break_stmt                     shift and go to state 70
    yield_expr                     shift and go to state 77
    power                          shift and go to state 40
    simple_stmt                    shift and go to state 230
    testlist                       shift and go to state 18
    and_test                       shift and go to state 78
    assert_stmt                    shift and go to state 20
    lambdef                        shift and go to state 22
    suite                          shift and go to state 440
    import_stmt                    shift and go to state 44
    comparison                     shift and go to state 45
    term                           shift and go to state 26
    pass_stmt                      shift and go to state 46
    xor_expr                       shift and go to state 52
    expr                           shift and go to state 31
    raise_stmt                     shift and go to state 57
    or_test                        shift and go to state 29
    del_stmt                       shift and go to state 83
    atom                           shift and go to state 56
    strings                        shift and go to state 82
    yield_stmt                     shift and go to state 64

state 438

    (172) old_lambdef -> TAG_LAMBDA varargslist : old_test .

    TAG_FOR         reduce using rule 172 (old_lambdef -> TAG_LAMBDA varargslist : old_test .)
    TAG_IF          reduce using rule 172 (old_lambdef -> TAG_LAMBDA varargslist : old_test .)
    )               reduce using rule 172 (old_lambdef -> TAG_LAMBDA varargslist : old_test .)
    }               reduce using rule 172 (old_lambdef -> TAG_LAMBDA varargslist : old_test .)
    ,               reduce using rule 172 (old_lambdef -> TAG_LAMBDA varargslist : old_test .)
    ]               reduce using rule 172 (old_lambdef -> TAG_LAMBDA varargslist : old_test .)


state 439

    (113) list_if -> TAG_IF old_test list_iter .

    ]               reduce using rule 113 (list_if -> TAG_IF old_test list_iter .)


state 440

    (196) try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .

    DEDENT          reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_IF          reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_WHILE       reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_FOR         reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_TRY         reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_DEF         reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_CLASS       reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_DEL         reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_PASS        reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_GLOBAL      reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_EXEC        reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_ASSERT      reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_DRAW        reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_BREAK       reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_CONTINUE    reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_RETURN      reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_RAISE       reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_IMPORT      reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_FROM        reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    @               reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_YIELD       reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_LAMBDA      reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    TAG_NOT         reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    +               reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    -               reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    ~               reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    (               reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    [               reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    {               reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    `               reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    NAME            reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    NUMBER          reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    STRING          reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    ENDMARKER       reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)
    NEWLINE         reduce using rule 196 (try_stmt -> TAG_TRY : suite except_clauses TAG_ELSE : suite TAG_FINALLY : suite .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TAG_NOT in state 45 resolved as shift
WARNING: shift/reduce conflict for + in state 47 resolved as shift
WARNING: shift/reduce conflict for - in state 47 resolved as shift
WARNING: shift/reduce conflict for ( in state 56 resolved as shift
WARNING: shift/reduce conflict for [ in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING in state 82 resolved as shift
WARNING: shift/reduce conflict for TAG_LAMBDA in state 138 resolved as shift
WARNING: shift/reduce conflict for TAG_NOT in state 138 resolved as shift
WARNING: shift/reduce conflict for + in state 138 resolved as shift
WARNING: shift/reduce conflict for - in state 138 resolved as shift
WARNING: shift/reduce conflict for ~ in state 138 resolved as shift
WARNING: shift/reduce conflict for ( in state 138 resolved as shift
WARNING: shift/reduce conflict for [ in state 138 resolved as shift
WARNING: shift/reduce conflict for { in state 138 resolved as shift
WARNING: shift/reduce conflict for ` in state 138 resolved as shift
WARNING: shift/reduce conflict for NAME in state 138 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 138 resolved as shift
WARNING: shift/reduce conflict for STRING in state 138 resolved as shift
WARNING: shift/reduce conflict for ( in state 178 resolved as shift
WARNING: shift/reduce conflict for [ in state 178 resolved as shift
WARNING: shift/reduce conflict for + in state 195 resolved as shift
WARNING: shift/reduce conflict for - in state 195 resolved as shift
WARNING: shift/reduce conflict for + in state 196 resolved as shift
WARNING: shift/reduce conflict for - in state 196 resolved as shift
